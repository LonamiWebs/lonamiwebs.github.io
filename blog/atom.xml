<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Lonami&#x27;s Site - My Blog</title>
	<link href="https://lonami.dev/blog/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://lonami.dev/blog/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-08-20T00:00:00+00:00</updated>
	<id>https://lonami.dev/blog/atom.xml</id>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Multilevel pointers</title>
		<published>2021-08-20T00:00:00+00:00</published>
		<updated>2021-08-20T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-8/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-8/</id>
		<content type="html">&lt;p&gt;This is part 8 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 8: Multilevel pointers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 7 we learnt how to allocate memory in the remote process, and how we can use that memory to inject our own code for the remote process to execute. Although we didn&#x27;t bother with an assembler, it shows just how strong this technique can really be. With it we&#x27;ve completed the Read, Write and eXecute trio!&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to find how we can make our work persist. Having to manually find where some value lives is boring. If the game is able to find the player&#x27;s health for its calculations, then why can&#x27;t we?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;multilevel-pointers&quot;&gt;Multilevel pointers&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 7&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;This step will explain how to use multi-level pointers.&lt;&#x2F;p&gt;
&lt;p&gt;In step 6 you had a simple level-1 pointer, with the first address found already being the real base address. This step however is a level-4 pointer. It has a pointer to a pointer to a pointer to a pointer to a pointer to the health.&lt;&#x2F;p&gt;
&lt;p&gt;You basicly do the same as in step 6. Find out what accesses the value, look at the instruction and what probably is the base pointer value, and what is the offset, and already fill that in or write it down. But in this case the address you&#x27;ll find will also be a pointer. You just have to find out the pointer to that pointer exactly the same way as you did with the value. Find out what accesses that address you found, look at the assembler instruction, note the probable instruction and offset, and use that, and continue till you can&#x27;t get any further (usually when the base address is a static address, shown up as green).&lt;&#x2F;p&gt;
&lt;p&gt;Click Change Value to let the tutorial access the health. If you think you&#x27;ve found the pointer path click Change Register. The pointers and value will then change and you&#x27;ll have 3 seconds to freeze the address to 5000.&lt;&#x2F;p&gt;
&lt;p&gt;Extra: This problem can also be solved using a auto assembler script, or using the pointer scanner.&lt;&#x2F;p&gt;
&lt;p&gt;Extra2: In some situations it is recommended to change ce&#x27;s codefinder settings to Access violations when encountering instructions like mov eax,[eax] since debugregisters show it AFTER it was changed, making it hard to find out the the value of the pointer.&lt;&#x2F;p&gt;
&lt;p&gt;Extra3: If you&#x27;re still reading. You might notice that when looking at the assembler instructions that the pointer is being read and filled out in the same codeblock (same routine, if you know assembler, look up till the start of the routine). This doesn&#x27;t always happen, but can be really useful in finding a pointer when debugging is troublesome.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;pointers-pointing-points&quot;&gt;Pointers pointing points&lt;&#x2F;h2&gt;
&lt;p&gt;If you say &amp;quot;pointer&amp;quot; enough, you&#x27;ll end up having &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Semantic_satiation&quot;&gt;semantic satiation&lt;&#x2F;a&gt;. My goal by the end of this post is that you actually get to experience that phenomenon. Anyway, no real program would actually have pointers pointing to pointers which themselves point to a different point (you guessed it, another pointer pointing to yet another pointer), right? That would be silly. Why would I have a value behind, say, 5 references? I&#x27;m not writing Rust code like &lt;code&gt;&amp;amp;&amp;amp;&amp;amp;&amp;amp;&amp;amp;value&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But I am sure you are much more likely to be doing something like &lt;code&gt;game.world.areas[i].players[j].regen()&lt;&#x2F;code&gt;. And there&#x27;s a lot of references there:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt; game.world.areas[i].players[j].regen()
^    ^           ^^^        ^^^      ^^
|    |            |          |        \called by &amp;amp;mut ref
|    |            |           \taking by &amp;amp;mut ref
|    |             \taking by &amp;amp;mut ref
|     \accessing by &amp;amp;mut ref
 \this game is actually in a `Box` (so you&#x27;re accessing it behind other ref)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each of those is a different structure, with many fields each (for example, the areas also contain enemies and items dropped in different vectors. So a pointer does not necessarily point directly to the desired field! To complicate things further, the same reference to one thing may be stored in multiple locations, making it possible to find your goal address through many different paths.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[repr(C)] &#x2F;&#x2F; &amp;lt;- used for clarity to get precise offsets
struct Area {
    &#x2F;* offset 00 *&#x2F; pub monsters: Vec&amp;lt;Monster&amp;gt;,
    &#x2F;* offset 24 *&#x2F; pub items: Vec&amp;lt;Item&amp;gt;,
    &#x2F;* offset 48 *&#x2F; pub kill_goal: u32,
    &#x2F;* offset 52 *&#x2F; pub players: Vec&amp;lt;Player&amp;gt;,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have a reference to some &lt;code&gt;&amp;amp;Area&lt;&#x2F;code&gt; but access the &lt;code&gt;players&lt;&#x2F;code&gt; field, you actually need to read from &lt;code&gt;[addrof area + 52]&lt;&#x2F;code&gt;. This is why the tutorial step suggests to &amp;quot;look at the instruction&amp;quot;, because it very likely encodes the offset somewhere (if not directly, nearby). Looking at instructions to determine offsets works because normally people want their games to be fast, so they make good use of the available CPU instructions. Obfuscating hot code could slow a game way too much (but it may still be done to some degree!).&lt;&#x2F;p&gt;
&lt;p&gt;The tutorial suggests to complete this step in the same way we did back in step 6. Add a watchpoint, find out what code is accessing this address, look around the disassembly, and write down your findings. Although this technique definitely is a valid way to approach the problem, it is quite tedious and error-prone. It would be hard to fully automate this, because who knows what shenanigans the code could be doing to calculate the right pointer and offset!&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also pretty intrusive, because it requires us to attach ourselves as the debugger of the victim program. I hardly have any experience writing debuggers, leave alone writing them in a way that makes them hard to detect! I&#x27;m sure it&#x27;s a very interesting topic, but it&#x27;s not the current topic at hand, so we&#x27;ll leave it be. Furthermore, we&#x27;ve already gone that route, so it would be silly to repeat that here, just a longer version of it.&lt;&#x2F;p&gt;
&lt;p&gt;You may have noticed the &amp;quot;extra&amp;quot; information the tutorial step provides:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extra: This problem can also be solved using a auto assembler script, or using the pointer scanner.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We&#x27;ve already done the &amp;quot;auto assembler script&amp;quot; part before (in part 7). I&#x27;m not sure how you would approach this problem with that technique. Maybe one could dig until the base pointer, and replace whatever read is happening there with a hardcoded value so that the game thinks that&#x27;s what it actually read? I&#x27;m not sure if it would be possible to solve with injected code without following the entire pointer chain. But anyway, we&#x27;re not doing that, no manual work will happen on this one. No, we&#x27;re interested in the &lt;span class=&quot;rainbow&quot;&gt;pointer scanner&lt;&#x2F;span&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pointer-maps&quot;&gt;Pointer maps&lt;&#x2F;h2&gt;
&lt;p&gt;Once you find a value in Cheat Engine, you have the option to &amp;quot;Generate pointermap&amp;quot;. This will prompt you to select a file where the generated pointermap will be stored, in &lt;code&gt;.scandata&lt;&#x2F;code&gt; format (along with its &lt;code&gt;.addresslist&lt;&#x2F;code&gt;). If you&#x27;re scanning a lot of memory, you will get to see a progress window (otherwise, it will be pretty much instant), along with some statistics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unique pointervalues in target.&lt;&#x2F;li&gt;
&lt;li&gt;Scan duration.&lt;&#x2F;li&gt;
&lt;li&gt;Paths evaluated.&lt;&#x2F;li&gt;
&lt;li&gt;Paths &#x2F; seconds.&lt;&#x2F;li&gt;
&lt;li&gt;Static and dynamic queue sizes.&lt;&#x2F;li&gt;
&lt;li&gt;Results found.&lt;&#x2F;li&gt;
&lt;li&gt;Time spent writing.&lt;&#x2F;li&gt;
&lt;li&gt;Lowest known path.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My guess for &amp;quot;unique pointervalues&amp;quot; is the set of pointers found so far, and the queues may be used by the way the scan is done. The rest of information is pretty much self-explanatory (lowest known path probably is the shortest &amp;quot;pointer path&amp;quot; found so far). When I&#x27;m talking about &amp;quot;pointer paths&amp;quot;, I&#x27;m referring to a known, static base address that won&#x27;t change, with a list of offsets that, when followed, arrive at some desired value in memory (for example, your character&#x27;s health). For this step, the solution found with Cheat Engine is a good example:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let offsets = [10, 18, 0, 18]; &#x2F;&#x2F; list of offsets
let mut addr = EXE_BASE_ADDR + 0x00306B00; &#x2F;&#x2F; current addr (initialized to base addr)

&#x2F;&#x2F; follow the path:
&#x2F;&#x2F; addr_at(&amp;quot;Tutorial-x86_64.exe&amp;quot;+00306B00) -&amp;gt; 0165F260
&#x2F;&#x2F; addr_at(10+0165F260) -&amp;gt; 01690000
&#x2F;&#x2F; addr_at(18+01690000) -&amp;gt; 01677790
&#x2F;&#x2F; addr_at( 0+01677790) -&amp;gt; 01601A80
&#x2F;&#x2F;         18+01601A80  -&amp;gt; 01601A98
for offset in offsets {
    addr = process.read_addr_at(addr);
    addr += offset;
}

let value = process.read_desired_value_at(addr);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After generating the pointermap, the idea is to force the game to change the pointer path (for example, by closing and re-opening the game again) and find your target value once again. For the tutorial, we can just change the pointer. After we find the value again, we do a &amp;quot;Pointer scan for this address&amp;quot;. The &amp;quot;Pointerscanner options&amp;quot; has a checkbox to &amp;quot;Compare results with other saved pointermap(s)&amp;quot;. Running this seems to generate a second pointermap, and after some magic, both are compared and the one true pointer path is found&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a bunch of files generated:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.scandata&lt;&#x2F;code&gt; is a bunch of binary data that I have no idea what could contain.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.scandata.addresslist&lt;&#x2F;code&gt; seems to contain &lt;code&gt;ADDRESS=DESCRIPTION&lt;&#x2F;code&gt;,
one per line, of the addresses you had &amp;quot;saved&amp;quot; when the first
pointermap was made. This seems to be used when performing the pointer
scan and comparing results (so that you can choose the address you want
to compare it to).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.PTR&lt;&#x2F;code&gt; is 1201 bytes (such an strange size) and seems to contain a list of the modules loaded by the program&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.PTR.results.#&lt;&#x2F;code&gt;, where &lt;code&gt;#&lt;&#x2F;code&gt; is a number between 0 and 8, are mostly empty files (except for 4 which is 14 bytes).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, there&#x27;s this one option under &amp;quot;advanced&amp;quot; known as &amp;quot;Compress pointerscan file&amp;quot;. The long description reads (emphasis mine):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compresses the generated .PTR files &lt;em&gt;slightly&lt;&#x2F;em&gt;, so they take less space on the disk and less time writing to disk. Most of the time the bottleneck of a pointerscan is disk writing, so it is recommended to use this option.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Slightly, huh. Well, for the tutorial, which is using (according to the task manager) 2&#x27;364 K, running the scan with the compression disabled generates roughly &lt;em&gt;5 gigabytes&lt;&#x2F;em&gt; across the nine &lt;code&gt;.PTR.results&lt;&#x2F;code&gt;. That&#x27;s… not too shabby for a &amp;quot;slight&amp;quot; compression.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s guess what those files are storing. The screen with the results does say it found uh, well you know, the usual, 122&#x27;808&#x27;639 pointer paths. This is the result of scanning for an address. That&#x27;s (very) roughly 40 bytes per path, and assuming 8 bytes for each address&#x2F;offset, equates to 5 hops. I guess the math kind of checks out?&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand, &amp;quot;generate pointermap&amp;quot; just spits out the &lt;code&gt;.scandata&lt;&#x2F;code&gt; at roughly 60KB. So these two options are definitely doing something very, very different. And I have no idea what either of these are doing. Let&#x27;s dive into Cheat Engine&#x27;s &amp;quot;advanced options&amp;quot; for the pointer scan to try and gain some insight. I will be listing all the settings available in the scan form and adding a bit on whether I think they&#x27;re useful to us or not.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;scan-options&quot;&gt;Scan options&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;em&gt;Pointerscanner scanoptions&lt;&#x2F;em&gt; window has plenty of options that are extremely valuable to gain insight of what&#x27;s going on behind the scenes without having to dig into the code. At the very top we have three modes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scan for address&lt;&#x2F;li&gt;
&lt;li&gt;Scan for addresses with value&lt;&#x2F;li&gt;
&lt;li&gt;Generate pointermap&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The third option is what we use during the first step, and the first option for the second step.&lt;&#x2F;p&gt;
&lt;p&gt;When using either the first or second mode, you can also check &lt;em&gt;Use saved pointermap&lt;&#x2F;em&gt; which you can use if you have created a pointermap on a system that runs the game, but you wish to do the scan on another system (or multiple systems).&lt;&#x2F;p&gt;
&lt;p&gt;With the first or second mode, you can also &lt;em&gt;Compare results with other saved pointermap(s)&lt;&#x2F;em&gt; which, when ticked, lets you add other pointermaps which will be used to verify that the pointers it finds are correct. You do have to fill in the correct address for each pointermap provided, and one should expect at least the size of the game itself in memory for every pointermap used. We know this step is key, but we don&#x27;t know how that comparison could be possibly done.&lt;&#x2F;p&gt;
&lt;p&gt;The checkbox &lt;em&gt;Include system modules&lt;&#x2F;em&gt; I presume also scans in system modules and not just game&#x27;s own modules, which is useful if you suspect the value lives elsewhere. Not helpful for us right now, but good to know this is a possibility.&lt;&#x2F;p&gt;
&lt;p&gt;Apparently, Cheat Engine can improve pointerscan with gathered heap data. The heap is used to figure out the offset sizes, instead of blindly guessing them. This should greatly improve speed and a lot less useless results and give perfect pointers, but if the game allocates gigantic chunks of heap memory, and then divides it up itself, this will give wrong results. If you only allow static and heap addresses in the path, when the address searched isn&#x27;t a heap address, the scan will return 0 results. I do not really know how Cheat Engine gathers heap data here to improve the pointerscan, but since this mode is unchecked by default, we should be fine without it.&lt;&#x2F;p&gt;
&lt;p&gt;By default, the pointer path may only be inside the region 0000000000000000-7FFFFFFFFFFFFFFF. There&#x27;s a fancier option to limit scan to specified region file, which presumably enables a more complex, discontinuous region. Or you can filter pointers so that they end with specific offsets. Or you can indicate that the base address must be in specific range, which will only mark the given range as valid base address (this reduces the number of results, and internally makes use of the &amp;quot;Only find paths with a static address&amp;quot; feature by marking the provided range as static only, so it must be enabled).&lt;&#x2F;p&gt;
&lt;p&gt;Pointers with read-only nodes are excluded by default, so the pointerscan will throw away memory that is readonly. When it looks for paths, it won&#x27;t encounter paths that pass through read only memory blocks. This is often faster and yields less useless results, but if the game decides to mark a pointer as readonly Cheat Engine won&#x27;t find it.&lt;&#x2F;p&gt;
&lt;p&gt;Only paths with a static address are &amp;quot;found&amp;quot;. The pointerscan will only store a path when it starts with a static address (or easily looked up address). It may miss pointers that are accessed by special paths like thread local storage (but even then they&#x27;d be useless for Cheat Engine as they will change). When it&#x27;s disabled, it finds every single pointer path. Now, this bit is interesting, because the checkbox talks about &amp;quot;find&amp;quot;, but the description talks about &amp;quot;store&amp;quot;, so we can guess there&#x27;s no trick to only &amp;quot;finding&amp;quot; correct ones. It&#x27;s going to find a lot of things, and many of them will be discarded. It also mentions thread-local storage and how we probably shouldn&#x27;t worry about it.&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine won&#x27;t stop traversing a path when a static has been found by default. When the pointerscanner goes through the list of pointervalues with a specific value, this will stop exploring other paths as soon as it encounters a static pointer to that value. By enabling this option, some valid results could be missed. This talks about &amp;quot;pointervalues with a specific value&amp;quot;, which is a bit too obscure for me to try and make any sense out of it.&lt;&#x2F;p&gt;
&lt;p&gt;Addresses must be 32-bit alligned. Only pointers that are stored in an address dividable by 4 are looked at. When disabled, it won&#x27;t bother. It enables fast scans, but &amp;quot;on some horrible designed games that you shouldn&#x27;t even play it won&#x27;t find the paths&amp;quot;. Values in memory are often aligned, so reducing the search space by 75% is a no-brainer.&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine can optionally verify that the first element of pointerstruct must point to module (e.g vtable). Object oriented programming languages tend to implement classobjects by having a pointer in the first element to something that describes the class. With this option enabled, Cheat Engine will check if it&#x27;s a classobject by checking that rule. If not, it won&#x27;t see it as a pointer. It should yield a tremendous speed increase and almost perfect pointers, but it doesn&#x27;t work with runtime generated classes (Java, .NET). Optionally, it can also accept non-module addresses. I have no idea how this is achieved, but since it&#x27;s disabled by default, we can forget about it.&lt;&#x2F;p&gt;
&lt;p&gt;By default, no looping pointers are allowed. This will filter out pointerpaths that ended up in a loop (for example, base-&amp;gt;p1-&amp;gt;p2-&amp;gt;p3-&amp;gt;p1-&amp;gt;p4 since you could just as well do base-&amp;gt;p1-&amp;gt;p4 then, so throw this one away (base-&amp;gt;p1-&amp;gt;p4 will be found another way)). This gives less results so less diskspace used, but slightly slows down the scan as it needs to check for loops every single iteration. The thought of how much data the 5GB scan would generate without this option makes me shiver.&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine will allow stack addresses of the first thread(s) to be handled as static, which allows the stack of threads to be seen as static addresses by the pointerscan. The main thread is always a sure bet that it&#x27;s the first one in the list. And often the second thread created is pretty stable as well. With more there&#x27;s a bigger chance they get created and destroyed randomly. When a program enters a function and exits it, the stack pointer decreases and increases, and the data there gets written to. The farther the game is inside function calls, the more static the older data will be. With max stack offset you can set the max size that can be deemed as static enough (the max stackoffset to be deemed static enough is 4096 by default). It finds paths otherwise never found, but since there are more results, there&#x27;s more diskspace.&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine by default will look at the stacks of two threads, from oldest to newest. It indicates &amp;quot;the total number of threads that should be allowed to be used as a stack lookup. Thread 1 is usually the main thread of the game, but if that one spawns another thread for game related events, you might want to have that secondary thread as well. More threads is not recommend as they may get created and destroyed on the fly, and are therefore useless as a lookup base, but it depends on the game&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, this option is enabled by default, so it seems pretty important, and we might need to put some work into figuring out how &amp;quot;stacks&amp;quot; are found. However, this would mean that some &amp;quot;base&amp;quot; object (like a &lt;code&gt;Game&lt;&#x2F;code&gt; instance) is passed down by reference hundreds of calls, which seems pretty annoying just to have access to something that effectively acts like a global, so hopefully games don&#x27;t make use of this.&lt;&#x2F;p&gt;
&lt;p&gt;This can be taken a step further, and consider stack addresses as ONLY static address, if you wish to only find pointer paths with a stack address. It must be combined with &amp;quot;Only find paths with a static address&amp;quot; (default on) else this option will have no effect. You&#x27;ll only get paths from the stack, but you don&#x27;t get get paths from random DLL&#x27;s or the executable.&lt;&#x2F;p&gt;
&lt;p&gt;The pointerscan file is by default compressed. Cheat Engine Compresses the generated .PTR files slightly so they take less space on the disk and less time writing to disk. Most of the time the bottleneck of a pointerscan is disk writing, so it is recommended to use this option (which was not available in older versions).&lt;&#x2F;p&gt;
&lt;p&gt;Only positive offsets are scanned by default, but Cheat Engine may optionally scan for negative offsets as well (although it can not be used in combination with compressed pointerscan files; this seems to hint that the compression assumes only positive values).&lt;&#x2F;p&gt;
&lt;p&gt;On my machine, 9 threads are scanning by default with a maximum offset value of 4095 and a maximum level (depth) of 7. The maximum different offsets per node are 3. When the pointerscan looks through the list of pointers with a specific value, it goes through every single pointer that has that value. Every time increasing the offset slightly. With this feature enabled the pointerscan will only check the first few pointers with that value. This is extremely fast, and the results have the lowest pointer paths possible, but you&#x27;ll miss a lot of pointers that might be valid too. I think this description is key, as it clearly says what the pointerscan does and maybe even how it works (although it sounds a bit inefficient, so Cheat Engine probably uses other tricks).&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine clearly knows this process is expensive, so it optionally allow scanners to connect at runtime. This opens a port that other systems running the pointerscanner can connect to and help out with the scan. Or it can connect to pointerscan node, which will send a broadcast message on the local network which will tell pointer scanner systems to join this scan if they are set to auto join (or &amp;quot;Setup specific IP&#x27;s to notify&amp;quot; to notify systems of this scan that are outside of the local network).&lt;&#x2F;p&gt;
&lt;p&gt;And that&#x27;s all! In summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Assume addresses are 32-bit aligned (maybe even 64-bit).&lt;&#x2F;li&gt;
&lt;li&gt;Discard paths that don&#x27;t end in a static address (bonus points if the top of the stack for the firsts two threads are also considered).&lt;&#x2F;li&gt;
&lt;li&gt;Ignore read-only memory.&lt;&#x2F;li&gt;
&lt;li&gt;Limit the number of offsets per pointer to something small like 3, and give up after reaching a depth greater than 7.&lt;&#x2F;li&gt;
&lt;li&gt;Limit the offset range to &lt;code&gt;0..4096&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Use multiple threads.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;single-threaded-naive-approach&quot;&gt;Single-threaded naive approach&lt;&#x2F;h2&gt;
&lt;p&gt;After playing around a bit more with Cheat Engine&#x27;s scans, I realized the 14 bytes of the &lt;code&gt;.PTR.results.4&lt;&#x2F;code&gt; is because the process literally finds a single path which it places there. Running the process with compression and no previous scan to compare it to spits out roughly 750MB (so the compression does go from 5GB to 750MB, that&#x27;s a lot more reasonable).&lt;&#x2F;p&gt;
&lt;p&gt;In any case, we&#x27;re with the &lt;code&gt;.scandata&lt;&#x2F;code&gt; now. I really do wonder what could it possibly contain? I really doubt it&#x27;s the pointer paths found, because then it would be huge. Perhaps it contains the memory regions? That would make some sense, since the sibling &lt;code&gt;.addresslist&lt;&#x2F;code&gt; &lt;em&gt;is&lt;&#x2F;em&gt; a list of all the loaded modules. Maybe the &lt;code&gt;.scandata&lt;&#x2F;code&gt; contains the memory regions for all of those loaded modules.&lt;&#x2F;p&gt;
&lt;p&gt;For the first time in this series, I really don&#x27;t know how Cheat Engine could be working behind the scenes. Is it really evaluating millions of &lt;em&gt;paths&lt;&#x2F;em&gt;? That&#x27;s a lot of memory, no matter how you encode it! I&#x27;m really impressed at the processing speed if this is in fact the case. Let&#x27;s see how a naive approach for that could look like&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We start off with a single address, the address of a particular value we care about in memory (for example, the player&#x27;s health). This address is an 8-byte number (which for us is an &lt;code&gt;usize&lt;&#x2F;code&gt;), so we can look for pointer-values (values in memory that look like a pointer to a certain address) that point to this address (or close enough). Let&#x27;s call this &lt;code&gt;goal_addr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For every memory block, and for every pointer value &lt;code&gt;ptr_val&lt;&#x2F;code&gt; in it, we check if the distance between the &lt;code&gt;ptr_val&lt;&#x2F;code&gt; and the &lt;code&gt;goal_addr&lt;&#x2F;code&gt; falls within an arbitrary range, for example:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let process = Process::open(pid)?;

let mask = winnt::PAGE_EXECUTE_READWRITE
    | winnt::PAGE_EXECUTE_WRITECOPY
    | winnt::PAGE_READWRITE
    | winnt::PAGE_WRITECOPY;

let regions = process
    .memory_regions()
    .into_iter()
    .filter(|p| (p.Protect &amp;amp; mask) != 0) &#x2F;&#x2F; (1)
    .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

let mut candidate_locations = Vec::new();

for region in regions {
    let base = region.BaseAddress as usize;
    let block = match process.read_memory(base, region.RegionSize) {
        Ok(block) =&amp;gt; block,
        Err(_) =&amp;gt; continue, &#x2F;&#x2F; (2)
    };

    for (offset, chunk) in block.chunks_exact(8).enumerate() { &#x2F;&#x2F; (3)
        let ptr_val = usize::from_ne_bytes(chunk.try_into().unwrap()); &#x2F;&#x2F; (4)
        if (0..4096).contains(goal_addr.wrapping_sub(ptr_val)) { &#x2F;&#x2F; (5)
            let ptr_val_addr = base + offset * 8;
            candidate_locations.push(ptr_val_addr); &#x2F;&#x2F; (6)
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a lot of things to unpack in this small snippet:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We&#x27;re only interested in regions that are both readable and writable, pretty much like Cheat Engine is doing.&lt;&#x2F;li&gt;
&lt;li&gt;If we can&#x27;t read a memory region, we can just skip it. Our desired address is probably not there. There&#x27;s a lot of regions anyway so this is probably a good thing as we can reduce the scanning time!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;chunks_exact&lt;&#x2F;code&gt; achieves multiple things:
&lt;ul&gt;
&lt;li&gt;It&#x27;s the most concise way to read chunks of 8 bytes in size, the alternative being having a &lt;code&gt;for i in (0..block.len())&lt;&#x2F;code&gt; and then slicing on &lt;code&gt;&amp;amp;block[i..i+8]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It will look on aligned addresses&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for free (the alternative being &lt;code&gt;.windows(8)&lt;&#x2F;code&gt;, which would also look for unaligned addresses).&lt;&#x2F;li&gt;
&lt;li&gt;It makes sure the chunk is always 8 bytes in size, which is important&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, because &lt;code&gt;usize&lt;&#x2F;code&gt; is also 8 bytes in size on 64-bit machines.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Interpreting 8 bytes of memory as an &lt;code&gt;usize&lt;&#x2F;code&gt; can be safely (and efficiently!)&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; achieved through &lt;code&gt;usize::from_ne_bytes&lt;&#x2F;code&gt;, which expects an &lt;code&gt;[u8; mem::size_of::&amp;lt;usize&amp;gt;()]&lt;&#x2F;code&gt;. Thankfully, we can convert the 8-byte-long slice into an array pretty easily with &lt;code&gt;.try_into()&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s important to use &lt;code&gt;wrapping_sub&lt;&#x2F;code&gt;, because the &lt;code&gt;-&lt;&#x2F;code&gt; operator would panic on underflow on debug by default&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Since we&#x27;re reading all of the memory in the program, there will be a lot of values, many of which would be less than &lt;code&gt;goal_addr&lt;&#x2F;code&gt;, causing underflow. Note also how we could interpret the values as &lt;code&gt;isize&lt;&#x2F;code&gt; instead so that a negative offset could be used in the range. However, a negative offset is much less common&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, so it&#x27;s fine to stick with positive offsets.&lt;&#x2F;li&gt;
&lt;li&gt;We have a candidate pointer-value, so we make sure to store its address.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;At the end of this, &lt;code&gt;candidate_locations&lt;&#x2F;code&gt; will have &lt;em&gt;many&lt;&#x2F;em&gt; memory addresses pointing to a different &lt;code&gt;ptr_val&lt;&#x2F;code&gt; each. This &lt;code&gt;ptr_val&lt;&#x2F;code&gt; points to &lt;code&gt;goal_addr&lt;&#x2F;code&gt; minus some offset (which can be calculated at any time by substracting again). These are the pointer-values at depth 0&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Each of these &lt;code&gt;candidate_locations&lt;&#x2F;code&gt; is in itself the next &lt;code&gt;goal_addr&lt;&#x2F;code&gt;, and running the process again will produce pointer-values for depth 1. Yes, you&#x27;ve guessed it, this has exponential growth. No wonder Cheat Engine finds millions of paths. And don&#x27;t forget to somehow save &amp;quot;this address came from this other address&amp;quot;, so that you can follow the chain back after you&#x27;re done!&lt;&#x2F;p&gt;
&lt;p&gt;Note the importance of limiting the depth: not only this growth has to stop at some point, but also think about cyclic paths. The program would get stuck as soon as &lt;code&gt;ptr_val_addr == ptr_val&lt;&#x2F;code&gt;, looking for itself over and over again! Without actively looking for cycles&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, and without limiting the depth, the process would never finish.&lt;&#x2F;p&gt;
&lt;p&gt;After the full process completes (having executed multiple iterations of it at multiple depths), we would need to check every path to see if it works for us (that is, if it starts with a &amp;quot;static address&amp;quot;). You will have an obscene amount of paths, many of which won&#x27;t actually work after restarting the program (it might have been luck that some unrelated component got allocated close to your original &lt;code&gt;goal_addr&lt;&#x2F;code&gt; but now it&#x27;s not anymore). So how do we clean this mess up?&lt;&#x2F;p&gt;
&lt;p&gt;We run the process again! Preferably, after the memory has shuffled around enough (for example, again, restarting the program). Once we have the list of paths &amp;quot;before&amp;quot; and &amp;quot;after&amp;quot;, we compare them all. The naive approach of checking, for every path in &amp;quot;before&amp;quot;, if any of the paths in &amp;quot;after&amp;quot; is the same, would yield a sweet time complexity of &lt;code&gt;O(n²)&lt;&#x2F;code&gt;, with millions of paths. This ain&#x27;t gonna cut it. We must do better. I don&#x27;t know if this is what Cheat Engine is doing (but if it is, I tip my hat to them), but since I can&#x27;t think of an efficient way to do it, we&#x27;ll be going a different route.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;speeding-up-the-scan&quot;&gt;Speeding up the scan&lt;&#x2F;h2&gt;
&lt;p&gt;By reading an entire block of memory at a time, we&#x27;re actually doing pretty okay on that department. It would be very, very wasteful to issue millions of reads of 8 bytes, when we could instead run thousands of reads of several kilobytes (or more!). Of course, we still have to read millions of 8-bytes, but if they&#x27;re in our memory and don&#x27;t require a call to the Windows API, it&#x27;s going to be orders of magnitude faster.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re only reading aligned pointers, cutting down the amount of reads and checks we perform down to &lt;code&gt;1&#x2F;8&lt;&#x2F;code&gt;. A lot of useless results are also discarded this way.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re only considering positive offsets, and we&#x27;re limiting how &amp;quot;far&amp;quot; the &lt;code&gt;goal_addr&lt;&#x2F;code&gt; can be from a possible &lt;code&gt;ptr_val&lt;&#x2F;code&gt; before we stop considering said &lt;code&gt;ptr_val&lt;&#x2F;code&gt;. After all, a structure longer than 4096 bytes should hopefully be uncommon. By doing this, we only keep &amp;quot;address-like&amp;quot; values, which have a very high chance of being an actual address, although they could very well not be! We may be finding arbitrary values and think they represent an address when they actually don&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re limiting the maximum depth we&#x27;re willing to go. This depth directly correlates to the maximum length a pointer path can have. If you&#x27;re confident the path won&#x27;t be longer than, say, 5 addressses, there&#x27;s no need to dive any deeper, and you will save on a lot of processing this way.&lt;&#x2F;p&gt;
&lt;p&gt;This code can be made parallel trivially (after making Rust compiler happy, anyway). There is a lot of &lt;code&gt;ptr_val_addr&lt;&#x2F;code&gt; values to scan for, so if we think of &lt;code&gt;candidate_locations&lt;&#x2F;code&gt; as a &amp;quot;queue of work&amp;quot;, more than one thread can be popping from it and running the scan. This gives a nice boost on multi-core systems. It doesn&#x27;t entirely scale linearly with the number of cores, but it&#x27;s close enough to what you would expect.&lt;&#x2F;p&gt;
&lt;p&gt;A pointer path will only be considered if it starts with a static address. This means the last address pushed must be static (the path is backwards, because we started at the end, &lt;code&gt;goal_addr&lt;&#x2F;code&gt;). This should clean-up a lot of intermediate and uninteresting addresses. If the address isn&#x27;t static, it&#x27;s not really interesting to us. Remember, the reason we&#x27;re doing all of this is so that we can reuse said address in the future, without the need to find &lt;code&gt;goal_addr&lt;&#x2F;code&gt; manually.&lt;&#x2F;p&gt;
&lt;p&gt;Comparing the pointer paths will result in paths that very likely will work in the future. Not only is this important to reduce the number of paths drastically, but it also provides better guarantees about what is a &amp;quot;good&amp;quot;, reliable path to follow to find &lt;code&gt;goal_addr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next up, let&#x27;s talk about some of the more intrusive optimizations which I actually seeked to reach an acceptable runtime. This will be where I started to code this up.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;working-out-a-poc&quot;&gt;Working out a PoC&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Add a braindump mess enough to find pointerpaths&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is the commit message that made it possible to complete step 8 on the tutorial (the actual commit message has quite some more lines explaining the commit). Unlike previous entries of this series, I had a hard time making incremental progress. So let&#x27;s dissect what was done instead.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The approach used in this commit (although really messy), consists on taking two &amp;quot;snapshots&amp;quot; of the memory, and knowing where a desired value is located in both.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By introducing the concept of &amp;quot;snapshots&amp;quot;, we can &amp;quot;freeze&amp;quot; the process&#x27; memory at a given point in time, and scan it at our leisure, without having to worry about it changing. Not only this, but it also saves on a lot of calls to &lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt;, so it&#x27;s also more efficient. If memory is an issue, these structures could be saved to disk and streamed instead. I haven&#x27;t measured how fast this is, but having our own copy of the process&#x27; memory lets us run the scan even after the process is closed (and by then we would reclaim some of that memory), so this approach is mostly benefits.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Clone, Debug, PartialEq)]
pub struct Block {
    pub real_addr: usize,
    pub mem_offset: usize,
    pub len: usize,
    pub base: bool, &#x2F;&#x2F; is this a &amp;quot;base&amp;quot; block (i.e. `real_addr` will be static)?
}

#[derive(Clone, Debug, Default, PartialEq)]
pub struct Snapshot {
    pub memory: Vec&amp;lt;u8&amp;gt;,
    pub blocks: Vec&amp;lt;Block&amp;gt;,
}

impl Snapshot {
    pub fn new(process: &amp;amp;Process, regions: &amp;amp;[winapi::um::winnt::MEMORY_BASIC_INFORMATION]) -&amp;gt; Self {
        let modules = process.enum_modules().unwrap();
        let mut blocks = regions
            .iter()
            .map(|r| Block {
                real_addr: r.BaseAddress as usize,
                mem_offset: 0,
                len: r.RegionSize,
                &#x2F;&#x2F; &amp;quot;base&amp;quot; blocks are those where they start at the same address
                &#x2F;&#x2F; as some module, as seen in the sixth entry of this series.
                base: modules.iter().any(|module| {
                    let base = r.AllocationBase as usize;
                    let addr = *module as usize;
                    base == addr
                }),
            })
            .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

        &#x2F;&#x2F; this will be useful later
        blocks.sort_by_key(|b| b.real_addr);

        let mut memory = Vec::new();
        let blocks = blocks
            .into_iter()
            .filter_map(|b| match process.read_memory(b.real_addr, b.len) {
                Ok(mut chunk) =&amp;gt; {
                    let len = chunk.len();
                    let mem_offset = memory.len();
                    memory.append(&amp;amp;mut chunk);
                    Some(Block {
                        real_addr: b.real_addr,
                        mem_offset,
                        len,
                        base: b.base,
                    })
                }
                Err(_) =&amp;gt; None,
            })
            .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

        Self {
            memory,
            blocks,
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty straightforward. A &lt;code&gt;Snapshot&lt;&#x2F;code&gt; consists of the process&#x27; memory along with some metadata for the blocks. This lets us known, given an index into &lt;code&gt;memory&lt;&#x2F;code&gt;, what is its real address (or vice versa):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn get_block_idx_from_mem_offset(&amp;amp;self, mem_offset: usize) -&amp;gt; usize {
    match self.blocks.binary_search_by_key(&amp;amp;mem_offset, |b| b.mem_offset) {
        Ok(index) =&amp;gt; index,
        Err(index) =&amp;gt; index - 1,
    }
}

fn get_block_idx_from_addr(&amp;amp;self, addr: usize) -&amp;gt; usize {
    match self.blocks.binary_search_by_key(&amp;amp;addr, |b| b.real_addr) {
        Ok(index) =&amp;gt; index,
        Err(index) =&amp;gt; index - 1,
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because we&#x27;ve sorted by &lt;code&gt;real_addr&lt;&#x2F;code&gt;, and we filled the &lt;code&gt;memory&lt;&#x2F;code&gt; in order, we can &lt;code&gt;binary_search_by_key&lt;&#x2F;code&gt; in both cases. &lt;code&gt;Process::read_memory&lt;&#x2F;code&gt; translates into &lt;code&gt;Snapshot::read_memory&lt;&#x2F;code&gt; as follows:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn read_memory(&amp;amp;self, addr: usize, n: usize) -&amp;gt; Option&amp;lt;&amp;amp;[u8]&amp;gt; {
    let block = &amp;amp;self.blocks[self.get_block_idx_from_addr(addr)];
    let delta = addr - block.real_addr;
    if delta + n &amp;gt; block.len {
        None
    } else {
        let offset = block.mem_offset + delta;
        Some(&amp;amp;self.memory[offset..offset + n])
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because this time we already own the memory, we can return a slice and avoid allocations&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#11&quot;&gt;11&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Now that we have two snapshots of the process&#x27; memory at different points in time (so the pointer-values to &lt;code&gt;goal_addr&lt;&#x2F;code&gt; are different), we find &lt;code&gt;goal_addr&lt;&#x2F;code&gt; in both snapshots (it should be a different value, unless it so happens to be in static memory already).&lt;&#x2F;p&gt;
&lt;p&gt;Then, the pointer value of the address is searched in the second snapshot (within a certain range, it does not need to be exact). For every value found, a certain offset will have been used. Now, the pointer value minus &lt;em&gt;this exact offset&lt;&#x2F;em&gt; &lt;strong&gt;must&lt;&#x2F;strong&gt; be found &lt;em&gt;exactly&lt;&#x2F;em&gt; on the other snapshot (it does not matter which snapshot you start with&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#12&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;). This is the &amp;quot;aha!&amp;quot; moment, and it&#x27;s a key step, so let&#x27;s make sure we understand why we&#x27;re doing this.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than guessing candidate pointer-values which would have a given offset as a standalone step, we merge this with the comparison step, insanely reducing the amount of candidates. Before, any pointer-value close enough to &lt;code&gt;goal_addr&lt;&#x2F;code&gt; had to be considered, and in a process with megabytes or gigabytes of memory, this is going to be a lot. However, by keeping only the pointer-values (which have a given offset) that &lt;em&gt;also&lt;&#x2F;em&gt; exist on the alternate snapshot with the &lt;em&gt;exact&lt;&#x2F;em&gt; value, we&#x27;re tremendously reducing the number of false positives.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl Snapshot {
    &#x2F;&#x2F; Iterate over (memory address, pointer value at said address)
    pub fn iter_addr(&amp;amp;self) -&amp;gt; impl Iterator&amp;lt;Item = (usize, usize)&amp;gt; + &#x27;_ {
        let mut blocks = self.blocks.iter().peekable();
        self.memory
            .chunks_exact(8)
            .enumerate()
            .map(move |(i, chunk)| {
                let mut block = *blocks.peek().unwrap();
                if i * 8 &amp;gt;= block.mem_offset + block.len {
                    &#x2F;&#x2F; Roll over to the next block.
                    block = blocks.next().unwrap();
                }

                (
                    block.real_addr + (i * 8 - block.mem_offset),
                    usize::from_ne_bytes(chunk.try_into().unwrap()),
                )
            })
    }
}

struct PathFinder {
    first_snap: Snapshot,
    second_snap: Snapshot,
    addresses: std::cell::Cell&amp;lt;Vec&amp;lt;(bool, u8, usize)&amp;gt;&amp;gt;, &#x2F;&#x2F; (last node?, depth, real address)
}

impl PathFinder {
    fn run(&amp;amp;self, first_addr: usize, second_addr: usize, depth: u8) -&amp;gt; bool {
        &#x2F;&#x2F; F: first, S: second; RA: Real Address; PV: Pointer Value
        let depth = depth - 1;
        let mut any = false;
        for (sra, spv) in self.second_snap.iter_addr().filter(|(_sra, spv)| {
            if let Some(offset) = second_addr.checked_sub(*spv) {
                offset &amp;lt;= MAX_OFFSET
            } else {
                false
            }
        }) {
            if self.second_snap.is_base_addr(sra) {
                unsafe { &amp;amp;mut *self.addresses.as_ptr() }.push((true, depth + 1, sra));
                any = true;
                continue;
            }
            if depth == 0 {
                continue;
            }
            let offset = second_addr - spv;
            for (fra, _fpv) in self
                .first_snap
                .iter_addr()
                .filter(|(_fra, fpv)| fpv.wrapping_add(offset) == first_addr)
            {
                if self.run(fra, sra, depth) {
                    unsafe { &amp;amp;mut *self.addresses.as_ptr() }.push((false, depth + 1, sra));
                    any = true;
                }
            }
        }

        any
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Snapshot::iter_addr&lt;&#x2F;code&gt; is like &lt;code&gt;read_memory&lt;&#x2F;code&gt;, but better for our needs, because it automatically returns the pointer-values and its corresponding real address efficiently. The &lt;code&gt;PathFinder&lt;&#x2F;code&gt; is a helper &lt;code&gt;struct&lt;&#x2F;code&gt; to avoid passing &lt;code&gt;first_snap&lt;&#x2F;code&gt;, &lt;code&gt;second_snap&lt;&#x2F;code&gt; and &lt;code&gt;addresses&lt;&#x2F;code&gt; as parameters on every call.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Snapshot::run&lt;&#x2F;code&gt; is a recursive method which is called with the &lt;code&gt;goal_addr&lt;&#x2F;code&gt; in both the first and second snapshot, along with a depth. When this depth reaches 0, the method stops recursing. The method also stops when a base (static) address is found.&lt;&#x2F;p&gt;
&lt;p&gt;The method starts by looking for all pointer-values in the second snapshot where &lt;code&gt;ptr_value + offset = second_addr&lt;&#x2F;code&gt; for all &lt;code&gt;offset in 0..=MAX_OFFSET&lt;&#x2F;code&gt;. For every candidate &lt;code&gt;ptr_value&lt;&#x2F;code&gt; with a given &lt;code&gt;offset&lt;&#x2F;code&gt;, it looks &lt;strong&gt;exactly&lt;&#x2F;strong&gt; for &lt;code&gt;first_addr - offset&lt;&#x2F;code&gt; in the alternate snapshot (the first one). Once found, we have a candidate offset valid in &lt;em&gt;both&lt;&#x2F;em&gt; snapshots, and then we can recurse to find subsequent offsets on the real addresses of these pointer values themselves. The addresses of these pointer-values are our new &lt;code&gt;goal_addr&lt;&#x2F;code&gt; in the next depth.&lt;&#x2F;p&gt;
&lt;p&gt;Once &lt;code&gt;run&lt;&#x2F;code&gt; returns from the top-most depth, we can convert post-process &lt;code&gt;addresses&lt;&#x2F;code&gt; into something usable, with an algorithm akin to run-length encoding (the real-code abuses the vector&#x27;s &lt;code&gt;capacity&lt;&#x2F;code&gt; and &lt;code&gt;len&lt;&#x2F;code&gt; to determine the &lt;code&gt;depth&lt;&#x2F;code&gt; and had inaccurate names, so I&#x27;ve rewritten that part for clarity):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;struct Path {
    addresses: Vec&amp;lt;usize&amp;gt;,
    depth: u8,
}

let mut paths = Vec::new();

for (base, depth, addr) in pf.addresses.into_inner() {
    if base {
        paths.push(Path { addresses: Vec::new(), depth });
    }
    for path in paths.iter_mut() {
        if path.depth == depth {
            path.addresses.push(addr);
            &#x2F;&#x2F; remember PathFinder started at the highest depth and ended at
            &#x2F;&#x2F; base with the lowest depth, so &amp;quot;going up&amp;quot; is &amp;quot;the way out&amp;quot;.
            path.depth += 1;
        }
    }
}

&#x2F;&#x2F; `second_addr` wasn&#x27;t pushed by `PathFinder::run` as it was the starting
&#x2F;&#x2F; point, so push it now.
for path in paths.iter_mut() {
    path.addresses.push(second_addr);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note how this process can form a tree. Any given depth can have any amount of children. For example, if the address finding yields the following addresses (where the hundreds&#x27; also represent the depth):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;400, 300, 450, 300, 200, 100
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then this represents the following call-stack tree:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;   100
    |
   200
    |
   300
   &#x2F; \
400   450

&#x2F;&#x2F; or

(100
    (200
        (300
            (400, 450))))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the many paths have been cleaned up into a separate vector each, we can turn these addresses into offsets:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;paths.into_iter().map(|path| {
    let mut offsets = path.addresses;
    for i in (1..offs.len()).rev() {
        let prev_addr = offs[i - 1];
        let ptr_value = pf.second_snap.read_memory(prev_addr, mem::size_of::&amp;lt;usize&amp;gt;()).unwrap();
        let ptr_value = usize::from_ne_bytes(ptr_value.try_into().unwrap());
        offs[i] -= ptr_value;
    }
    offsets
}).collect::&amp;lt;Vec&amp;lt;usize&amp;gt;&amp;gt;()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For the example above, the result would be:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;100, 100, 100, 100
100, 100, 100, 150
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to reach &lt;code&gt;address[i]&lt;&#x2F;code&gt;, we have to read the &lt;code&gt;ptr_value&lt;&#x2F;code&gt; from &lt;code&gt;address[i - 1]&lt;&#x2F;code&gt; and add a given &lt;code&gt;offset&lt;&#x2F;code&gt;. This &lt;code&gt;offset&lt;&#x2F;code&gt; is given by &lt;code&gt;address[i] - ptr_value&lt;&#x2F;code&gt;. By iterating the list of addresses in reverse, we can neatly turn them into offsets substracting this &lt;code&gt;ptr_value&lt;&#x2F;code&gt;. Now we&#x27;re done! We can persist this list of &lt;code&gt;offsets&lt;&#x2F;code&gt; and it will work at any point in the future to get back to our original &lt;code&gt;goal_addr&lt;&#x2F;code&gt;. In pseudo-code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;base = base addr
for offset in offsets[..-1] {
    base = *(base + offset)
}
goal_addr = base + offsets[-1]
value = *goal_addr
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;By the way, sometimes the scan will take horribly long and find thousands of path, and sometimes it will be blazingly fast. I don&#x27;t know why this is the case, but if that happens, you can try restarting the tutorial. And do not forget to run on &lt;code&gt;--release&lt;&#x2F;code&gt; mode, or you will definitely be waiting a long, long time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;doing-more-for-better-runtime-speed&quot;&gt;Doing more for better runtime speed&lt;&#x2F;h2&gt;
&lt;p&gt;The recursive &lt;code&gt;PathFinder&lt;&#x2F;code&gt; implements a fairly elegant solution. Unfortunately, this is hard to parallelize, as it all runs on the same thread and there is no clean way to introduce threads here&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#13&quot;&gt;13&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. We will rewrite this version to use a queue instead, with the idea that multiple threads will be taking work from it. In order to do this, let&#x27;s introduce two new concepts:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Clone)]
struct CandidateNode {
    parent: Option&amp;lt;usize&amp;gt;,
    addr: usize,
}

#[derive(Clone)]
struct FutureNode {
    node_idx: usize,
    first_addr: usize,
    second_addr: usize,
    depth: u8,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;CandidateNode&lt;&#x2F;code&gt; should be as small as possible, because there will be one of each for the addresses of each candidate pointer-value. Without doing anything fancy, we&#x27;ll need an optional &lt;code&gt;usize&lt;&#x2F;code&gt; to build a &amp;quot;linked list&amp;quot; of the path (since we can follow the parent chain), and the address of the pointer-value.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;FutureNode&lt;&#x2F;code&gt; will hold temporary values, until a thread picks it up and carries on, so there&#x27;s no need to over-optimize this. For a thread to continue, it needs to know the pointer-value address and its parent (that is, the candidate node it will work on), along with the first and second goal address for a given depth.&lt;&#x2F;p&gt;
&lt;p&gt;After the process completes (a base or static address is found), it&#x27;s enough to remember the candidate node, as we&#x27;ll later be able to follow the chain. Thus, the &lt;code&gt;PathFinder&lt;&#x2F;code&gt; needs to hold the following values:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;struct QueuePathFinder {
    first_snap: Snapshot,
    second_snap: Snapshot,
    &#x2F;&#x2F;&#x2F; Indices of `nodes_walked` which are &amp;quot;good&amp;quot; (i.e. have reached a base address).
    good_finds: Vec&amp;lt;usize&amp;gt;,
    &#x2F;&#x2F;&#x2F; Shared &amp;quot;tree&amp;quot; of nodes we&#x27;ve walked over, so all threads can access and reference them.
    nodes_walked: Vec&amp;lt;CandidateNode&amp;gt;,
    &#x2F;&#x2F;&#x2F; Nodes to be used in the future, where the `FutureNode::node_idx` references `Self::nodes_walked`.
    new_work: Vec&amp;lt;FutureNode&amp;gt;,
}

impl QueuePathFinder {
    pub fn run(&amp;amp;mut self, first_addr: usize, second_addr: usize, depth: u8) {
        self.add_work(None, first_addr, second_addr, depth);
        while self.step() {}
    }

    &#x2F;&#x2F; Returns false to signal there&#x27;s no more work.
    fn step(&amp;amp;mut self) -&amp;gt; bool {
        &#x2F;&#x2F; Instead of getting the `goal_addr` from input parameters, we get it through the queue.
        let future_node = if let Some(future_node) = self.new_work.pop() {
            future_node
        } else {
            return false;
        };

        &#x2F;&#x2F; The same scan as `PathFinder::run` is carried away, with 2 differences.
        let first_snap = std::mem::take(&amp;amp;mut self.first_snap);
        let second_snap = std::mem::take(&amp;amp;mut self.second_snap);
        for (sra, spv) in second_snap.iter_addr().filter(|(_sra, spv)| {
            if let Some(offset) = future_node.second_addr.checked_sub(*spv) {
                offset &amp;lt;= MAX_OFFSET
            } else {
                false
            }
        }) {
            if second_snap.is_base_addr(sra) {
                &#x2F;&#x2F; (1) rather than simply pushing the address (here, a `CandidateNode`),
                &#x2F;&#x2F; we also store its index (because the candidate nodes themselves don&#x27;t
                &#x2F;&#x2F; have any flag saying &amp;quot;I&#x27;m the bottommost one&amp;quot;).
                self.good_finds.push(self.nodes_walked.len());
                self.nodes_walked.push(CandidateNode {
                    parent: Some(future_node.node_idx),
                    addr: sra,
                });
                continue;
            }
            if future_node.depth == 0 {
                continue;
            }
            let offset = future_node.second_addr - spv;
            for (fra, _fpv) in first_snap
                .iter_addr()
                .filter(|(_fra, fpv)| fpv.wrapping_add(offset) == future_node.first_addr)
            {
                &#x2F;&#x2F; (2) rather than recursing, we add work to the queue.
                self.add_work(Some(future_node.node_idx), fra, sra, future_node.depth - 1);
            }
        }

        self.first_snap = first_snap;
        self.second_snap = second_snap;
        true
    }

    fn add_work(
        &amp;amp;mut self,
        parent: Option&amp;lt;usize&amp;gt;,
        first_addr: usize,
        second_addr: usize,
        depth: u8,
    ) {
        &#x2F;&#x2F; Adding work consists on registering the `CandidateNode` and adding a `FutureNode`.
        self.new_work.push(FutureNode {
            node_idx: self.nodes_walked.len(),
            first_addr,
            second_addr,
            depth,
        });
        self.nodes_walked.push(CandidateNode {
            parent,
            addr: second_addr,
        });
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This version probably uses more memory, as we need to remember all &lt;code&gt;CandidateNode&lt;&#x2F;code&gt; because any live &lt;code&gt;FutureNode&lt;&#x2F;code&gt; may be referencing them, and a &lt;code&gt;CandidateNode&lt;&#x2F;code&gt; itself has parents. It should be possible to prune them if it gets too large, although a lot of indices would need to be adjusted, so for now, we don&#x27;t worry about pruning that tree (which we store as a &lt;code&gt;Vec&lt;&#x2F;code&gt; and the references to the parent are indirect through the use of indices). However, this version can use threads much more easily. It&#x27;s enough to wrap all the &lt;code&gt;Vec&lt;&#x2F;code&gt; inside a &lt;code&gt;Mutex&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, this version has an even better advantage. It&#x27;s now trivial to perform the search breadth-first! With the recursive version, we were stuck performing a depth-first search, which is unfortunate, because the first valid paths which would be found would be the deepest. But now that we have our own work queue, if we keep it sorted by depth, we can easily switch to running breadth-first. Shorter paths feel better, because there&#x27;s less hops to go through, and less things that could go wrong:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Clone, PartialEq, Eq, PartialOrd, Ord)] &#x2F;&#x2F; &amp;lt;- now it&#x27;s comparable
struct FutureNode {
    depth: u8, &#x2F;&#x2F; &amp;lt;- this used to be last but we want to sort by depth first
    node_idx: usize,
    first_addr: usize,
    second_addr: usize,
}

struct QueuePathFinder {
    ...
    new_work: BinaryHeap&amp;lt;FutureNode&amp;gt;,
    &#x2F;&#x2F;        ^^^^^^^^^^ this used to be a Vec
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thanks to Rust&#x27;s wrong decision of making &lt;code&gt;BinaryHeap&lt;&#x2F;code&gt; be max-heaps&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#14&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, and our use of a decreasing depth as we get deeper, the ordering just works out! Next up, threads should be introduced for the next big-boost in runtime performance. This isn&#x27;t too tricky, but I would recommend you introduce &lt;code&gt;serde&lt;&#x2F;code&gt; by now and persist both &lt;code&gt;Snapshot&lt;&#x2F;code&gt; and &lt;code&gt;goal_addr&lt;&#x2F;code&gt; so that you can easily debug this. Running the program on Cheat Engine&#x27;s tutorial gets boring fast. I&#x27;ll leave both of these as an exercise to the reader. Just make sure the threads don&#x27;t end prematurely, because even if there is no work &lt;em&gt;now&lt;&#x2F;em&gt;, it doesn&#x27;t mean there won&#x27;t be a few milliseconds later. Else you will be back at single-threaded execution!&lt;&#x2F;p&gt;
&lt;p&gt;After adding threads, I kept poking around the program and seeing how seemingly-innocent changes made runtime performance a fair bit worse. Here&#x27;s some of the insights I got:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;filter&lt;&#x2F;code&gt; or not (by placing the inverted condition inside the loop with a &lt;code&gt;continue&lt;&#x2F;code&gt;) can both help or hurt performance.&lt;&#x2F;li&gt;
&lt;li&gt;Hoisting certain conditions, like &lt;code&gt;if depth == 0&lt;&#x2F;code&gt;, and duplicating the entire loop body rather than running it every time, can hurt performance.&lt;&#x2F;li&gt;
&lt;li&gt;The moments when you should wake up threads matters (if your approach works in a way where this matters).&lt;&#x2F;li&gt;
&lt;li&gt;Changing the order in which you compute certain values and then use them can matter.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Option&lt;&#x2F;code&gt; introduces a fair bit of overhead due to alignment concerns, and &lt;code&gt;CandidateNode&lt;&#x2F;code&gt; can easily be reduced from 24 bytes to 16 by using a special value for &amp;quot;no-parent&amp;quot;.&lt;&#x2F;li&gt;
&lt;li&gt;Atomics are neat, but a bit annoying to use. Crates like &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;crossbeam-utils&quot;&gt;&lt;code&gt;crossbeam-utils&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; make them easier to use while still not using locks if possible.&lt;&#x2F;li&gt;
&lt;li&gt;You can beat Rust&#x27;s functional-style iterators performance by writing your own custom iterator, but it isn&#x27;t trivial to do so.&lt;&#x2F;li&gt;
&lt;li&gt;Messing with larger (such as changing &lt;code&gt;depth&lt;&#x2F;code&gt; for &lt;code&gt;usize&lt;&#x2F;code&gt;) or smaller (such as changing &lt;code&gt;node_idx&lt;&#x2F;code&gt; for &lt;code&gt;u32&lt;&#x2F;code&gt;) types can hurt performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It turns out &lt;code&gt;step&lt;&#x2F;code&gt; isn&#x27;t called a lot while analyzing Cheat Engine&#x27;s tutorial, so it better be fast. And one way to go fast is to do less!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;doing-less-for-better-runtime-speed&quot;&gt;Doing less for better runtime speed&lt;&#x2F;h2&gt;
&lt;p&gt;For every future node, we have to read and compare an entire snapshot of the process&#x27; memory against a value. For 8MiB worth of memory, that&#x27;s over a million comparisons! Using threads can only scale as far as the amounnt of cores you have before degrading quickly. A lot of those comparisons won&#x27;t be useful at all, and if the method runs a hundred times, there can easily be 6MiB that you could avoid scanning at all, a hundred times.&lt;&#x2F;p&gt;
&lt;p&gt;What if, instead, we run some sort of &amp;quot;pre-scan&amp;quot; that tells us &amp;quot;don&#x27;t bother looking around here, you will not find anything useful&amp;quot;? We totally can, and the good news is, it does improve the runtime quite a bit!&lt;&#x2F;p&gt;
&lt;p&gt;In order to do this, we need another way of instructing the program where to look. We can do this by adding additional information to each block (either directly or indirectly) that tells us &amp;quot;which other blocks have pointer-values that point into us?&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;struct Block {
    ...,
    &#x2F;&#x2F; Indices of the blocks that have pointer-values which point inside self.
    pointed_from: Vec&amp;lt;usize&amp;gt;,
}

pub fn prepare_optimized_scan(snap: &amp;amp;mut Snapshot) {
    let mut block_idx_pointed_from = (0..snap.blocks.len())
        .map(|_| std::collections::HashSet::new())
        .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

    &#x2F;&#x2F; For each block...
    for (i, block) in snap.blocks.iter().enumerate() {
        &#x2F;&#x2F; ...scan all the pointer-values...
        for (ra, pv) in snap.iter_addr() {
            &#x2F;&#x2F; ...and if any of the pointer-values points inside this block...
            if let Some(delta) = pv.checked_sub(block.real_addr) {
                if delta &amp;lt; block.len {
                    &#x2F;&#x2F; ...then we know that the block with this pointer-value points to our original block.
                    block_idx_pointed_from[i].insert(snap.get_block_idx_from_addr(ra));
                }
            }
        }
    }

    &#x2F;&#x2F; Convert sets into sorted vectors and save them inside the blocks.
    block_idx_pointed_from
        .into_iter()
        .zip(snap.blocks.iter_mut())
        .for_each(|(set, block)| {
            block.pointed_from = set.into_iter().collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
            block.pointed_from.sort();
        });
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When running the scan (via &lt;code&gt;Snapshot::step&lt;&#x2F;code&gt;), instead of running &lt;code&gt;iter_addr&lt;&#x2F;code&gt; over &lt;em&gt;all&lt;&#x2F;em&gt; addresses, we determine the block where the current &lt;code&gt;goal_addr&lt;&#x2F;code&gt; falls in and scan only on the blocks indicated by &lt;code&gt;block.pointed_from&lt;&#x2F;code&gt;. I did some math, and on the tutorial step, rather than scanning 95 blocks, we scan an average of 3.145 blocks (median 2, standard deviation 6.12), which greatly reduces the amount of work that needs to be done on a snapshot which is roughly 10 MiB.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a chance that the block we&#x27;re scanning just so happens to be very &amp;quot;busy&amp;quot; and have a lot of blocks pointing into it (which would make sense, as that&#x27;s probably an indication that the interesting things occur there). However, it is definitely possible to improve on the heuristics, all with different trade-offs.&lt;&#x2F;p&gt;
&lt;p&gt;The simplest heuristic is &amp;quot;assume every block can point to any other block&amp;quot; (which we were doing before). A slightly better one is &amp;quot;determine which blocks have a chance of pointing into other blocks&amp;quot;. You could even narrow down the &amp;quot;scan area&amp;quot; within blocks to make them &amp;quot;smaller&amp;quot;, for example, by finding the bounding addresses of &amp;quot;interest&amp;quot; and trimming the block size. You could sort the blocks differently, perhaps prioritizing when a block points into itself, or add additional exit conditions. But this is plenty fast, even more so if you use threads for &lt;code&gt;prepare_optimized_scan&lt;&#x2F;code&gt; as well!&lt;&#x2F;p&gt;
&lt;p&gt;Another idea would be dropping some blocks entirely (although this is partially mitigated thanks to &lt;code&gt;Block::pointed_from&lt;&#x2F;code&gt;). If a base block (i.e. it starts where a module does) doesn&#x27;t belong to the program in question (for example, it belongs to a system DLL), we could drop it, and don&#x27;t even consider it in &lt;code&gt;prepare_optimized_scan&lt;&#x2F;code&gt;. This is probably what Cheat Engine is doing with &amp;quot;Include system modules&amp;quot;, although I haven&#x27;t experimented much with that option. The downside is, if it just so happens the offsets follow a path through that block, it won&#x27;t be found. But it shouldn&#x27;t be a big deal when plenty of paths are found.&lt;&#x2F;p&gt;
&lt;p&gt;In order to ignore system DLLs, it should be possible to find the module names and then where are they located (pretty much emulating the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;dlls&#x2F;dynamic-link-library-search-order&quot;&gt;Dynamic-Link Library Search Order&lt;&#x2F;a&gt;). If it falls within system directories, then we would ignore it.&lt;&#x2F;p&gt;
&lt;p&gt;If we want to reduce the search-space even more, we could specify a range of addresses. When any address falls outside this range, it is ignored. I believe Cheat Engine&#x27;s default 0000000000000000-7FFFFFFFFFFFFFFF range is pretty much &amp;quot;scan all of it&amp;quot;, as we&#x27;re doing, but with more knowledge of the program at hand, you could definitely narrow this down.&lt;&#x2F;p&gt;
&lt;p&gt;Because we&#x27;re not directly working with offsets (they are calculated after, and not before finding a candidate), I&#x27;m not sure how we could accurately implement Cheat Engine&#x27;s option for &amp;quot;maximum offsets per node&amp;quot;. Perhaps by building a temporary &lt;code&gt;HashSet&lt;&#x2F;code&gt;, sorting them in descending order, and only considering the first few smallest ones? More testing would be necessary to see if this is worthwhile. Beyond this last optimization, I can&#x27;t think of any other worthwhile implementing though. We should be getting pretty close to somewhere optimal.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, let&#x27;s finish this tutorial step, shall we?:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = offset_list
    .iter()
    .take(offset_list.len() - 1)
    .fold(0, |base, offset| {
        usize::from_ne_bytes(
            process
                .read_memory(base + offset, 8)
                .unwrap()
                .try_into()
                .unwrap(),
        )
    })
    + offset_list.last().unwrap();

&#x2F;&#x2F; Ta-dah!
process.write_memory(addr, 5000).unwrap();
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;And this my dear readers concludes my ambitions with the project! I think the program is pretty useful by now, even if it can only do a small fraction of what Cheat Engine can (I don&#x27;t think I&#x27;m ready to write a form designer GUI yet… wait why was this part of Cheat Engine again?). Despite the length of this entry, we didn&#x27;t even figure out how Cheat Engine&#x27;s pointer scanner works. Maybe it really is finding millions of possible paths, perhaps storing the offsets in some compact way. Let&#x27;s recap what we do have learnt:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;re experts in pointers by now! Seven layers of indirection? Easy peasy.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s a lot of configuration available for pointer scans: search depth, search breadth, search order, memory ranges, memory maps…&lt;&#x2F;li&gt;
&lt;li&gt;One way to turn exponential problems into something more approachable is either finding an algorithm without the exponential growth, or trimming the amount of work to be done by &lt;em&gt;a lot&lt;&#x2F;em&gt;. And sometimes the former alternative is impossible.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;code for this post&lt;&#x2F;a&gt; is available over at my GitHub. You can run &lt;code&gt;git checkout step8&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code. If you&#x27;re feeling up for a challenge, try to find a different, faster way (as in, less computationally-expensive) in which you can complete this tutorial step. Although ways to cut down the amount of work that needs to be done are definitely welcome, I&#x27;m looking for an entirely different approach, which can, for the most part, side-step the &amp;quot;there&#x27;s too much work&amp;quot; issue.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post, we&#x27;ll tackle the ninth step of the tutorial: Shared code. I&#x27;m hoping it won&#x27;t be too difficult, although there will be some learning that needs to be done. After that, I&#x27;ll probably conclude the series. Maybe there could be some bonus episode in the future, or some other form of progress update. Until next time!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I spent a good chunk of time figuring out how to get this effect on the text (and borrowing code from several sites), but I&#x27;m extremely satisfied with the result. You do need a &amp;quot;modern&amp;quot; browser to see what I mean, though. I also lost it after the fact and had to redo it. Oh well.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Actually, over a couple hundred are often found. But there&#x27;s a high chance most of them would work just fine.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;I&#x27;ve gone through a lot of iterations for this post, with a fair amount of messy code, so this time I&#x27;ll be explaining my thought process with new code rather than embedding what I&#x27;ve actually ended up writing.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Only if &lt;code&gt;base&lt;&#x2F;code&gt; starts off as an aligned address, of course. But I think memory regions must start at multiples of the page size, which is a (relatively) large power of two, so it&#x27;s safe to assume &lt;code&gt;base&lt;&#x2F;code&gt; is divisible by 8. You could throw in an &lt;code&gt;assert_eq!(base % 8, 0)&lt;&#x2F;code&gt; if you wanted to be extra sure.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Although, just like we assume &lt;code&gt;base&lt;&#x2F;code&gt; is a multiple of 8, the &lt;code&gt;RegionSize&lt;&#x2F;code&gt; probably is as well.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;We could &lt;code&gt;mem::transmute&lt;&#x2F;code&gt; from &lt;code&gt;*const u8&lt;&#x2F;code&gt; to &lt;code&gt;*const usize&lt;&#x2F;code&gt; and dereference, but then we need to be careful about alignment, and &lt;code&gt;from_ne_bytes&lt;&#x2F;code&gt; seems to be plenty fast already.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;Not that we actually care about debug builds, as they run several orders of magnitude slower. But still, &lt;code&gt;wrapping_sub&lt;&#x2F;code&gt; has the right semantics here.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;Most of the time pointers point to the beginning of some structure, not its end, so accessing this structure&#x27;s fields is done by adding, and not substracting, an offset from the pointer-value. For example:&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[repr(C)]
struct Vector {
    x: i32,
    y: i32,
}

let vec = Vector { x: 1, y: 1 };

let vec_ref = &amp;amp;vec;
let y_ref = &amp;amp;vec_ref.y;

let vec_ptr_val = vec_ref as *const _ as usize;
let y_ptr_val = y_ref as *const _ as usize;

assert_eq!(vec_ptr_val + 4, y_ptr_val);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;9&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;9&lt;&#x2F;sup&gt;
&lt;p&gt;Or the top-depth, however you want to see it. I personally prefer starting at the highest depth so that when zero is reached, we know we&#x27;re at the end.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;10&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;10&lt;&#x2F;sup&gt;
&lt;p&gt;Which really, I don&#x27;t think is worth it at all. If Cheat Engine is finding millions of &lt;em&gt;entire paths&lt;&#x2F;em&gt;, what kind of magic is it using to find cycles at any two depths???&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;11&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;11&lt;&#x2F;sup&gt;
&lt;p&gt;Yes, &lt;code&gt;Process::read_memory&lt;&#x2F;code&gt; could be changed to take in a buffer as input instead, so that it can be reused. Or it could even have an internal buffer. But we won&#x27;t be using this method much anyway.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;12&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;12&lt;&#x2F;sup&gt;
&lt;p&gt;I prefer starting on the second snapshot because it feels more &amp;quot;fresh&amp;quot;, as it&#x27;s the latest one, although it doesn&#x27;t really matter, because the path we&#x27;re looking for must be valid in both anyway.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;13&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;13&lt;&#x2F;sup&gt;
&lt;p&gt;Maybe the recursive &lt;code&gt;run&lt;&#x2F;code&gt; could run in a pool of threads?&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;14&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;14&lt;&#x2F;sup&gt;
&lt;p&gt;Most heaps tend to be min-heaps, and it&#x27;s not uncommon for the use of &lt;code&gt;BinaryHeap&lt;&#x2F;code&gt; in Rust to need &lt;code&gt;std::cmp::Reverse&lt;&#x2F;code&gt; in order to get &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;collections&#x2F;struct.BinaryHeap.html#min-heap&quot;&gt;min-heap behaviour&lt;&#x2F;a&gt;. There&#x27;s been some discussion on internals about this, such as &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;why-is-std-binaryheap-a-max-heap&#x2F;11498&quot;&gt;Why is std::collections::BinaryHeap a max-heap?&lt;&#x2F;a&gt; and more recently &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;specializing-binaryheap-to-maxheap-and-minheap&#x2F;15115&quot;&gt;Specializing BinaryHeap to MaxHeap and MinHeap&lt;&#x2F;a&gt; where @matklad laments:&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;blockquote&gt;
&lt;p&gt;I feel like our heap accumulated a bunch of problems (wrong default order, slow into-sorted, wrong into-iter, confusing naming, slow-perf due to being binary).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Code Injection</title>
		<published>2021-05-08T00:00:00+00:00</published>
		<updated>2021-05-08T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-7/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-7/</id>
		<content type="html">&lt;p&gt;This is part 7 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 7: Code Injection&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 6 we ended up spending most of the time in upgrading our breakpoint support to have a proper implementation, rather than using some hardcoded constants. We then made use of the new and improved breakpoint support to find what code accessed an specific memory address our very own debugger. To complete the tutorial, we read and understood the surrounding assembly around the code accessing our address and figured out what pointer to look for. In the end, we were left with a base address that we can rely on and follow to reach the target memory address, without having to scan for it every time.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we will take a look at the different techniques Cheat Engine uses to patch instructions with as many other instructions as we need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-injection&quot;&gt;Code Injection&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 7&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;Code injection is a technique where you inject a piece of code into the target process, and then reroute the execution of code to go through your own written code.&lt;&#x2F;p&gt;
&lt;p&gt;In this tutorial you&#x27;ll have a health value and a button that will decrease your health by 1 each time you click it. Your task is to use code injection to make the button increase your health by 2 each time it is clicked.&lt;&#x2F;p&gt;
&lt;p&gt;Start with finding the address and then find what writes to it. Then when you&#x27;ve found the code that decreases it browse to that address in the disassembler, and open the auto assembler window (ctrl+a). There click on template and then code injection, and give it the address that decreases health (if it isn&#x27;t already filled in correctly). That will generate a basic auto assembler injection framework you can use for your code.&lt;&#x2F;p&gt;
&lt;p&gt;Notice the alloc, that will allocate a block of memory for your code cave, in the past, in the pre windows 2000 systems, people had to find code caves in the memory (regions of memory unused by the game), but that&#x27;s luckily a thing of the past since windows 2000, and will these days cause errors when trying to be used, due to SP2 of XP and the NX bit of new CPU&#x27;s&lt;&#x2F;p&gt;
&lt;p&gt;Also notice the line &lt;code&gt;newmem:&lt;&#x2F;code&gt; and &lt;code&gt;originalcode:&lt;&#x2F;code&gt; and the text &amp;quot;Place your code here&amp;quot;. As you guessed it, write your code here that will increase the health with 2. An usefull assembler instruction in this case is the &amp;quot;ADD instruction&amp;quot;. Here are a few examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;ADD [00901234],9&amp;quot; to increase the address at 00901234 with 9&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;ADD [ESP+4],9&amp;quot; to increase the address pointed to by ESP+4 with 9&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this case, you&#x27;ll have to use the same thing between the brackets as the original code has that decreases your health&lt;&#x2F;p&gt;
&lt;p&gt;Notice: It is recommended to delete the line that decreases your health from the original code section, else you&#x27;ll have to increase your health with 3 (you increase with 3, the original code decreases with 1, so the end result is increase with 2), which might become confusing. But it&#x27;s all up to you and your programming.&lt;&#x2F;p&gt;
&lt;p&gt;Notice 2: In some games the original code can exist out of multiple instructions, and sometimes, not always, it might happen that a code at another place jumps into your jump instruction end will then cause unknown behavior. If that happens, you should usually look near that instruction and see the jumps and fix it, or perhaps even choose to use a different address to do the code injection from. As long as you&#x27;re able to figure out the address to change from inside your injected code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;injection-techniques&quot;&gt;Injection techniques&lt;&#x2F;h2&gt;
&lt;p&gt;The Instruction Set Architecture (ISA) a typical desktop computer is able to interpret uses a variable-length encoding for the instructions (do correct me if this is phrased incorrectly; it&#x27;s not my area of expertise). That means we can&#x27;t go and blindly replace a instruction with the code we need. We need to be careful, and still hope that no code dynamically jumps to this very specific location. Otherwise we may end up executing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;preames&#x2F;public-notes&#x2F;blob&#x2F;master&#x2F;unintended-instructions.rst&quot;&gt;Unintended Instructions&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The way Cheat Engine gets around this is by replacing the instruction with a jump. After the offending code is found, you can use a &amp;quot;template&amp;quot; that prompts &amp;quot;On what address do you want the jump?&amp;quot;. After accepting the &amp;quot;code inject template&amp;quot;, a window with the following code shows:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;alloc(newmem,2048,&amp;quot;Tutorial-x86_64.exe&amp;quot;+2D4F7)
label(returnhere)
label(originalcode)
label(exit)

newmem: &#x2F;&#x2F;this is allocated memory, you have read,write,execute access
&#x2F;&#x2F;place your code here

originalcode:
sub dword ptr [rsi+000007E0],01

exit:
jmp returnhere

&amp;quot;Tutorial-x86_64.exe&amp;quot;+2D4F7:
jmp newmem
nop 2
returnhere:
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It seems Cheat Engine has its own mini-language that extends assembly using Intel-syntax. It has &lt;code&gt;directive(arguments)&lt;&#x2F;code&gt; which do… well, stuff.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;alloc(label, size, address)&lt;&#x2F;code&gt; seems to allocate &lt;code&gt;size&lt;&#x2F;code&gt; bytes at some address and assign &lt;code&gt;label&lt;&#x2F;code&gt; to it. &lt;code&gt;address&lt;&#x2F;code&gt; is where the jump to the newly-allocated memory will be inserted.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;label(label)&lt;&#x2F;code&gt; seems to be used to define a label. Unlike your usual assembler, it appears we need to define the labels beforehand.&lt;&#x2F;p&gt;
&lt;p&gt;A label may also be an address directly, in this case, &lt;code&gt;&amp;quot;Tutorial-x86_64.exe&amp;quot;+2D4F7&lt;&#x2F;code&gt;. Cheat Engine will overwrite code from this address onwards.&lt;&#x2F;p&gt;
&lt;p&gt;Executing Cheat Engine&#x27;s assembler will greet you with the following message, provided everything went okay:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Information&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The code injection was successfull&lt;br &#x2F;&gt;
newmem=FFFF0000&lt;br &#x2F;&gt;
Go to FFFF0000?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;Yes&lt;&#x2F;kbd&gt; &lt;kbd&gt;No&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If we navigate to the address, we find the following:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;...
FFFEFFFE -                       - ??
FFFEFFFF -                       - ??
FFFF0000 - 83 AE E0070000 01     - sub dword ptr [rsi+000007E0],01
FFFF0007 - E9 F2D40300           - jmp Tutorial-x86_64.exe+2D4FE
FFFF000C - 00 00                 - add [rax],al
...
FFFF0FFF - 00 00                 - add [rax],al
...
FFFF1001 -                       - ??
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, before this address we don&#x27;t know what&#x27;s in there. At the address, our newly inserted code is present, and after the code, a lot of zero values (which happen to be interpreted as &lt;code&gt;add [rax], al&lt;&#x2F;code&gt;). After the allocated region (in our case, 2048 bytes), more unknown memory follows.&lt;&#x2F;p&gt;
&lt;p&gt;The old code was replaced with the jump:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Tutorial-x86_64.exe+2D4F7 - E9 042BFCFF           - jmp FFFF0000
Tutorial-x86_64.exe+2D4FC - 66 90                 - nop 2
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note how the &lt;code&gt;sub&lt;&#x2F;code&gt; instruction (&lt;code&gt;83 AE E0070000 01&lt;&#x2F;code&gt;, 7 bytes) was replaced with both a &lt;code&gt;jmp&lt;&#x2F;code&gt; (&lt;code&gt;E9 042BFCFF&lt;&#x2F;code&gt;, 5 bytes) and a &lt;code&gt;nop&lt;&#x2F;code&gt; (&lt;code&gt;66 90&lt;&#x2F;code&gt;, 2 bytes), both occupying 7 bytes. Because the size was respected, any old jumps will still fall in the same locations. But we were lucky to be working with 7 whole bytes to ourselves. What happens if we try to do the same on, say, a &lt;code&gt;nop&lt;&#x2F;code&gt; which is only 1 byte long?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;alloc(newmem,2048,&amp;quot;Tutorial-x86_64.exe&amp;quot;+2D4F0)
newmem:
nop
mov ebx,[rsi+000007E0]
jmp returnhere

&amp;quot;Tutorial-x86_64.exe&amp;quot;+2D4F0:
jmp newmem
nop 2
returnhere:
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interesting! A single byte is obviously not enough, so Cheat Engine goes ahead and replaces &lt;em&gt;two&lt;&#x2F;em&gt; instructions with the jump, even though we only intended to replace one. Note the old code at &lt;code&gt;newmem&lt;&#x2F;code&gt;, it contains the &lt;code&gt;nop&lt;&#x2F;code&gt; and the next instruction (this was just before the code we are meant to replace, so I picked it as the example).&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine is obviously careful to both pick as many instructions as it needs to fit a &lt;code&gt;jmp&lt;&#x2F;code&gt;, and the template pads the &lt;code&gt;jmp&lt;&#x2F;code&gt; with as many &lt;code&gt;nop&lt;&#x2F;code&gt; bytes as it needs to respect the old size.&lt;&#x2F;p&gt;
&lt;p&gt;If you attempt to assemble a longer instruction to replace a smaller one inline (as opposed to use the assembler with templates), Cheat Engine will warn you:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Confirmation&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The generated code is 6 byte(s) long, but the selected opcode is 1 byte(s) long! Do you want to replace the incomplete opcode(s) with NOP&#x27;s?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;Yes&lt;&#x2F;kbd&gt; &lt;kbd&gt;No&lt;&#x2F;kbd&gt; &lt;kbd&gt;Cancel&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Selecting &amp;quot;No&amp;quot; will leave the incomplete bytes as they were before (in the case you replace a long instruction with a short one), which is very likely to leave garbage instructions behind and mess up with even more instructions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;allocating-remote-memory&quot;&gt;Allocating remote memory&lt;&#x2F;h2&gt;
&lt;p&gt;When we initialize a new &lt;code&gt;Vec&lt;&#x2F;code&gt; via &lt;code&gt;Vec::with_capacity(2048)&lt;&#x2F;code&gt;, Rust will allocate enough space for 2048 items in a memory region that will belong to us. But we need this memory to belong to a different process, so that the remote process is the one with full Read, Write and eXecute access.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s quite a few ways to allocate memory: &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winbase&#x2F;nf-winbase-globalalloc&quot;&gt;&lt;code&gt;GlobalAlloc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;WinBase&#x2F;nf-winbase-localalloc&quot;&gt;&lt;code&gt;LocalAlloc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;HeapApi&#x2F;nf-heapapi-heapalloc&quot;&gt;&lt;code&gt;HeapAlloc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-virtualalloc&quot;&gt;&lt;code&gt;VirtualAlloc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;… just to name a few! A process may even embed its own allocator which works on top of any of these. Each of these functions has its own purpose, with different tradeoffs, but the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;memory&#x2F;comparing-memory-allocation-methods&quot;&gt;comparison on allocation methods&lt;&#x2F;a&gt; notes:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting with 32-bit Windows, &lt;code&gt;GlobalAlloc&lt;&#x2F;code&gt; and &lt;code&gt;LocalAlloc&lt;&#x2F;code&gt; are implemented as wrapper functions that call &lt;code&gt;HeapAlloc&lt;&#x2F;code&gt; using a handle to the process&#x27;s default heap.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Cool! That&#x27;s two down. &lt;code&gt;CoTaskMemAlloc&lt;&#x2F;code&gt; seems to be useful in COM-based applications, which we don&#x27;t care about, and &lt;code&gt;VirtualAlloc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] allows you to specify additional options for memory allocation. However, its allocations use a page granularity, so using &lt;code&gt;VirtualAlloc&lt;&#x2F;code&gt; can result in higher memory usage.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;…which we don&#x27;t care about, either. Since &lt;code&gt;HeapAlloc&lt;&#x2F;code&gt; requires &amp;quot;A handle to the heap from which the memory will be allocated&amp;quot;, and as far as I can tell, there is no easy way to do this for a different process, we&#x27;ll turn our attention back to &lt;code&gt;VirtualAlloc&lt;&#x2F;code&gt;. The &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-virtualalloc&quot;&gt;documentation&lt;&#x2F;a&gt; reads:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To allocate memory in the address space of another process, use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-virtualallocex&quot;&gt;&lt;code&gt;VirtualAllocEx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There&#x27;s our function! But before we can use it, we should figure out how the memory allocated by Cheat Engine looks like. I&#x27;ll be using this code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let before = process.memory_regions();
std::thread::sleep(std::time::Duration::from_secs(10));
let after = process.memory_regions();

before.iter().for_each(|pre| {
    if let Some(post) = after.iter().find(|post| post.BaseAddress == pre.BaseAddress) {
        if post.RegionSize != pre.RegionSize {
            println!(&amp;quot;region {:?} size changed: {:x} -&amp;gt; {:x}&amp;quot;, pre.BaseAddress, pre.RegionSize, post.RegionSize);
        }
        if post.Protect != pre.Protect {
            println!(&amp;quot;region {:?} prot changed: {:x} -&amp;gt; {:x}&amp;quot;, pre.BaseAddress, pre.Protect, post.Protect);
        }
    } else {
        println!(&amp;quot;region {:?} lost&amp;quot;, pre.BaseAddress);
    }
});

after.iter().for_each(|post| {
    if !before.iter().any(|pre| pre.BaseAddress == post.BaseAddress) {
        println!(&amp;quot;region {:?} came to life (size {:x}, prot {:x})&amp;quot;, post.BaseAddress, post.RegionSize, post.Protect);
    }
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The results:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;region 0x7ffe3000 size changed: 8001d000 -&amp;gt; 8000d000
region 0xffff0000 came to life (size 1000, prot 40)
region 0xffff1000 came to life (size f000, prot 1)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So far, so good. This matches the address Cheat Engine was telling us about. It appears region 0x7ffe3000 was split to accomodate for region 0xffff0000, and the remaining had to become region 0xffff1000. The protection level for the region we care about is 40, which, according to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;memory&#x2F;memory-protection-constants&quot;&gt;documentation&lt;&#x2F;a&gt; is &lt;code&gt;PAGE_EXECUTE_READWRITE&lt;&#x2F;code&gt;. It &amp;quot;Enables execute, read-only, or read&#x2F;write access to the committed region of pages&amp;quot;. Let&#x27;s implement that in &lt;code&gt;Process&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn alloc(&amp;amp;self, addr: usize, size: usize) -&amp;gt; io::Result&amp;lt;usize&amp;gt; {
    let res = unsafe {
        winapi::um::memoryapi::VirtualAllocEx(
            self.handle.as_ptr(),
            addr as _,
            size,
            winnt::MEM_COMMIT | winnt::MEM_RESERVE,
            winnt::PAGE_EXECUTE_READWRITE,
        )
    };
    if res == ptr::null_mut() {
        Err(io::Error::last_os_error())
    } else {
        Ok(res as _)
    }
}

pub fn dealloc(&amp;amp;self, addr: usize) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
    if unsafe {
        winapi::um::memoryapi::VirtualFreeEx(
            self.handle.as_ptr(),
            addr as _,
            0,
            winnt::MEM_RELEASE,
        )
    } == FALSE
    {
        Err(io::Error::last_os_error())
    } else {
        Ok(())
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;VirtualAllocEx&lt;&#x2F;code&gt; will also zero-initialize the remote memory, although we don&#x27;t care much about that. To us, all the memory is initialized, because we work through &lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt; which is the one responsible for filling our buffers. The only fun remark is that we also saw zero-bytes when we did the process with Cheat Engine, and not random garbage, so that may be an indicator that we&#x27;re on the right track.&lt;&#x2F;p&gt;
&lt;p&gt;We also provide &lt;code&gt;dealloc&lt;&#x2F;code&gt;, so that the user can free memory if they want to. Otherwise, they&#x27;re causing a memory leak in a remote process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-the-right-spot&quot;&gt;Finding the right spot&lt;&#x2F;h2&gt;
&lt;p&gt;Before we go and allocate memory, we need to determine &lt;em&gt;where&lt;&#x2F;em&gt; it should be allocated. Remember the &lt;code&gt;jmp&lt;&#x2F;code&gt; instruction Cheat Engine added?:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Tutorial-x86_64.exe+2D4F7 - E9 042BFCFF           - jmp FFFF0000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s 5 bytes long, and the &amp;quot;address&amp;quot; is 4 bytes long. However, memory addresses are 8 bytes long! And also, the argument (&lt;code&gt;042BFCFF&lt;&#x2F;code&gt;) to the jump (&lt;code&gt;E9&lt;&#x2F;code&gt;) is backwards. Our machines are little endian, so the actual value is &lt;code&gt;FFFC2B04&lt;&#x2F;code&gt; instead. I wonder what happens if…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hex(0xFFFC2B04 + 0x2D4F7 + 5)
&#x27;0xffff0000&#x27;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aha! So the argument to the jump location is actually encoded &lt;em&gt;relative&lt;&#x2F;em&gt; to the current instruction pointer &lt;em&gt;after&lt;&#x2F;em&gt; reading the instruction (that&#x27;s the plus five). In this case, all we need to do is find a memory region which is not yet reserved and is close enough to the offending instruction, so that we can make sure the relative offset will fit in 4 bytes:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let regions = process
    .memory_regions()
    .into_iter()
    .filter(|p| (p.State &amp;amp; winnt::MEM_FREE) != 0)
    .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

println!(&amp;quot;{} regions free&amp;quot;, regions.len());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;68 regions free
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sure enough, there&#x27;s still free regions available to us. Because &lt;code&gt;memory_regions&lt;&#x2F;code&gt; is sorted by &lt;code&gt;BaseAddress&lt;&#x2F;code&gt;, we can look for the first free region after the address we want to patch:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let region = process
    .memory_regions()
    .into_iter()
    .find(|p| (p.State &amp;amp; winnt::MEM_FREE) != 0 &amp;amp;&amp;amp; p.BaseAddress as usize &amp;gt; addr)
    .unwrap();

println!(&amp;quot;Found free region at {:?}&amp;quot;, region.BaseAddress);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Do you want to simply inject NOPs replacing the old code at 10002d4fe (y&#x2F;n)?: n
Found free region at 0x100321000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There we go! 0x2f3b02 bytes away of 0x10002d4fe, we have a free memory region at 0x100321000 where we can allocate memory to. Alas, trying to allocate memory here fails:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;Os { code: 487, kind: Other, message: &amp;quot;Attempt to access invalid address.&amp;quot; }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, to be fair, that&#x27;s not the region Cheat Engine is finding. Here&#x27;s what the memory looks like around the region Cheat Engine does use &lt;em&gt;before&lt;&#x2F;em&gt; injecting the code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Region:
    BaseAddress: 0x7ffe6000
    AllocationBase: 0x0
    AllocationProtect: 0
    RegionSize: 8001a000
    State: 10000
    Protect: 1
    Type: 0
Region:
    BaseAddress: 0x100000000
    AllocationBase: 0x100000000
    AllocationProtect: 80
    RegionSize: 1000
    State: 1000
    Protect: 2
    Type: 1000000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And here is the after:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Region:
    BaseAddress: 0x7ffe6000
    AllocationBase: 0x0
    AllocationProtect: 0
    RegionSize: 8000a000
    State: 10000
    Protect: 1
    Type: 0
Region:
    BaseAddress: 0xffff0000
    AllocationBase: 0xffff0000
    AllocationProtect: 40
    RegionSize: 1000
    State: 1000
    Protect: 40
    Type: 20000
Region:
    BaseAddress: 0xffff1000
    AllocationBase: 0x0
    AllocationProtect: 0
    RegionSize: f000
    State: 10000
    Protect: 1
    Type: 0
Region:
    BaseAddress: 0x100000000
    AllocationBase: 0x100000000
    AllocationProtect: 80
    RegionSize: 1000
    State: 1000
    Protect: 2
    Type: 1000000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the region it picked was 0x7ffe_6000, not 0x1_0000_0000. The offending instruction is at 0x1_0002_d4fe. So the jumps can go backwards just fine. But this doesn&#x27;t really explain why the allocation at 0x1_0032_1000 failed, because it has the same state (&lt;code&gt;MEM_FREE&lt;&#x2F;code&gt;) and protection level (&lt;code&gt;PAGE_NOACCESS&lt;&#x2F;code&gt;) as the page at 0x7ffe_6000. I can&#x27;t really explain why this is the case, but I can change the code to pick a free memory region before and not after the offending instruction:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let region = process
    .memory_regions()
    .into_iter()
    .rev() &#x2F;&#x2F; &amp;lt;- new                                               flipped v
    .find(|p| (p.State &amp;amp; winnt::MEM_FREE) != 0 &amp;amp;&amp;amp; (p.BaseAddress as usize) &amp;lt; addr)
    .unwrap();
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Found free region at 0x7ffe6000
thread &#x27;main&#x27; panicked at &#x27;called `Result::unwrap()` on an `Err` value: Os { code: 487, kind: Other, message: &amp;quot;Attempt to access invalid address.&amp;quot; }&#x27;, src\main.rs:151:74
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perhaps the two regions aren&#x27;t so different after all? At least we&#x27;re picking the same region as Cheat Engine now. But why is the allocation failing? I&#x27;ll be honest, I have no idea. We do have the required &lt;code&gt;PROCESS_VM_OPERATION&lt;&#x2F;code&gt; permission. I do not think the error is caused by enclaves (and I don&#x27;t even know what those are):&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the address in within an enclave that you initialized, then the allocation operation fails with the &lt;code&gt;ERROR_INVALID_ADDRESS&lt;&#x2F;code&gt; error.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It also does not seem to be an issue with reserve and commit:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Attempting to commit a specific address range by specifying &lt;code&gt;MEM_COMMIT&lt;&#x2F;code&gt; without &lt;code&gt;MEM_RESERVE&lt;&#x2F;code&gt; and a non-&lt;code&gt;NULL&lt;&#x2F;code&gt; &lt;code&gt;lpAddress&lt;&#x2F;code&gt; fails unless the entire range has already been reserved. The resulting error code is &lt;code&gt;ERROR_INVALID_ADDRESS&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We are using both &lt;code&gt;MEM_COMMIT&lt;&#x2F;code&gt; and &lt;code&gt;MEM_RESERVE&lt;&#x2F;code&gt;, and our &lt;code&gt;lpAddress&lt;&#x2F;code&gt; is not null.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try reserving a memory region, but this time, from the end of the region (instead of from the beginning):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = (region.BaseAddress as usize + region.RegionSize) - 2048;
match process.alloc(addr, 2048) {
    Ok(addr) =&amp;gt; {
        println!(&amp;quot;Bingo: {:x}&amp;quot;, addr);
        process.dealloc(addr);
    }
    Err(_) =&amp;gt; {
        println!(&amp;quot;Nope&amp;quot;);
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Bingo: ffff0000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hey, that&#x27;s… the same value Cheat Engine writes to! At the very last&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, we can allocate memory where we can inject our assembled code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-injection-1&quot;&gt;Code injection&lt;&#x2F;h2&gt;
&lt;p&gt;Now, we could go as far as getting our hands on some assembler, such as &lt;a href=&quot;https:&#x2F;&#x2F;nasm.us&#x2F;index.php&quot;&gt;NASM&lt;&#x2F;a&gt;, and invoke it on the input the user wishes to replace. Then we could read the output bytes of the assembled file, and write it to the desired memory location. However… that&#x27;s just a lot of tedious work that won&#x27;t teach us much (the Rust documentation already does an excellent job at teaching us how to work with files and invoke an external process). So I am going to cheat and hardcode the right bytes to complete this step of the tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s what Cheat Engine says the area we&#x27;re going to patch with the jump looks like:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Tutorial-x86_64.exe+2D4F0 - 90                    - nop
Tutorial-x86_64.exe+2D4F1 - 8B 9E E0070000        - mov ebx,[rsi+000007E0]
Tutorial-x86_64.exe+2D4F7 - 83 AE E0070000 01     - sub dword ptr [rsi+000007E0],01
Tutorial-x86_64.exe+2D4FE - 48 8D 4D F8           - lea rcx,[rbp-08]
Tutorial-x86_64.exe+2D502 - E8 19B9FDFF           - call Tutorial-x86_64.exe+8E20
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s the after:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Tutorial-x86_64.exe+2D4F0 - 90                    - nop
Tutorial-x86_64.exe+2D4F1 - 8B 9E E0070000        - mov ebx,[rsi+000007E0]
Tutorial-x86_64.exe+2D4F7 - E9 042BFCFF           - jmp FFFF0000
Tutorial-x86_64.exe+2D4FC - 66 90                 - nop 2
Tutorial-x86_64.exe+2D4FE - 48 8D 4D F8           - lea rcx,[rbp-08]
Tutorial-x86_64.exe+2D502 - E8 19B9FDFF           - call Tutorial-x86_64.exe+8E20
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;FFFF0000 - 83 86 E0070000 02     - add dword ptr [rsi+000007E0],02
FFFF0007 - E9 F2D40300           - jmp Tutorial-x86_64.exe+2D4FE
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s finish up this tutorial step. Don&#x27;t worry though, the addresses will still be correctly calculated. It&#x27;s just the opcodes for the ADD instruction and NOP, mostly:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let region = process
    .memory_regions()
    .into_iter()
    .rev()
    .find(|p| (p.State &amp;amp; winnt::MEM_FREE) != 0 &amp;amp;&amp;amp; (p.BaseAddress as usize) &amp;lt; addr)
    .unwrap();

let target_addr = process.alloc(region.BaseAddress as usize + region.RegionSize - 2048, 2048).unwrap();

&#x2F;&#x2F; The relative JMP itself are 5 bytes, the last 2 are NOP (hence the -2 in delta calculation).
&#x2F;&#x2F; Relative jumps add to the instruction pointer when it *ends* executing the instruction (like JMP).
&#x2F;&#x2F;   jmp target_addr
&#x2F;&#x2F;   nop 2
let mut jmp = [0xE9, 0, 0, 0, 0, 0x66, 0x90];
jmp[1..5].copy_from_slice(&amp;amp;((target_addr as isize - (addr - 2) as isize) as i32).to_le_bytes());
process.write_memory(addr - jmp.len(), &amp;amp;jmp).unwrap();

&#x2F;&#x2F; addr is already where the old instruction ended, no need to re-skip our previously written jump.
&#x2F;&#x2F; By the end of the execution of this jump, the instruction pointer will be at (base + code len).
&#x2F;&#x2F;   add dword ptr [rsi+000007E0], 2
&#x2F;&#x2F;   jmp addr
let mut injection = [0x83, 0x86, 0xE0, 0x07, 0x00, 0x00, 0x02, 0xE9, 0, 0, 0, 0];
let inj_len = injection.len();
injection[8..12].copy_from_slice(&amp;amp;((addr as isize - (target_addr + inj_len) as isize) as i32).to_le_bytes());
process.write_memory(target_addr, &amp;amp;injection).unwrap();

println!(&amp;quot;Replaced the SUB 1 at {:x} with ADD 2 at {:x} successfully!&amp;quot;, addr, target_addr);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So there we have it! The code calculates the correct relative address to jump to, depending on wherever the breakpoint was hit and wherever we ended up allocating memory. It also places in the ADD instruction, and this is enough to complete this tutorial step!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-code-injection-techniques&quot;&gt;Other code injection techniques&lt;&#x2F;h2&gt;
&lt;p&gt;We have seen one way to inject more than enough code for most needs (just allocate as much as you need!), through the use of watchpoints to figure out where the offending code we want to patch is. But this is not the only way!&lt;&#x2F;p&gt;
&lt;p&gt;There are things known as &amp;quot;Windows hooks&amp;quot; which allow us to inject entire DLLs (Dynamic Loaded Libraries). We could also try mapping an existing program into the address space of the victim thread. Or we could create a remote thread which loads the library. Here&#x27;s the more detailed &lt;a href=&quot;https:&#x2F;&#x2F;www.codeproject.com&#x2F;Articles&#x2F;4610&#x2F;Three-Ways-to-Inject-Your-Code-into-Another-Proces&quot;&gt;Three Ways to Inject Your Code into Another Process&lt;&#x2F;a&gt; article.&lt;&#x2F;p&gt;
&lt;p&gt;When writing this post, I discovered other things, such as &lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&#x2F;?t=ffcm&amp;amp;q=SE_DEBUG_NAME&amp;amp;ia=web&quot;&gt;what the &lt;code&gt;SE_DEBUG_NAME&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; was and if I needed it, &lt;a href=&quot;https:&#x2F;&#x2F;forum.exetools.com&#x2F;showthread.php?t=8963&quot;&gt;why &lt;code&gt;VirtualAlloc&lt;&#x2F;code&gt; was failing&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;21683133&#x2F;&quot;&gt;why could it be failing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;social.msdn.microsoft.com&#x2F;Forums&#x2F;en-US&#x2F;4ccf4dd8-eb43-4f5e-8860-c588d6a4f880&#x2F;virtualallocex-memreserve-pagereadwrite-has-failed-with-system-error-code-487&quot;&gt;what the error code meant&lt;&#x2F;a&gt;, among a couple other things. So there is definitely a lot to learn about this topic&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;This post was a bit bittersweet for me! One takeaway definitely is the need to be a bit more creative when it comes down to studying how a different program works, but after all, if Cheat Engine can do it, so can we. There are still some unknowns left, and some shortcuts which we could&#x27;ve avoided, but regardless, we&#x27;ve seen how we can make it work. Making it ergonomic or more customizable comes later. Really, sometimes you just need to &lt;a href=&quot;https:&#x2F;&#x2F;jacobian.org&#x2F;2021&#x2F;apr&#x2F;7&#x2F;embrace-the-grind&#x2F;&quot;&gt;embrace the grind&lt;&#x2F;a&gt; and get a first working version out. Don&#x27;t obsess with making it perfect or cleaner at first, it&#x27;s such a waste of time (if you &lt;em&gt;are&lt;&#x2F;em&gt; going to clean it up in the end, plan ahead, estimate how long it would take, and put aside your changes until the cleaning is done).&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;code for this post&lt;&#x2F;a&gt; is available over at my GitHub. You can run &lt;code&gt;git checkout step7&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code. Again, only the code necessary to complete the step is included at the &lt;code&gt;step7&lt;&#x2F;code&gt; tag.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post, we&#x27;ll tackle the eighth step of the tutorial: Multilevel pointers. This step is what actually got me inspired into starting this entire series, which is why you may have felt this entry a bit more rushed. It is fairly more complicated than &lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;part 6&lt;&#x2F;a&gt; with a single pointer, because there&#x27;s some ingenious work that needs to be done in order to efficiently, and automatically, solve it. I didn&#x27;t manage to figure it out before starting the series, but maybe we&#x27;re prepared now?&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;next post&lt;&#x2F;a&gt; will also be the second-to-last entry in this series (the last step looks pretty tough as well!). After that, there are bonus levels of an actual graphical game, but as far as I can tell, it&#x27;s there to gain a bit more experience with something more &amp;quot;serious&amp;quot;, which I will probably leave as an exercise to the reader.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;That &amp;quot;little&amp;quot; hiccup of me trying to figure out how Cheat Engine was finding that precise working location is what put an end to my one-blog-per-week streak. Ah well, sometimes taking a break from something and coming back to it later on just makes the problem obvious (or in this case, a new simple idea which happened to work).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;I&#x27;m still not sure why we could not allocate near the first bytes of the free region, but we could do so just fine near the end.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Pointers</title>
		<published>2021-03-13T00:00:00+00:00</published>
		<updated>2021-03-13T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-6/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-6/</id>
		<content type="html">&lt;p&gt;This is part 6 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 6: Pointers&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 5 we wrote our very own debugger. We learnt that Cheat Engine is using hardware breakpoints to watch memory change, and how to do the same ourselves. We also learnt that hardware points are not the only way to achieve the effect of watchpoints, although they certainly are the fastest and cleanest approach.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we will be reusing some of that knowledge to find out a closely related value, the &lt;em&gt;pointer&lt;&#x2F;em&gt; that points to the real value&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. As a quick reminder, a pointer is nothing but an &lt;code&gt;usize&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; representing the address of another portion of memory, in this case, the actual value we will be scanning for. A pointer is a value that, well, points elsewhere. In Rust we normally use reference instead, which are safer (typed and their lifetime is tracked) than pointers, but in the end we can achieve the same with both.&lt;&#x2F;p&gt;
&lt;p&gt;Why care about pointers? It turns out that things, such as your current health in-game, are very unlikely to end up in the same memory position when you restart the game (or even change to another level, or even during gameplay). So, if you perform a scan and find that the address where your health is stored is &lt;code&gt;0x73AABABE&lt;&#x2F;code&gt;, you might be tempted to save it and reuse it next time you launch the game. Now you don&#x27;t need to scan for it again! Alas, as soon as you restart the game, the health is now stored at &lt;code&gt;0x5AADBEEF&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Not all hope is lost! The game must &lt;em&gt;somehow&lt;&#x2F;em&gt; have a way to reliably find this value, and the way it&#x27;s done is with pointers. There will always be some base address that holds a pointer, and the game code knows where to find this pointer. If we are also able to find the pointer at said base address, and follow it ourselves (&amp;quot;dereferencing&amp;quot; it), we can perform the same steps the game is doing, and reliably find the health no matter how much we restart the game&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pointers&quot;&gt;Pointers&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 6&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;In the previous step I explained how to use the Code finder to handle changing locations. But that method alone makes it difficult to find the address to set the values you want. That&#x27;s why there are pointers:&lt;&#x2F;p&gt;
&lt;p&gt;At the bottom you&#x27;ll find 2 buttons. One will change the value, and the other changes the value AND the location of the value. For this step you don&#x27;t really need to know assembler, but it helps a lot if you do.&lt;&#x2F;p&gt;
&lt;p&gt;First find the address of the value. When you&#x27;ve found it use the function to find out what accesses this address.&lt;&#x2F;p&gt;
&lt;p&gt;Change the value again, and a item will show in the list. Double click that item. (or select and click on more info) and a new window will open with detailed information on what happened when the instruction ran.&lt;&#x2F;p&gt;
&lt;p&gt;If the assembler instruction doesn&#x27;t have anything between a &#x27;[&#x27; and &#x27;]&#x27; then use another item in the list. If it does it will say what it think will be the value of the pointer you need.&lt;&#x2F;p&gt;
&lt;p&gt;Go back to the main cheat engine window (you can keep this extra info window open if you want, but if you close it, remember what is between the [ and ]) and do a 4 byte scan in hexadecimal for the value the extra info told you. When done scanning it may return 1 or a few hundred addresses. Most of the time the address you need will be the smallest one. Now click on manually add and select the pointer checkbox.&lt;&#x2F;p&gt;
&lt;p&gt;The window will change and allow you to type in the address of a pointer and a offset. Fill in as address the address you just found. If the assembler instruction has a calculation (e.g: [esi+12]) at the end then type the value in that&#x27;s at the end. else leave it 0. If it was a more complicated instruction look at the calculation.&lt;&#x2F;p&gt;
&lt;p&gt;Example of a more complicated instruction:&lt;&#x2F;p&gt;
&lt;p&gt;[EAX*2+EDX+00000310] eax=4C and edx=00801234.&lt;&#x2F;p&gt;
&lt;p&gt;In this case EDX would be the value the pointer has, and EAX*2+00000310 the offset, so the offset you&#x27;d fill in would be 2*4C+00000310=3A8.  (this is all in hex, use calc.exe from windows in scientific mode to calculate).&lt;&#x2F;p&gt;
&lt;p&gt;Back to the tutorial, click OK and the address will be added, If all went right the address will show P-&amp;gt;xxxxxxx, with xxxxxxx being the address of the value you found. If thats not right, you&#x27;ve done something wrong. Now, change the value using the pointer you added in 5000 and freeze it. Then click Change pointer, and if all went right the next button will become visible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;extra&lt;&#x2F;em&gt;: And you could also use the pointer scanner to find the pointer to this address.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;on-access-watchpoints&quot;&gt;On-access watchpoints&lt;&#x2F;h2&gt;
&lt;p&gt;Last time we managed to learn how hardware breakpoints were being set by observing Cheat Engine&#x27;s behaviour. I think it&#x27;s now time to handle this properly instead. We&#x27;ll check out the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;CPU_Registers_x86#Debug_Registers&quot;&gt;CPU Registers x86 page on OSDev&lt;&#x2F;a&gt; to learn about it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DR0, DR1, DR2 and DR3 can hold a memory address each. This address will be used by the breakpoint.&lt;&#x2F;li&gt;
&lt;li&gt;DR4 is actually an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X86_debug_register&quot;&gt;obsolete synonym&lt;&#x2F;a&gt; for DR6.&lt;&#x2F;li&gt;
&lt;li&gt;DR5 is another obsolete synonym, this time for DR7.&lt;&#x2F;li&gt;
&lt;li&gt;DR6 is debug status. The four lowest bits indicate which breakpoint was hit, and the four highest bits contain additional information. We should make sure to clear this ourselves when a breakpoint is hit.&lt;&#x2F;li&gt;
&lt;li&gt;DR7 is debug control, which we need to study more carefully.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each debug register DR0 through DR3 has two corresponding bits in DR7, starting from the lowest-order bit, to indicate whether the corresponding register is a &lt;strong&gt;L&lt;&#x2F;strong&gt;ocal or &lt;strong&gt;G&lt;&#x2F;strong&gt;lobal breakpoint. So it looks like this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;  Meaning: [ .. .. | G3 | L3 | G2 | L2 | G1 | L1 | G0 | L0 ]
Bit-index:   31-08 | 07 | 06 | 05 | 04 | 03 | 02 | 01 | 00
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cheat Engine was using local breakpoints, because the zeroth bit was set. Probably because we don&#x27;t want these breakpoints to infect other programs! Because we were using only one breakpoint, only the lowermost bit was being set. The local 1st, 2nd and 3rd bits were unset.&lt;&#x2F;p&gt;
&lt;p&gt;Now, each debug register DR0 through DR4 has four additional bits in DR7, two for the &lt;strong&gt;C&lt;&#x2F;strong&gt;ondition and another two for the &lt;strong&gt;S&lt;&#x2F;strong&gt;ize:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;  Meaning: [   S3  |   C3  |   S2  |   C2  |   S1  |   C1  |   S0  |   C0  | .. .. ]
Bit-index:   31 30 | 29 28 | 27 26 | 25 24 | 23 22 | 21 20 | 19 18 | 17 16 | 15-00
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The two bits of the condition mean the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00&lt;&#x2F;code&gt; execution breakpoint.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;01&lt;&#x2F;code&gt; write watchpoint.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;11&lt;&#x2F;code&gt; read&#x2F;write watchpoint.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;10&lt;&#x2F;code&gt; unsupported I&#x2F;O read&#x2F;write.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When we were using Cheat Engine to add write watchpoints, the bits 17 and 16 were indeed set to &lt;code&gt;01&lt;&#x2F;code&gt;, and the bits 19 and 18 were set to &lt;code&gt;11&lt;&#x2F;code&gt;. Hm, but &lt;em&gt;11&lt;sub&gt;2&lt;&#x2F;sub&gt; = 3&lt;sub&gt;10&lt;&#x2F;sub&gt;&lt;&#x2F;em&gt; , and yet, we were watching writes to 4 bytes. So what&#x27;s up with this? Is there a different mapping for the size which isn&#x27;t documented at the time of writing? Seems we need to learn from Cheat Engine&#x27;s behaviour one more time.&lt;&#x2F;p&gt;
&lt;p&gt;For reference, this is what DR7 looked like when we added a single write watchpoint:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;hex: 000d_0001
bin: 00000000_00001101_00000000_00000001
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And this is the code I will be using to check the breakpoints of different sizes:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;thread::enum_threads(pid)
    .unwrap()
    .into_iter()
    .for_each(|tid| {
        let thread = thread::Thread::open(tid).unwrap();
        let ctx = thread.get_context().unwrap();
        eprintln!(&amp;quot;hex: {:08x}&amp;quot;, ctx.Dr7);
        eprintln!(&amp;quot;bin: {:032b}&amp;quot;, ctx.Dr7);
    });
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s compare this to watchpoints for sizes 1, 2, 4 and 8 bytes:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;1 byte
hex: 0001_0401
bin: 00000000_00000001_00000100_00000001

2 bytes
hex: 0005_0401
bin: 00000000_00000101_00000100_00000001

4 bytes
hex: 000d_0401
bin: 00000000_00001101_00000100_00000001

8 bytes
hex: 0009_0401
bin: 00000000_00001001_00000100_00000001
                            ^ wut?
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have no idea what&#x27;s up with that stray tenth bit. Its use does not seem documented, and things worked fine without it, so we&#x27;ll ignore it. The lowest bit is set to indicate we&#x27;re using DR0, bits 17 and 16 represent the write watchpoint, and the size seems to be as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;00&lt;&#x2F;code&gt; for a single byte.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;01&lt;&#x2F;code&gt; for two bytes (a &amp;quot;word&amp;quot;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;11&lt;&#x2F;code&gt; for four bytes (a &amp;quot;double word&amp;quot;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;10&lt;&#x2F;code&gt; for eight bytes (a &amp;quot;quadruple word&amp;quot;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Doesn&#x27;t make much sense if you ask me, but we&#x27;ll roll with it. Just to confirm, this is what the &amp;quot;on-access&amp;quot; breakpoint looks like according to Cheat Engine:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;hex: 000f_0401
bin: 00000000_00001111_00000100_00000001
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So it all checks out! The bit pattern is &lt;code&gt;11&lt;&#x2F;code&gt; for read&#x2F;write (technically, a write is also an access). Let&#x27;s implement this!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;proper-breakpoint-handling&quot;&gt;Proper breakpoint handling&lt;&#x2F;h2&gt;
&lt;p&gt;The first thing we need to do is represent the possible breakpoint conditions:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[repr(u8)]
pub enum Condition {
    Execute = 0b00,
    Write = 0b01,
    Access = 0b11,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And also the legal breakpoint sizes:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[repr(u8)]
pub enum Size {
    Byte = 0b00,
    Word = 0b01,
    DoubleWord = 0b11,
    QuadWord = 0b10,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are using &lt;code&gt;#[repr(u8)]&lt;&#x2F;code&gt; so that we can convert a given variant into the corresponding bit pattern. With the right types defined in order to set a breakpoint, we can start implementing the method that will set them (inside &lt;code&gt;impl Thread&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn add_breakpoint(&amp;amp;self, addr: usize, cond: Condition, size: Size) -&amp;gt; io::Result&amp;lt;Breakpoint&amp;gt; {
    let mut context = self.get_context()?;
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, let&#x27;s try finding an &amp;quot;open spot&amp;quot; where we could set our breakpoint. We will &amp;quot;slide&amp;quot; a the &lt;code&gt;0b11&lt;&#x2F;code&gt; bitmask over the lowest eight bits, and if and only if both the local and global bits are unset, then we&#x27;re free to set a breakpoint at this index&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let index = (0..4)
    .find_map(|i| ((context.Dr7 &amp;amp; (0b11 &amp;lt;&amp;lt; (i * 2))) == 0).then(|| i))
    .ok_or_else(|| io::Error::new(io::ErrorKind::Other, &amp;quot;no debug register available&amp;quot;))?;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once an &lt;code&gt;index&lt;&#x2F;code&gt; is found, we can set the address we want to watch in the corresponding register and update the debug control bits:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = addr as u64;
match index {
    0 =&amp;gt; context.Dr0 = addr,
    1 =&amp;gt; context.Dr1 = addr,
    2 =&amp;gt; context.Dr2 = addr,
    3 =&amp;gt; context.Dr3 = addr,
    _ =&amp;gt; unreachable!(),
}

let clear_mask = !((0b1111 &amp;lt;&amp;lt; (16 + index * 4)) | (0b11 &amp;lt;&amp;lt; (index * 2)));
context.Dr7 &amp;amp;= clear_mask;

context.Dr7 |= 1 &amp;lt;&amp;lt; (index * 2);

let sc = (((size as u8) &amp;lt;&amp;lt; 2) | (cond as u8)) as u64;
context.Dr7 |= sc &amp;lt;&amp;lt; (16 + index * 4);

self.set_context(&amp;amp;context)?;
Ok(Breakpoint {
    thread: self,
    clear_mask,
})
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we&#x27;re first creating a &amp;quot;clear mask&amp;quot;. We switch on all the bits that we may use for this breakpoint, and then negate. Effectively, &lt;code&gt;Dr7 &amp;amp; clear_mask&lt;&#x2F;code&gt; will make sure we don&#x27;t leave any bit high on accident. We apply the mask before OR-ing the rest of bits to also clear any potential garbage on the size and condition bits. Next, we set the bit to enable the new local breakpoint, and also store the size and condition bits at the right location.&lt;&#x2F;p&gt;
&lt;p&gt;With the context updated, we can set it back and return the &lt;code&gt;Breakpoint&lt;&#x2F;code&gt;. It stores the &lt;code&gt;thread&lt;&#x2F;code&gt; and the &lt;code&gt;clear_mask&lt;&#x2F;code&gt; so that it can clean up on &lt;code&gt;Drop&lt;&#x2F;code&gt;. We are technically relying on &lt;code&gt;Drop&lt;&#x2F;code&gt; to run behaviour here, but the cleanup is done on a best-effort basis. If the user intentionally forgets the &lt;code&gt;Breakpoint&lt;&#x2F;code&gt;, maybe they want the &lt;code&gt;Breakpoint&lt;&#x2F;code&gt; to forever be set.&lt;&#x2F;p&gt;
&lt;p&gt;This logic is begging for a testcase though; I&#x27;ll split it into a new &lt;code&gt;Breakpoint::update_dbg_control&lt;&#x2F;code&gt; method and test that out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn brk_add_one() {
        &#x2F;&#x2F; DR7 starts with garbage which should be respected.
        let (clear_mask, dr, dr7) =
            Breakpoint::update_dbg_control(0x1700, Condition::Write, Size::DoubleWord).unwrap();

        assert_eq!(clear_mask, 0xffff_ffff_fff0_fffc);
        assert_eq!(dr, DebugRegister::Dr0);
        assert_eq!(dr7, 0x0000_0000_000d_1701);
    }

    #[test]
    fn brk_add_two() {
        let (clear_mask, dr, dr7) = Breakpoint::update_dbg_control(
            0x0000_0000_000d_0001,
            Condition::Write,
            Size::DoubleWord,
        )
        .unwrap();

        assert_eq!(clear_mask, 0xffff_ffff_ff0f_fff3);
        assert_eq!(dr, DebugRegister::Dr1);
        assert_eq!(dr7, 0x0000_0000_00dd_0005);
    }

    #[test]
    fn brk_try_add_when_max() {
        assert!(Breakpoint::update_dbg_control(
            0x0000_0000_dddd_0055,
            Condition::Write,
            Size::DoubleWord
        )
        .is_none());
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;running 3 tests
test thread::tests::brk_add_one ... ok
test thread::tests::brk_add_two ... ok
test thread::tests::brk_try_add_when_max ... ok
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very good! With proper breakpoint handling usable, we can continue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;inferring-the-pointer-value&quot;&gt;Inferring the pointer value&lt;&#x2F;h2&gt;
&lt;p&gt;After scanning memory for the location we&#x27;re looking for (say, our current health), we then add an access watchpoint, and wait for an exception to occur. As a reminder, here&#x27;s the page with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;debugging-events&quot;&gt;Debugging Events&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = ...;
let mut threads = ...;

let _watchpoints = threads
    .iter_mut()
    .map(|thread| {
        thread
            .add_breakpoint(addr, thread::Condition::Access, thread::Size::DoubleWord)
            .unwrap()
    })
    .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

loop {
    let event = debugger.wait_event(None).unwrap();
    if event.dwDebugEventCode == winapi::um::minwinbase::EXCEPTION_DEBUG_EVENT {
        let exc = unsafe { event.u.Exception() };
        if exc.ExceptionRecord.ExceptionCode == winapi::um::minwinbase::EXCEPTION_SINGLE_STEP {
            todo!();
        }
    }
    debugger.cont(event, true).unwrap();
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, inside the &lt;code&gt;todo!()&lt;&#x2F;code&gt; we will want to do a few things, namely printing out the instructions &amp;quot;around this location&amp;quot; and dumping the entire thread context on screen. To print the instructions, we need to import &lt;code&gt;iced_x86&lt;&#x2F;code&gt; again, iterate over all memory regions to find the region where the exception happened, read the corresponding bytes, decode the instructions, and when we find the one with a corresponding instruction pointer, print &amp;quot;around it&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use iced_x86::{Decoder, DecoderOptions, Formatter, Instruction, NasmFormatter};

let addr = exc.ExceptionRecord.ExceptionAddress as usize;
let region = process
    .memory_regions()
    .into_iter()
    .find(|region| {
        let base = region.BaseAddress as usize;
        base &amp;lt;= addr &amp;amp;&amp;amp; addr &amp;lt; base + region.RegionSize
    })
    .unwrap();

let bytes = process
    .read_memory(region.BaseAddress as usize, region.RegionSize)
    .unwrap();

let mut decoder = Decoder::new(64, &amp;amp;bytes, DecoderOptions::NONE);
decoder.set_ip(region.BaseAddress as _);

let mut formatter = NasmFormatter::new();
let mut output = String::new();

let instructions = decoder.into_iter().collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
for (i, ins) in instructions.iter().enumerate() {
    if ins.next_ip() as usize == addr {
        let low = i.saturating_sub(5);
        let high = (i + 5).min(instructions.len());
        for j in low..high {
            let ins = &amp;amp;instructions[j];
            print!(&amp;quot;{} {:016X} &amp;quot;, if j == i { &amp;quot;&amp;gt;&amp;gt;&amp;gt;&amp;quot; } else { &amp;quot;   &amp;quot; }, ins.ip());
            let k = (ins.ip() - region.BaseAddress as usize as u64) as usize;
            let instr_bytes = &amp;amp;bytes[k..k + ins.len()];
            for b in instr_bytes.iter() {
                print!(&amp;quot;{:02X}&amp;quot;, b);
            }
            if instr_bytes.len() &amp;lt; 10 {
                for _ in 0..10usize.saturating_sub(instr_bytes.len()) {
                    print!(&amp;quot;  &amp;quot;);
                }
            }

            output.clear();
            formatter.format(ins, &amp;amp;mut output);
            println!(&amp;quot; {}&amp;quot;, output);
        }
        break;
    }
}
debugger.cont(event, true).unwrap();
break;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result is pretty fancy:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;    000000010002CAAC 48894DF0             mov [rbp-10h],rcx
    000000010002CAB0 488955F8             mov [rbp-8],rdx
    000000010002CAB4 48C745D800000000     mov qword [rbp-28h],0
    000000010002CABC 90                   nop
    000000010002CABD 488B050CA02D00       mov rax,[rel 100306AD0h]
&amp;gt;&amp;gt;&amp;gt; 000000010002CAC4 8B00                 mov eax,[rax]
    000000010002CAC6 8945EC               mov [rbp-14h],eax
    000000010002CAC9 B9E8030000           mov ecx,3E8h
    000000010002CACE E88D2FFEFF           call 000000010000FA60h
    000000010002CAD3 8945E8               mov [rbp-18h],eax
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool! So &lt;code&gt;rax&lt;&#x2F;code&gt; is holding an address, meaning it&#x27;s a pointer, and the value it reads (dereferences) is stored back into &lt;code&gt;eax&lt;&#x2F;code&gt; (because it does not need &lt;code&gt;rax&lt;&#x2F;code&gt; anymore). Alas, the current thread context has the register state &lt;em&gt;after&lt;&#x2F;em&gt; the instruction was executed, and &lt;code&gt;rax&lt;&#x2F;code&gt; no longer contains the address at this point. However, notice how the previous instruction writes a fixed value to &lt;code&gt;rax&lt;&#x2F;code&gt;, and then that value is used to access memory, like so:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let eax = memory[memory[0x100306AD0]];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The value at &lt;code&gt;memory[0x100306AD0]&lt;&#x2F;code&gt; &lt;em&gt;is&lt;&#x2F;em&gt; the pointer! No offsets are used, because nothing is added to the pointer after it&#x27;s read. This means that, if we simply scan for the address we were looking for, we should find out where the pointer is stored:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = ...;
let scan = process.scan_regions(&amp;amp;regions, Scan::Exact(addr as u64));

scan.into_iter().for_each(|region| {
    region.locations.iter().for_each(|ptr_addr| {
        println!(&amp;quot;[{:x}] = {:x}&amp;quot;, ptr_addr, addr);
    });
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;[100306ad0] = 15de9f0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the pointer address found matches with the offset used by the instructions:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;    000000010002CABD 488B050CA02D00       mov rax,[rel 100306AD0h]
           this is the same as the value we just found ^^^^^^^^^^
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Very interesting indeed. We were actually very lucky to have only found a single memory location containing the pointer value, &lt;code&gt;0x15de9f0&lt;&#x2F;code&gt;. Cheat Engine somehow knows that this value is always stored at &lt;code&gt;0x100306ad0&lt;&#x2F;code&gt; (or rather, at &lt;code&gt;Tutorial-x86_64.exe+306AD0&lt;&#x2F;code&gt;), because the address shows green. How does it do this?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;base-addresses&quot;&gt;Base addresses&lt;&#x2F;h2&gt;
&lt;p&gt;Remember back in &lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;part 2&lt;&#x2F;a&gt; when we introduced the memory regions? They&#x27;re making a comeback! A memory region contains both the current memory protection option &lt;em&gt;and&lt;&#x2F;em&gt; the protection level when the region was created. If we try printing out the protection levels for both the memory region containing the value, and the memory region containing the pointer, this is what we get (the addresses differ from the ones previously because I restarted the tutorial):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Region holding the value:
    BaseAddress: 0xb0000
    AllocationBase: 0xb0000
    AllocationProtect: 0x4
    RegionSize: 1007616
    State: 4096
    Protect: 4
    Type: 0x20000

Region holding the pointer:
    BaseAddress: 0x100304000
    AllocationBase: 0x100000000
    AllocationProtect: 0x80
    RegionSize: 28672
    State: 4096
    Protect: 4
    Type: 0x1000000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Interesting! According to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winnt&#x2F;ns-winnt-memory_basic_information&quot;&gt;&lt;code&gt;MEMORY_BASIC_INFORMATION&lt;&#x2F;code&gt; page&lt;&#x2F;a&gt;, the type for the first region is &lt;code&gt;MEM_PRIVATE&lt;&#x2F;code&gt;, and the type for the second region is &lt;code&gt;MEM_IMAGE&lt;&#x2F;code&gt; which:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indicates that the memory pages within the region are mapped into the view of an image section.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The protection also changes from &lt;code&gt;PAGE_EXECUTE_WRITECOPY&lt;&#x2F;code&gt; to simply &lt;code&gt;PAGE_READWRITE&lt;&#x2F;code&gt;, but I don&#x27;t think it&#x27;s relevant. Neither the type seems to be much more relevant. In &lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;part 2&lt;&#x2F;a&gt; we also mentioned the concept of &amp;quot;base address&amp;quot;, but decided against using it, because starting to look for regions at address zero seemed to work fine. However, it would make sense that fixed &amp;quot;addresses&amp;quot; start at some known &amp;quot;base&amp;quot;. Let&#x27;s try getting the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;26573045&#x2F;4759433&quot;&gt;base address for all loaded modules&lt;&#x2F;a&gt;. Currently, we only get the address for the base module, in order to retrieve its name, but now we need them all:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn enum_modules(&amp;amp;self) -&amp;gt; io::Result&amp;lt;Vec&amp;lt;winapi::shared::minwindef::HMODULE&amp;gt;&amp;gt; {
    let mut size = 0;
    if unsafe {
        winapi::um::psapi::EnumProcessModules(
            self.handle.as_ptr(),
            ptr::null_mut(),
            0,
            &amp;amp;mut size,
        )
    } == FALSE
    {
        return Err(io::Error::last_os_error());
    }

    let mut modules = Vec::with_capacity(size as usize &#x2F; mem::size_of::&amp;lt;HMODULE&amp;gt;());
    if unsafe {
        winapi::um::psapi::EnumProcessModules(
            self.handle.as_ptr(),
            modules.as_mut_ptr(),
            (modules.capacity() * mem::size_of::&amp;lt;HMODULE&amp;gt;()) as u32,
            &amp;amp;mut size,
        )
    } == FALSE
    {
        return Err(io::Error::last_os_error());
    }

    unsafe {
        modules.set_len(size as usize &#x2F; mem::size_of::&amp;lt;HMODULE&amp;gt;());
    }

    Ok(modules)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first call is used to retrieve the correct &lt;code&gt;size&lt;&#x2F;code&gt;, then we allocate just enough, and make the second call. The returned type are pretty much memory addresses, so let&#x27;s see if we can find regions that contain them:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let mut bases = 0;
let modules = process.enum_modules().unwrap();
let regions = process.memory_regions();
regions.iter().for_each(|region| {
    if modules.iter().any(|module| {
        let base = region.AllocationBase as usize;
        let addr = *module as usize;
        base &amp;lt;= addr &amp;amp;&amp;amp; addr &amp;lt; base + region.RegionSize
    }) {
        bases += 1;
    }
});

println!(
    &amp;quot;{}&#x2F;{} regions have a module address within them&amp;quot;,
    bases,
    regions.len()
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;41&#x2F;353 regions have a module address within them
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Exciting stuff! It appears &lt;code&gt;base == addr&lt;&#x2F;code&gt; also does the trick&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, so now we could build a &lt;code&gt;bases: HashSet&amp;lt;usize&amp;gt;&lt;&#x2F;code&gt; and simply check if &lt;code&gt;bases.contains(&amp;amp;region.AllocationBase as usize)&lt;&#x2F;code&gt; to determine whether &lt;code&gt;region&lt;&#x2F;code&gt; is a base address or not&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. So there we have it! The address holding the pointer value does fall within one of these &amp;quot;base regions&amp;quot;. You can also get the name from one of these module addresses, and print it in the same way as Cheat Engine does it (such as &lt;code&gt;Tutorial-x86_64.exe+306AD0&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;So, there&#x27;s no &amp;quot;automated&amp;quot; solution to all of this? That&#x27;s the end? Well, yes, once you have a pointer you can dereference it once and then write to the given address to complete the tutorial step! I can understand how this would feel a bit underwhelming, but in all fairness, we were required to pretty-print assembly to guess what pointer address we could potentially need to look for. There is an &lt;a href=&quot;https:&#x2F;&#x2F;www.intel.com&#x2F;content&#x2F;www&#x2F;us&#x2F;en&#x2F;architecture-and-technology&#x2F;64-ia-32-architectures-software-developer-vol-2a-manual.html&quot;&gt;stupidly large amount of instructions&lt;&#x2F;a&gt;, and I&#x27;m sure a lot of them can access memory, so automating that would be rough. We were lucky that the instructions right before the one that hit the breakpoint were changing the memory address, but you could imagine this value coming from somewhere completely different. It could also be using a myriad of different techniques to apply the offset. I would argue manual intervention is a must here&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We have learnt how to pretty-print instructions, and had a very gentle introduction to figuring out what we may need to look for. The code to retrieve the loaded modules, and their corresponding regions, will come in handy later on. Having access to this information lets us know when to stop looking for additional pointers. As soon as a pointer is found within a memory region corresponding to a base module, we&#x27;re done! Also, I know the title doesn&#x27;t really much the contents of this entry (sorry about that), but I&#x27;m just following the convention of calling it whatever the Cheat Engine tutorial calls them.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;code for this post&lt;&#x2F;a&gt; is available over at my GitHub. You can run &lt;code&gt;git checkout step6&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code, although you will have to &lt;code&gt;checkout&lt;&#x2F;code&gt; to individual commits if you want to review, for example, how the instructions were printed out. Only the code necessary to complete the step is included at the &lt;code&gt;step6&lt;&#x2F;code&gt; tag.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the seventh step of the tutorial: Code Injection. This will be pretty similar to part 5, but instead of writing out a simple NOP instruction, we will have to get a bit more creative.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;This will only be a gentle introduction to pointers. Part 8 of this series will have to rely on more advanced techniques.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Kind of. The size of a pointer isn&#x27;t necessarily the size as &lt;code&gt;usize&lt;&#x2F;code&gt;, although &lt;code&gt;usize&lt;&#x2F;code&gt; is guaranteed to be able of representing every possible address. For our purposes, we can assume a pointer is as big as &lt;code&gt;usize&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Game updates are likely to pull more code and shuffle stuff around. This is unfortunately a difficult problem to solve. But storing a pointer which is usable across restarts for as long as the game doesn&#x27;t update is still a pretty darn big improvement over having to constantly scan for the locations we care about. Although if you&#x27;re smart enough to look for certain unique patterns, even if the code is changed, finding those patterns will give you the new updated address, so it&#x27;s not &lt;em&gt;impossible&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;code&gt;bool::then&lt;&#x2F;code&gt; is a pretty recent addition at the time of writing (1.50.0), so make sure you &lt;code&gt;rustup update&lt;&#x2F;code&gt; if it&#x27;s erroring out!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;I wasn&#x27;t sure if there would be some metadata before the module base address but within the region, so I went with the range check. What &lt;em&gt;is&lt;&#x2F;em&gt; important however is using &lt;code&gt;AllocationBase&lt;&#x2F;code&gt;, not &lt;code&gt;BaseAddress&lt;&#x2F;code&gt;. They&#x27;re different, and this did bite me.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;As usual, I have no idea if this is how Cheat Engine is doing it, but it seems reasonable.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;But nothing&#x27;s stopping you from implementing some heuristics to get the job done for you. If you run some algorithm in your head to find what the pointer value could be, you can program it in Rust as well, although I don&#x27;t think it&#x27;s worth the effort.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Code finder</title>
		<published>2021-03-06T00:00:00+00:00</published>
		<updated>2021-03-06T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-5/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-5/</id>
		<content type="html">&lt;p&gt;This is part 5 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 5: Code finder&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 4 we spent a good deal of time trying to make our scans generic, and now we have something that works&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;! Now that the scanning is fairly powerful and all covered, the Cheat Engine tutorial shifts focus into slightly more advanced techniques that you will most certainly need in anything bigger than a toy program.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s time to write our very own &lt;strong&gt;debugger&lt;&#x2F;strong&gt; in Rust!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-finder&quot;&gt;Code finder&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 5&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes the location something is stored at changes when you restart the game, or even while you&#x27;re playing… In that case you can use 2 things to still make a table that works. In this step I&#x27;ll try to describe how to use the Code Finder function.&lt;&#x2F;p&gt;
&lt;p&gt;The value down here will be at a different location each time you start the tutorial, so a normal entry in the address list wouldn&#x27;t work. First try to find the address. (You&#x27;ve got to this point so I assume you know how to.)&lt;&#x2F;p&gt;
&lt;p&gt;When you&#x27;ve found the address, right-click the address in Cheat Engine and choose &amp;quot;Find out what writes to this address&amp;quot;. A window will pop up with an empty list.&lt;&#x2F;p&gt;
&lt;p&gt;Then click on the Change value button in this tutorial, and go back to Cheat Engine. If everything went right there should be an address with assembler code there now.&lt;&#x2F;p&gt;
&lt;p&gt;Click it and choose the replace option to replace it with code that does nothing. That will also add the code address to the code list in the advanced options window. (Which gets saved if you save your table.)&lt;&#x2F;p&gt;
&lt;p&gt;Click on stop, so the game will start running normal again, and close to close the window. Now, click on Change value, and if everything went right the Next button should become enabled.&lt;&#x2F;p&gt;
&lt;p&gt;Note: When you&#x27;re freezing the address with a high enough speed it may happen that next becomes visible anyhow&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;baby-steps-to-debugging&quot;&gt;Baby steps to debugging&lt;&#x2F;h2&gt;
&lt;p&gt;Although I have used debuggers before, I have never had a need to write one myself so it&#x27;s time for some research.&lt;&#x2F;p&gt;
&lt;p&gt;Searching on DuckDuckGo, I can find entire series to &lt;a href=&quot;http:&#x2F;&#x2F;system.joekain.com&#x2F;debugger&#x2F;&quot;&gt;Writing a Debugger&lt;&#x2F;a&gt;. We would be done by now if only that series wasn&#x27;t written for Linux. The Windows documentation contains a section called &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;creating-a-basic-debugger&quot;&gt;Creating a Basic Debugger&lt;&#x2F;a&gt;, but as far as I can tell, it only teaches you the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;debugging-functions&quot;&gt;functions&lt;&#x2F;a&gt; needed to configure the debugging loop. Which mind you, we will need, but in due time.&lt;&#x2F;p&gt;
&lt;p&gt;According to &lt;a href=&quot;https:&#x2F;&#x2F;www.gironsec.com&#x2F;blog&#x2F;2013&#x2F;12&#x2F;writing-your-own-debugger-windows-in-c&#x2F;&quot;&gt;Writing your own windows debugger in C&lt;&#x2F;a&gt;, the steps needed to write a debugger are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-suspendthread&quot;&gt;&lt;code&gt;SuspendThread(proc)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. It makes sense that we need to pause all the threads&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; before messing around with the code the program is executing, or things are very prone to go wrong.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-getthreadcontext&quot;&gt;&lt;code&gt;GetThreadContext(proc)&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This function retrieves the appropriate context of the specified thread and is highly processor specific. It basically takes a snapshot of all the registers. Think of registers like extremely fast, but also extremely limited, memory the processor uses.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winbase&#x2F;nf-winbase-debugbreakprocess&quot;&gt;&lt;code&gt;DebugBreakProcess&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Essentially &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;drivers&#x2F;debugger&#x2F;x86-instructions#miscellaneous&quot;&gt;writes out the 0xCC opcode&lt;&#x2F;a&gt;, &lt;code&gt;int 3&lt;&#x2F;code&gt; in assembly, also known as software breakpoint. It&#x27;s written wherever the Register Instruction Pointer (RIP&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;) currently points to, so in essence, when the thread resumes, it will immediately &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;3915511&#x2F;&quot;&gt;trigger the breakpoint&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;debugapi&#x2F;nf-debugapi-continuedebugevent&quot;&gt;&lt;code&gt;ContinueDebugEvent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Presumably continues debugging.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are pages documenting &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;debugging-events&quot;&gt;all of the debug events&lt;&#x2F;a&gt; that our debugger will be able to handle.&lt;&#x2F;p&gt;
&lt;p&gt;Okay, nice! Software breakpoints seem to be done by writing out memory to the region where the program is reading instructions from. We know how to write memory, as that&#x27;s what all the previous posts have been doing to complete the corresponding tutorial steps. After the breakpoint is executed, all we need to do is &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;3747852&#x2F;&quot;&gt;restore the original memory back&lt;&#x2F;a&gt; so that the next time the program executes the code it sees no difference.&lt;&#x2F;p&gt;
&lt;p&gt;But a software breakpoint will halt execution when the code executes the interrupt instruction. This step of the tutorial wants us to find &lt;em&gt;what writes to a memory location&lt;&#x2F;em&gt;. Where should we place the breakpoint to detect such location? Writing out the instruction to the memory we want to break in won&#x27;t do; it&#x27;s not an instruction, it&#x27;s just data.&lt;&#x2F;p&gt;
&lt;p&gt;The name may have given it away. If we&#x27;re talking about software breakpoints, it makes sense that there would exist such a thing as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Breakpoint#Hardware&quot;&gt;&lt;em&gt;hardware&lt;&#x2F;em&gt; breakpoints&lt;&#x2F;a&gt;. Because they&#x27;re tied to the hardware, they&#x27;re highly processor-specific, but luckily for us, the processor on your usual desktop computer probably has them! Even the &lt;a href=&quot;https:&#x2F;&#x2F;interrupt.memfault.com&#x2F;blog&#x2F;cortex-m-breakpoints&quot;&gt;cortex-m&lt;&#x2F;a&gt; does. The wikipedia page also tells us the name of the thing we&#x27;re looking for, watchpoints:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Other kinds of conditions can also be used, such as the reading, writing, or modification of a specific location in an area of memory. This is often referred to as a conditional breakpoint, a data breakpoint, or a watchpoint.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A breakpoint that triggers when a specific memory location is written to is exactly what we need, and &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;19109153&#x2F;&quot;&gt;x86 has debug registers D0 to D3 to track memory addresses&lt;&#x2F;a&gt;. As far as I can tell, there is no API in specific to mess with the registers. But we don&#x27;t need any of that! We can just go ahead and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;unstable-book&#x2F;library-features&#x2F;asm.html&quot;&gt;write some assembly by hand&lt;&#x2F;a&gt; to access these registers. At the time of writing, inline assembly is unstable, so we need a nightly compiler. Run &lt;code&gt;rustup toolchain install nightly&lt;&#x2F;code&gt; if you haven&#x27;t yet, and execute the following code with &lt;code&gt;cargo +nightly run&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#![feature(asm)] &#x2F;&#x2F; top of the file

fn main() {
    let x: u64 = 123;
    unsafe {
        asm!(&amp;quot;mov dr7, {}&amp;quot;, in(reg) x);
    }
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;dr7&lt;&#x2F;code&gt; stands is the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;X86_debug_register&quot;&gt;debug control register&lt;&#x2F;a&gt;, and running this we get…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo +nightly run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.74s
     Running `target\debug\memo.exe`
error: process didn&#x27;t exit successfully: `target\debug\memo.exe` (exit code: 0xc0000096, STATUS_PRIVILEGED_INSTRUCTION)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…an exception! In all fairness, I have no idea what that code would have done. So maybe the &lt;code&gt;STATUS_PRIVILEGED_INSTRUCTION&lt;&#x2F;code&gt; is just trying to protect us. Can we read from the register instead, and see it&#x27;s default value?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let x: u64;
unsafe {
    asm!(&amp;quot;mov {}, dr7&amp;quot;, out(reg) x);
}
assert_eq!(x, 5);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo +nightly run
...
error: process didn&#x27;t exit successfully: `target\debug\memo.exe` (exit code: 0xc0000096, STATUS_PRIVILEGED_INSTRUCTION)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nope. Okay, it seems directly reading from or writing to the debug register is a ring-0 thing. Surely there&#x27;s a way around this. But first we should figure out how to enumerate and pause all the threads.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pausing-all-the-threads&quot;&gt;Pausing all the threads&lt;&#x2F;h2&gt;
&lt;p&gt;It seems there is no straightforward way to enumerate the threads. One has to &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;1206915&#x2F;&quot;&gt;create a &amp;quot;toolhelp&amp;quot;&lt;&#x2F;a&gt; and poll the entries. I won&#x27;t bore you with the details. Let&#x27;s add &lt;code&gt;tlhelp32&lt;&#x2F;code&gt; to the crate features of &lt;code&gt;winapi&lt;&#x2F;code&gt; and try it out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;
#[derive(Debug)]
pub struct Toolhelp {
    handle: winapi::um::winnt::HANDLE,
}

impl Drop for Toolhelp {
    fn drop(&amp;amp;mut self) {
        unsafe { winapi::um::handleapi::CloseHandle(self.handle) };
    }
}

pub fn enum_threads(pid: u32) -&amp;gt; io::Result&amp;lt;Vec&amp;lt;u32&amp;gt;&amp;gt; {
    const ENTRY_SIZE: u32 = mem::size_of::&amp;lt;winapi::um::tlhelp32::THREADENTRY32&amp;gt;() as u32;

    &#x2F;&#x2F; size_of(dwSize + cntUsage + th32ThreadID + th32OwnerProcessID)
    const NEEDED_ENTRY_SIZE: u32 = 4 * mem::size_of::&amp;lt;DWORD&amp;gt;() as u32;

    &#x2F;&#x2F; SAFETY: it is always safe to attempt to call this function.
    let handle = unsafe {
        winapi::um::tlhelp32::CreateToolhelp32Snapshot(winapi::um::tlhelp32::TH32CS_SNAPTHREAD, 0)
    };
    if handle == winapi::um::handleapi::INVALID_HANDLE_VALUE {
        return Err(io::Error::last_os_error());
    }
    let toolhelp = Toolhelp { handle };

    let mut result = Vec::new();
    let mut entry = winapi::um::tlhelp32::THREADENTRY32 {
        dwSize: ENTRY_SIZE,
        cntUsage: 0,
        th32ThreadID: 0,
        th32OwnerProcessID: 0,
        tpBasePri: 0,
        tpDeltaPri: 0,
        dwFlags: 0,
    };

    &#x2F;&#x2F; SAFETY: we have a valid handle, and point to memory we own with the right size.
    if unsafe { winapi::um::tlhelp32::Thread32First(toolhelp.handle, &amp;amp;mut entry) } != FALSE {
        loop {
            if entry.dwSize &amp;gt;= NEEDED_ENTRY_SIZE &amp;amp;&amp;amp; entry.th32OwnerProcessID == pid {
                result.push(entry.th32ThreadID);
            }

            entry.dwSize = ENTRY_SIZE;
            &#x2F;&#x2F; SAFETY: we have a valid handle, and point to memory we own with the right size.
            if unsafe { winapi::um::tlhelp32::Thread32Next(toolhelp.handle, &amp;amp;mut entry) } == FALSE {
                break;
            }
        }
    }

    Ok(result)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Annoyingly, invalid handles returned by &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;tlhelp32&#x2F;nf-tlhelp32-createtoolhelp32snapshot&quot;&gt;&lt;code&gt;CreateToolhelp32Snapshot&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, are &lt;code&gt;INVALID_HANDLE_VALUE&lt;&#x2F;code&gt; (which is -1), not null. But that&#x27;s not a big deal, we simply can&#x27;t use &lt;code&gt;NonNull&lt;&#x2F;code&gt; here. The function ignores the process identifier when using &lt;code&gt;TH32CS_SNAPTHREAD&lt;&#x2F;code&gt;, used to include all threads, and we need to compare the process identifier ourselves.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, we create a &amp;quot;toolhelp&amp;quot; (wrapped in a helper &lt;code&gt;struct&lt;&#x2F;code&gt; so that whatever happens, &lt;code&gt;Drop&lt;&#x2F;code&gt; will clean it up), initialize a thread enntry (with everything but the structure size to zero) and call &lt;code&gt;Thread32First&lt;&#x2F;code&gt; the first time, &lt;code&gt;Thread32Next&lt;&#x2F;code&gt; subsequent times. It seems to work all fine!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;dbg!(process::enum_threads(pid));
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;[src\main.rs:46] process::enum_threads(pid) = Ok(
    [
        10560,
    ],
)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;According to this, the Cheat Engine tutorial is only using one thread. Good to know. Much like processes, threads need to be opened before we can use them, with &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-openthread&quot;&gt;&lt;code&gt;OpenThread&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub struct Thread {
    tid: u32,
    handle: NonNull&amp;lt;c_void&amp;gt;,
}

impl Thread {
    pub fn open(tid: u32) -&amp;gt; io::Result&amp;lt;Self&amp;gt; {
        &#x2F;&#x2F; SAFETY: the call doesn&#x27;t have dangerous side-effects
        NonNull::new(unsafe {
            winapi::um::processthreadsapi::OpenThread(
                winapi::um::winnt::THREAD_SUSPEND_RESUME,
                FALSE,
                tid,
            )
        })
        .map(|handle| Self { tid, handle })
        .ok_or_else(io::Error::last_os_error)
    }

    pub fn tid(&amp;amp;self) -&amp;gt; u32 {
        self.tid
    }
}

impl Drop for Thread {
    fn drop(&amp;amp;mut self) {
        unsafe { winapi::um::handleapi::CloseHandle(self.handle.as_mut()) };
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just your usual RAII pattern. The thread is opened with permission to suspend and resume it. Let&#x27;s try to pause the handles with &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-suspendthread&quot;&gt;&lt;code&gt;SuspendThread&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to make sure that this thread is actually the one we&#x27;re looking for:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn suspend(&amp;amp;mut self) -&amp;gt; io::Result&amp;lt;usize&amp;gt; {
    &#x2F;&#x2F; SAFETY: the handle is valid.
    let ret = unsafe {
        winapi::um::processthreadsapi::SuspendThread(self.handle.as_ptr())
    };
    if ret == -1i32 as u32 {
        Err(io::Error::last_os_error())
    } else {
        Ok(ret as usize)
    }
}

pub fn resume(&amp;amp;mut self) -&amp;gt; io::Result&amp;lt;usize&amp;gt; {
    &#x2F;&#x2F; SAFETY: the handle is valid.
    let ret = unsafe {
        winapi::um::processthreadsapi::ResumeThread(self.handle.as_ptr())
    };
    if ret == -1i32 as u32 {
        Err(io::Error::last_os_error())
    } else {
        Ok(ret as usize)
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both suspend and resume return the previous &amp;quot;suspend count&amp;quot;. It&#x27;s kind of like a barrier or semaphore where the thread only runs if the suspend count is zero. Trying it out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let mut threads = thread::enum_threads(pid)
    .unwrap()
    .into_iter()
    .map(Thread::open)
    .collect::&amp;lt;Result&amp;lt;Vec&amp;lt;_&amp;gt;, _&amp;gt;&amp;gt;()
    .unwrap();

threads
    .iter_mut()
    .for_each(|thread| {
        println!(&amp;quot;Pausing thread {} for 10 seconds…&amp;quot;, thread.tid());
        thread.suspend().unwrap();

        std::thread::sleep(std::time::Duration::from_secs(10));

        println!(&amp;quot;Wake up, {}!&amp;quot;, thread.tid());
        thread.resume().unwrap();
    });
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you run this code with the process ID of the Cheat Engine tutorial, you will see that the tutorial window freezes for ten seconds! Because the main and only thread is paused, it cannot process any window events, so it becomes unresponsive. It is now &amp;quot;safe&amp;quot; to mess around with the thread context.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-hardware-breakpoints&quot;&gt;Setting hardware breakpoints&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m definitely not the first person to wonder &lt;a href=&quot;https:&#x2F;&#x2F;social.msdn.microsoft.com&#x2F;Forums&#x2F;en-US&#x2F;0cb3360d-3747-42a7-bc0e-668c5d9ee1ee&#x2F;how-to-set-a-hardware-breakpoint&quot;&gt;How to set a hardware breakpoint?&lt;&#x2F;a&gt;. This is great, because it means I don&#x27;t need to ask that question myself. It appears we need to change the debug register &lt;em&gt;via the thread context&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One has to be careful to use the right context structure. Confusingly enough, &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;17504174&#x2F;&quot;&gt;&lt;code&gt;WOW64_CONTEXT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is 32 bits, not 64. &lt;code&gt;CONTEXT&lt;&#x2F;code&gt; alone seems to be the right one:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn get_context(&amp;amp;self) -&amp;gt; io::Result&amp;lt;winapi::um::winnt::CONTEXT&amp;gt; {
    let context = MaybeUninit::&amp;lt;winapi::um::winnt::CONTEXT&amp;gt;::zeroed();
    &#x2F;&#x2F; SAFETY: it&#x27;s a C struct, and all-zero is a valid bit-pattern for the type.
    let mut context = unsafe { context.assume_init() };
    context.ContextFlags = winapi::um::winnt::CONTEXT_ALL;

    &#x2F;&#x2F; SAFETY: the handle is valid and structure points to valid memory.
    if unsafe {
        winapi::um::processthreadsapi::GetThreadContext(self.handle.as_ptr(), &amp;amp;mut context)
    } == FALSE
    {
        Err(io::Error::last_os_error())
    } else {
        Ok(context)
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trying it out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;thread.suspend().unwrap();

let context = thread.get_context().unwrap();
println!(&amp;quot;Dr0: {:016x}&amp;quot;, context.Dr0);
println!(&amp;quot;Dr7: {:016x}&amp;quot;, context.Dr7);
println!(&amp;quot;Dr6: {:016x}&amp;quot;, context.Dr6);
println!(&amp;quot;Rax: {:016x}&amp;quot;, context.Rax);
println!(&amp;quot;Rbx: {:016x}&amp;quot;, context.Rbx);
println!(&amp;quot;Rcx: {:016x}&amp;quot;, context.Rcx);
println!(&amp;quot;Rip: {:016x}&amp;quot;, context.Rip);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Dr0: 0000000000000000
Dr7: 0000000000000000
Dr6: 0000000000000000
Rax: 0000000000001446
Rbx: 0000000000000000
Rcx: 0000000000000000
Rip: 00007ffda4259904
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks about right! Hm, I wonder what happens if I use Cheat Engine to add the watchpoint on the memory location we care about?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Dr0: 000000000157e650
Dr7: 00000000000d0001
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Look at that! The debug registers changed! DR0 contains the location we want to watch for writes, and the debug control register DR7 changed. Cheat Engine sets the same values on all threads (for some reason I now see more than one thread printed for the tutorial, not sure what&#x27;s up with that; maybe the single-thread is the weird one out).&lt;&#x2F;p&gt;
&lt;p&gt;Hmm, what happens if I watch for access instead of write?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Dr0: 000000000157e650
Dr7: 00000000000f0001
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What if I set both?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Dr0: 000000000157e650
Dr7: 0000000000fd0005
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most intriguing! This was done by telling Cheat Engine to find &amp;quot;what writes&amp;quot; to the address, then &amp;quot;what accesses&amp;quot; the address. I wonder if the order matters?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Dr0: 000000000157e650
Dr7: 0000000000df0005
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&amp;quot;What accesses&amp;quot; and then &amp;quot;what writes&amp;quot; does change it. Very well! We&#x27;re only concerned in a single breakpoint, so we won&#x27;t worry about this, but it&#x27;s good to know that we can inspect what Cheat Engine is doing. It&#x27;s also interesting to see how Cheat Engine is using hardware breakpoints and not software breakpoints.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, our code is going to assume that we&#x27;re the only ones messing around with the debug registers, and that there will only be a single debug register in use. Make sure to add &lt;code&gt;THREAD_SET_CONTEXT&lt;&#x2F;code&gt; to the permissions when opening the thread handle:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn set_context(&amp;amp;self, context: &amp;amp;winapi::um::winnt::CONTEXT) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
    &#x2F;&#x2F; SAFETY: the handle is valid and structure points to valid memory.
    if unsafe {
        winapi::um::processthreadsapi::SetThreadContext(self.handle.as_ptr(), context)
    } == FALSE
    {
        Err(io::Error::last_os_error())
    } else {
        Ok(())
    }
}

pub fn watch_memory_write(&amp;amp;self, addr: usize) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
    let mut context = self.get_context()?;
    context.Dr0 = addr as u64;
    context.Dr7 = 0x00000000000d0001;
    self.set_context(&amp;amp;context)?;
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we do this (and temporarily get rid of the &lt;code&gt;todo!()&lt;&#x2F;code&gt;), trying to change the value in the Cheat Engine tutorial will greet us with a warm message:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tutorial-x86_64&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;External exception 80000004.&lt;&#x2F;p&gt;
&lt;p&gt;Press OK to ignore and risk data corruption.&lt;br &#x2F;&gt;
Press Abort to kill the program.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;OK&lt;&#x2F;kbd&gt; &lt;kbd&gt;Abort&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is no debugger attached yet that could possibly handle this exception, so the exception just propagates. Let&#x27;s fix that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;handling-debug-events&quot;&gt;Handling debug events&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we&#x27;ve succeeded on setting breakpoints, we can actually follow the steps described in &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;creating-a-basic-debugger&quot;&gt;Creating a Basic Debugger&lt;&#x2F;a&gt;. It starts by saying that we should use &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;debugapi&#x2F;nf-debugapi-debugactiveprocess&quot;&gt;&lt;code&gt;DebugActiveProcess&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to attach our processor, the debugger, to the process we want to debug, the debuggee. This function lives under the &lt;code&gt;debugapi&lt;&#x2F;code&gt; header, so add it to &lt;code&gt;winapi&lt;&#x2F;code&gt; features:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub struct DebugToken {
    pid: u32,
}

pub fn debug(pid: u32) -&amp;gt; io::Result&amp;lt;DebugToken&amp;gt; {
    if unsafe { winapi::um::debugapi::DebugActiveProcess(pid) } == FALSE {
        return Err(io::Error::last_os_error());
    };
    let token = DebugToken { pid };
    if unsafe { winapi::um::winbase::DebugSetProcessKillOnExit(FALSE) } == FALSE {
        return Err(io::Error::last_os_error());
    };
    Ok(token)
}

impl Drop for DebugToken {
    fn drop(&amp;amp;mut self) {
        unsafe { winapi::um::debugapi::DebugActiveProcessStop(self.pid) };
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once again, we create a wrapper &lt;code&gt;struct&lt;&#x2F;code&gt; with &lt;code&gt;Drop&lt;&#x2F;code&gt; to stop debugging the process once the token is dropped. The call to &lt;code&gt;DebugSetProcessKillOnExit&lt;&#x2F;code&gt; in our &lt;code&gt;debug&lt;&#x2F;code&gt; method ensures that, if our process (the debugger) dies, the process we&#x27;re debugging (the debuggee) stays alive. We don&#x27;t want to be restarting the entire Cheat Engine tutorial every time our Rust code crashes!&lt;&#x2F;p&gt;
&lt;p&gt;With the debugger attached, we can wait for debug events. We will put this method inside of &lt;code&gt;impl DebugToken&lt;&#x2F;code&gt;, so that the only way you can call it is if you successfully attached to another process:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl DebugToken {
    pub fn wait_event(
        &amp;amp;self,
        timeout: Option&amp;lt;Duration&amp;gt;,
    ) -&amp;gt; io::Result&amp;lt;winapi::um::minwinbase::DEBUG_EVENT&amp;gt; {
        let mut result = MaybeUninit::uninit();
        let timeout = timeout
            .map(|d| d.as_millis().try_into().ok())
            .flatten()
            .unwrap_or(winapi::um::winbase::INFINITE);

        &#x2F;&#x2F; SAFETY: can only wait for events with a token, so the debugger is active.
        if unsafe { winapi::um::debugapi::WaitForDebugEvent(result.as_mut_ptr(), timeout) } == FALSE
        {
            Err(io::Error::last_os_error())
        } else {
            &#x2F;&#x2F; SAFETY: the call returned non-zero, so the structure is initialized.
            Ok(unsafe { result.assume_init() })
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;WaitForDebugEvent&lt;&#x2F;code&gt; wants a timeout in milliseconds, so our function lets the user pass the more Rusty &lt;code&gt;Duration&lt;&#x2F;code&gt; type. &lt;code&gt;None&lt;&#x2F;code&gt; will indicate &amp;quot;there is no timeout&amp;quot;, i.e., it&#x27;s infinite. If the duration is too large to fit in the &lt;code&gt;u32&lt;&#x2F;code&gt; (&lt;code&gt;try_into&lt;&#x2F;code&gt; fails), it will also be infinite.&lt;&#x2F;p&gt;
&lt;p&gt;If we attach the debugger, set the hardware watchpoint, and modify the memory location from the tutorial, an event with &lt;code&gt;dwDebugEventCode = 3&lt;&#x2F;code&gt; will be returned! Now, back to the page with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;debug&#x2F;debugging-events&quot;&gt;Debugging Events&lt;&#x2F;a&gt;… Gah! It only has the name of the constants, not the values. Well, good thing &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;&quot;&gt;docs.rs&lt;&#x2F;a&gt; has a source view! We can just check the values in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;winapi&#x2F;0.3.9&#x2F;src&#x2F;winapi&#x2F;um&#x2F;minwinbase.rs.html#203-211&quot;&gt;source code for &lt;code&gt;winapi&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub const EXCEPTION_DEBUG_EVENT: DWORD = 1;
pub const CREATE_THREAD_DEBUG_EVENT: DWORD = 2;
pub const CREATE_PROCESS_DEBUG_EVENT: DWORD = 3;
pub const EXIT_THREAD_DEBUG_EVENT: DWORD = 4;
pub const EXIT_PROCESS_DEBUG_EVENT: DWORD = 5;
pub const LOAD_DLL_DEBUG_EVENT: DWORD = 6;
pub const UNLOAD_DLL_DEBUG_EVENT: DWORD = 7;
pub const OUTPUT_DEBUG_STRING_EVENT: DWORD = 8;
pub const RIP_EVENT: DWORD = 9;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, we&#x27;ve got a &lt;code&gt;CREATE_PROCESS_DEBUG_EVENT&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generated whenever a new process is created in a process being debugged or whenever the debugger begins debugging an already active process. The system generates this debugging event before the process begins to execute in user mode and before the system generates any other debugging events for the new process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It makes sense that this is our first event. By the way, if you were trying this out with a &lt;code&gt;sleep&lt;&#x2F;code&gt; lying around in your code, you may have noticed that the window froze until the debugger terminated. That&#x27;s because:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the system notifies the debugger of a debugging event, it also suspends all threads in the affected process. The threads do not resume execution until the debugger continues the debugging event by using &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;debugapi&#x2F;nf-debugapi-continuedebugevent&quot;&gt;&lt;code&gt;ContinueDebugEvent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s call &lt;code&gt;ContinueDebugMethod&lt;&#x2F;code&gt; but also wait on more than one event and see what happens:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;for _ in 0..10 {
    let event = debugger.wait_event(None).unwrap();
    println!(&amp;quot;Got {}&amp;quot;, event.dwDebugEventCode);
    debugger.cont(event, true).unwrap();
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Got 3
Got 6
Got 6
Got 6
Got 6
Got 6
Got 6
Got 6
Got 6
Got 6
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s a lot of &lt;code&gt;LOAD_DLL_DEBUG_EVENT&lt;&#x2F;code&gt;. Pumping it up to one hundred and also showing the index we get the following:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;0. Got 3
1. Got 6
...
40. Got 6
41. Got 2
42. Got 1
43. Got 4
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order, we got:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;One &lt;code&gt;CREATE_PROCESS_DEBUG_EVENT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Forty &lt;code&gt;LOAD_DLL_DEBUG_EVENT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;One &lt;code&gt;CREATE_THREAD_DEBUG_EVENT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;One &lt;code&gt;EXCEPTION_DEBUG_EVENT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;One &lt;code&gt;EXIT_THREAD_DEBUG_EVENT&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And, if after all this, you change the value in the Cheat Engine tutorial (thus triggering our watch point), we get &lt;code&gt;EXCEPTION_DEBUG_EVENT&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Generated whenever an exception occurs in the process being debugged. Possible exceptions include attempting to access inaccessible memory, executing breakpoint instructions, attempting to divide by zero, or any other exception noted in Structured Exception Handling.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If we print out all the fields in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;minwinbase&#x2F;ns-minwinbase-exception_debug_info&quot;&gt;&lt;code&gt;EXCEPTION_DEBUG_INFO&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; structure:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Watching writes to 10e3a0 for 10s
First chance: 1
ExceptionCode: 2147483652
ExceptionFlags: 0
ExceptionRecord: 0x0
ExceptionAddress: 0x10002c5ba
NumberParameters: 0
ExceptionInformation: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;ExceptionCode&lt;&#x2F;code&gt;, which is &lt;code&gt;0x80000004&lt;&#x2F;code&gt;, corresponds with &lt;code&gt;EXCEPTION_SINGLE_STEP&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A trace trap or other single-instruction mechanism signaled that one instruction has been executed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;ExceptionAddress&lt;&#x2F;code&gt; is supposed to be &amp;quot;the address where the exception occurred&amp;quot;. Very well! I have already completed this step of the tutorial, and I know the instruction is &lt;code&gt;mov [rax],edx&lt;&#x2F;code&gt; (or, as Cheat Engine shows, the bytes &lt;code&gt;89 10&lt;&#x2F;code&gt; in hexadecimal). The opcode for the &lt;code&gt;nop&lt;&#x2F;code&gt; instruction is &lt;code&gt;90&lt;&#x2F;code&gt; in hexadecimal, so if we replace two bytes at this address, we should be able to complete the tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Note that we also need to flush the instruction cache, as noted in the Windows documentation:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Debuggers frequently read the memory of the process being debugged and write the memory that contains instructions to the instruction cache. After the instructions are written, the debugger calls the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-flushinstructioncache&quot;&gt;&lt;code&gt;FlushInstructionCache&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function to execute the cached instructions.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So we add a new method to &lt;code&gt;impl Process&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&#x2F;&#x2F;&#x2F; Flushes the instruction cache.
&#x2F;&#x2F;&#x2F;
&#x2F;&#x2F;&#x2F; Should be called when writing to memory regions that contain code.
pub fn flush_instruction_cache(&amp;amp;self) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
    &#x2F;&#x2F; SAFETY: the call doesn&#x27;t have dangerous side-effects.
    if unsafe {
        winapi::um::processthreadsapi::FlushInstructionCache(
            self.handle.as_ptr(),
            ptr::null(),
            0,
        )
    } == FALSE
    {
        Err(io::Error::last_os_error())
    } else {
        Ok(())
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And write some quick and dirty code to get this done:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let addr = ...;
println!(&amp;quot;Watching writes to {:x} for 10s&amp;quot;, addr);
threads.iter_mut().for_each(|thread| {
    thread.watch_memory_write(addr).unwrap();
});
loop {
    let event = debugger.wait_event(None).unwrap();
    if event.dwDebugEventCode == 1 {
        let exc = unsafe { event.u.Exception() };
        if exc.ExceptionRecord.ExceptionCode == 2147483652 {
            let addr = exc.ExceptionRecord.ExceptionAddress as usize;
            match process.write_memory(addr, &amp;amp;[0x90, 0x90]) {
                Ok(_) =&amp;gt; eprintln!(&amp;quot;Patched [{:x}] with NOP&amp;quot;, addr),
                Err(e) =&amp;gt; eprintln!(&amp;quot;Failed to patch [{:x}] with NOP: {}&amp;quot;, addr, e),
            };
            process.flush_instruction_cache().unwrap();
            debugger.cont(event, true).unwrap();
            break;
        }
    }
    debugger.cont(event, true).unwrap();
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although it seems to work:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Watching writes to 15103f0 for 10s
Patched [10002c5ba] with NOP
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It really doesn&#x27;t:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tutorial-x86_64&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Access violation.&lt;&#x2F;p&gt;
&lt;p&gt;Press OK to ignore and risk data corruption.&lt;br &#x2F;&gt;
Press Abort to kill the program.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;OK&lt;&#x2F;kbd&gt; &lt;kbd&gt;Abort&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Did we write memory somewhere we shouldn&#x27;t? The documentation does mention &amp;quot;segment-relative&amp;quot; and &amp;quot;linear virtual addresses&amp;quot;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;GetThreadSelectorEntry&lt;&#x2F;code&gt; returns the descriptor table entry for a specified selector and thread. Debuggers use the descriptor table entry to convert a segment-relative address to a linear virtual address. The &lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt; and &lt;code&gt;WriteProcessMemory&lt;&#x2F;code&gt; functions require linear virtual addresses.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;But nope! This isn&#x27;t the problem. The problem is that the &lt;code&gt;ExceptionRecord.ExceptionAddress&lt;&#x2F;code&gt; is &lt;em&gt;after&lt;&#x2F;em&gt; the execution happened, so it&#x27;s already 2 bytes beyond where it should be. We were accidentally writing out the first half of the next instruction, which, yeah, could not end good.&lt;&#x2F;p&gt;
&lt;p&gt;So does it work if I do this instead?:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;process.write_memory(addr - 2, &amp;amp;[0x90, 0x90])
&#x2F;&#x2F;                        ^^^ new
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This totally does work. Step 5: complete 🎉&lt;&#x2F;p&gt;
&lt;h2 id=&quot;properly-patching-instructions&quot;&gt;Properly patching instructions&lt;&#x2F;h2&gt;
&lt;p&gt;You may not be satisfied at all with our solution. Not only are we hardcoding some magic constants to set hardware watchpoints, we&#x27;re also relying on knowledge specific to the Cheat Engine tutorial (insofar that we&#x27;re replacing two bytes worth of instruction with NOPs).&lt;&#x2F;p&gt;
&lt;p&gt;Properly supporting more than one hardware breakpoint, along with supporting different types of breakpoints, is definitely doable. The meaning of the bits for the debug registers is well defined, and you can definitely study that to come up with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mmorearty&#x2F;hardware-breakpoints&quot;&gt;something more sophisticated&lt;&#x2F;a&gt; and support multiple different breakpoints. But for now, that&#x27;s out of the scope of this series. The tutorial only wants us to use an on-write watchpoint, and our solution is fine and portable for that use case.&lt;&#x2F;p&gt;
&lt;p&gt;However, relying on the size of the instructions is pretty bad. The instructions x86 executes are of variable length, so we can&#x27;t possibly just look back until we find the previous instruction, or even naively determine its length. A lot of unrelated sequences of bytes are very likely instructions themselves. We need a disassembler. No, we&#x27;re not writing our own&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Searching on &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt; for &amp;quot;disassembler&amp;quot; yields a few results, and the first one I&#x27;ve found is &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;iced-x86&quot;&gt;iced-x86&lt;&#x2F;a&gt;. I like the name, it has a decent amount of GitHub stars, and it was last updated less than a month ago. I don&#x27;t know about you, but I think we&#x27;ve just hit a jackpot!&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s quite heavy though, so I will add it behind a feature gate, and users that want it may opt into it:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[features]
patch-nops = [&amp;quot;iced-x86&amp;quot;]

[dependencies]
iced-x86 = { version = &amp;quot;1.10.3&amp;quot;, optional = true }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can make use of it with &lt;code&gt;cargo run --features=patch-nops&lt;&#x2F;code&gt;. I don&#x27;t want to turn this blog post into a tutorial for &lt;code&gt;iced-x86&lt;&#x2F;code&gt;, but in essence, we need to make use of its &lt;code&gt;Decoder&lt;&#x2F;code&gt;. Here&#x27;s the plan:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Find the memory region corresponding to the address we want to patch.&lt;&#x2F;li&gt;
&lt;li&gt;Read the entire region.&lt;&#x2F;li&gt;
&lt;li&gt;Decode the read bytes until the instruction pointer reaches our address.&lt;&#x2F;li&gt;
&lt;li&gt;Because we just parsed the previous instruction, we know its length, and can be replaced with NOPs.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[cfg(feature = &amp;quot;patch-nops&amp;quot;)]
pub fn nop_last_instruction(&amp;amp;self, addr: usize) -&amp;gt; io::Result&amp;lt;()&amp;gt; {
    use iced_x86::{Decoder, DecoderOptions, Formatter, Instruction, NasmFormatter};

    let region = self
        .memory_regions()
        .into_iter()
        .find(|region| {
            let base = region.BaseAddress as usize;
            base &amp;lt;= addr &amp;amp;&amp;amp; addr &amp;lt; base + region.RegionSize
        })
        .ok_or_else(|| io::Error::new(io::ErrorKind::Other, &amp;quot;no matching region found&amp;quot;))?;

    let bytes = self.read_memory(region.BaseAddress as usize, region.RegionSize)?;

    let mut decoder = Decoder::new(64, &amp;amp;bytes, DecoderOptions::NONE);
    decoder.set_ip(region.BaseAddress as _);

    let mut instruction = Instruction::default();
    while decoder.can_decode() {
        decoder.decode_out(&amp;amp;mut instruction);
        if instruction.next_ip() as usize == addr {
            return self
                .write_memory(instruction.ip() as usize, &amp;amp;vec![0x90; instruction.len()])
                .map(drop);
        }
    }

    Err(io::Error::new(
        io::ErrorKind::Other,
        &amp;quot;no matching instruction found&amp;quot;,
    ))
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty straightforward! We can set the &amp;quot;instruction pointer&amp;quot; of the decoder so that it matches with the address we&#x27;re reading from. The &lt;code&gt;next_ip&lt;&#x2F;code&gt; method comes in really handy. Overall, it&#x27;s a bit inefficient, because we could reuse the regions retrieved previously, but other than that, there is not much room for improvement.&lt;&#x2F;p&gt;
&lt;p&gt;With this, we are no longer hardcoding the instruction size or guessing which instruction is doing what. You may wonder, what if the region does not start with valid executable code? It could be possible that the instructions are in some memory region with garbage except for a very specific location with real code. I don&#x27;t know how Cheat Engine handles this, but I think it&#x27;s reasonable to assume that the region starts with valid code.&lt;&#x2F;p&gt;
&lt;p&gt;As far as I can tell (after having asked a bit around), the encoding is usually self synchronizing (similar to UTF-8), so eventually we should end up with correct instructions. But someone can still intentionally write real code between garbage data which we would then disassemble incorrectly. This is a problem on all variable-length ISAs. Half a solution is to &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;3983735&#x2F;&quot;&gt;start at the entry point&lt;&#x2F;a&gt;, decode all instructions, and follow the jumps. The other half would be correctly identifying jumps created just to trip a disassembler up, and jumps pointing to dynamically-calculated addresses!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;That was quite a deep dive! We have learnt about the existence of the various breakpoint types (software, hardware, and even behaviour, such as watchpoints), how to debug a separate process, and how to correctly update the code other process is running on-the-fly. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;code for this post&lt;&#x2F;a&gt; is available over at my GitHub. You can run &lt;code&gt;git checkout step5&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code.&lt;&#x2F;p&gt;
&lt;p&gt;Although we&#x27;ve only talked about &lt;em&gt;setting&lt;&#x2F;em&gt; breakpoints, there are of course &lt;a href=&quot;https:&#x2F;&#x2F;reverseengineering.stackexchange.com&#x2F;a&#x2F;16547&quot;&gt;ways of detecting them&lt;&#x2F;a&gt;. There&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.codeproject.com&#x2F;Articles&#x2F;30815&#x2F;An-Anti-Reverse-Engineering-Guide&quot;&gt;entire guides about it&lt;&#x2F;a&gt;. Again, we currently hardcode the fact we want to add a single watchpoint using the first debug register. A proper solution here would be to actually calculate the needs that need to be set, as well as keeping track of how many breakpoints have been added so far.&lt;&#x2F;p&gt;
&lt;p&gt;Hardware breakpoints are also limited, since they&#x27;re simply a bunch of registers, and our machine does not have infinite registers. How are other debuggers like &lt;code&gt;gdb&lt;&#x2F;code&gt; able to create a seemingly unlimited amount of breakpoints? Well, the GDB wiki actually has a page on &lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;gdb&#x2F;wiki&#x2F;Internals%20Watchpoints&quot;&gt;Internals Watchpoints&lt;&#x2F;a&gt;, and it&#x27;s really interesting! &lt;code&gt;gdb&lt;&#x2F;code&gt; essentially single-steps through the entire program and tests the expressions after every instruction:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software watchpoints are very slow, since GDB needs to single-step the program being debugged and test the value of the watched expression(s) after each instruction.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;However, that&#x27;s not the only way. One could &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;7805842&#x2F;&quot;&gt;change the protection level&lt;&#x2F;a&gt; of the region of interest (for example, remove the write permission), and when the program tries to write there, it will fail! In any case, the GDB wiki is actually a pretty nice resource. It also has a section on &lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;gdb&#x2F;wiki&#x2F;Internals&#x2F;Breakpoint%20Handling&quot;&gt;Breakpoint Handling&lt;&#x2F;a&gt;, which contains some additional insight.&lt;&#x2F;p&gt;
&lt;p&gt;With regards to code improvements, &lt;code&gt;DebugToken::wait_event&lt;&#x2F;code&gt; could definitely be both nicer and safer to use, with a custom &lt;code&gt;enum&lt;&#x2F;code&gt;, so the user does not need to rely on magic constants or having to resort to &lt;code&gt;unsafe&lt;&#x2F;code&gt; access to get the right &lt;code&gt;union&lt;&#x2F;code&gt; variant.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the sixth step of the tutorial: Pointers. It reuses the debugging techniques presented here to backtrack where the pointer for our desired value is coming from, so here we will need to actually &lt;em&gt;understand&lt;&#x2F;em&gt; what the instructions are doing, not just patching them out!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I&#x27;m not super happy about the design of it all, but we won&#x27;t actually need anything beyond scanning for integers for the rest of the steps so it doesn&#x27;t really matter.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;There seems to be a way to pause the entire process in one go, with the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;4062698&#x2F;&quot;&gt;undocumented &lt;code&gt;NtSuspendProcess&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;It really is called that. The naming went from &amp;quot;IP&amp;quot; (instruction pointer, 16 bits), to &amp;quot;EIP&amp;quot; (extended instruction pointer, 32 bits) and currently &amp;quot;RIP&amp;quot; (64 bits). The naming convention for upgraded registers is the same (RAX, RBX, RCX, and so on). The &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;CPU_Registers_x86_64&quot;&gt;OS Dev wiki&lt;&#x2F;a&gt; is a great resource for this kind of stuff.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Well, we don&#x27;t need an entire disassembler. Knowing the length of each instruction is enough, but that on its own is also a lot of work.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Floating points</title>
		<published>2021-02-28T00:00:00+00:00</published>
		<updated>2021-02-28T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-4/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-4/</id>
		<content type="html">&lt;p&gt;This is part 4 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 4: Floating points&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 3 we did a fair amount of plumbing in order to support scan modes beyond the trivial &amp;quot;exact value scan&amp;quot;. As a result, we have abstracted away the &lt;code&gt;Scan&lt;&#x2F;code&gt;, &lt;code&gt;CandidateLocations&lt;&#x2F;code&gt; and &lt;code&gt;Value&lt;&#x2F;code&gt; types as a separate &lt;code&gt;enum&lt;&#x2F;code&gt; each. Scanning for changed memory regions in an opened process can now be achieved with three lines of code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let regions = process.memory_regions();
let first_scan = process.scan_regions(&amp;amp;regions, Scan::InRange(0, 500));
let second_scan = process.rescan_regions(&amp;amp;first_scan, Scan::DecreasedBy(7));
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;How&#x27;s that for programmability? No need to fire up Cheat Engine&#x27;s GUI anymore!&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;first_scan&lt;&#x2F;code&gt; in the example above remembers all the found &lt;code&gt;Value&lt;&#x2F;code&gt; within the range specified by &lt;code&gt;Scan&lt;&#x2F;code&gt;. Up until now, we have only worked with &lt;code&gt;i32&lt;&#x2F;code&gt;, so that&#x27;s the type the scans expect and what they work with.&lt;&#x2F;p&gt;
&lt;p&gt;Now it&#x27;s time to introduce support for different types, like &lt;code&gt;f32&lt;&#x2F;code&gt;, &lt;code&gt;i64&lt;&#x2F;code&gt;, or even more atypical ones, like arbitrary sequences of bytes (think of strings) or even numbers in big-endian.&lt;&#x2F;p&gt;
&lt;p&gt;Tighten your belt, because this post is quite the ride. Let&#x27;s get right into it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;floating-points&quot;&gt;Floating points&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 4&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;In the previous tutorial we used bytes to scan, but some games store information in so called &#x27;floating point&#x27; notations.
(probably to prevent simple memory scanners from finding it the easy way). A floating point is a value with some digits behind the point. (like 5.12 or 11321.1)&lt;&#x2F;p&gt;
&lt;p&gt;Below you see your health and ammo. Both are stored as Floating point notations, but health is stored as a float and ammo is stored as a double.
Click on hit me to lose some health, and on shoot to decrease your ammo with 0.5&lt;&#x2F;p&gt;
&lt;p&gt;You have to set BOTH values to 5000 or higher to proceed.&lt;&#x2F;p&gt;
&lt;p&gt;Exact value scan will work fine here, but you may want to experiment with other types too.&lt;&#x2F;p&gt;
&lt;p&gt;Hint: It is recommended to disable &amp;quot;Fast Scan&amp;quot; for type double&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;generic-values&quot;&gt;Generic values&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;Value&lt;&#x2F;code&gt; enumeration holds scanned values, and is currently hardcoded to store &lt;code&gt;i32&lt;&#x2F;code&gt;. The &lt;code&gt;Scan&lt;&#x2F;code&gt; type also holds a value, the value we want to scan for. Changing it to support other types is trivial:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Scan&amp;lt;T&amp;gt; {
    Exact(T),
    Unknown,
    Decreased,
    &#x2F;&#x2F; ...other variants...
}

pub enum Value&amp;lt;T&amp;gt; {
    Exact(T),
    AnyWithin(Vec&amp;lt;u8&amp;gt;),
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;AnyWithin&lt;&#x2F;code&gt; is the raw memory, and &lt;code&gt;T&lt;&#x2F;code&gt; can be interpreted from any sequence of bytes thanks to our friend &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;mem&#x2F;fn.transmute.html&quot;&gt;&lt;code&gt;mem::transmute&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This change alone is enough to store an arbitrary &lt;code&gt;T&lt;&#x2F;code&gt;! So we&#x27;re done now? Not really, no.&lt;&#x2F;p&gt;
&lt;p&gt;First of all, we need to update all the places where &lt;code&gt;Scan&lt;&#x2F;code&gt; or &lt;code&gt;Value&lt;&#x2F;code&gt; are used. Our first stop is the scanned &lt;code&gt;Region&lt;&#x2F;code&gt;, which holds the found &lt;code&gt;Value&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub struct Region&amp;lt;T&amp;gt; {
    pub info: MEMORY_BASIC_INFORMATION,
    pub locations: CandidateLocations,
    pub value: Value&amp;lt;T&amp;gt;,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, we need to update everywhere &lt;code&gt;Region&lt;&#x2F;code&gt; is used, and on and on… All in all this process is just repeating &lt;code&gt;cargo check&lt;&#x2F;code&gt;, letting the compiler vent on you, and taking good care of it by fixing the errors. It&#x27;s quite reassuring to know you will not miss a single place. Thank you, compiler!&lt;&#x2F;p&gt;
&lt;p&gt;But wait, how could scanning for a decreased value work for any &lt;code&gt;T&lt;&#x2F;code&gt;? The type is not &lt;code&gt;Ord&lt;&#x2F;code&gt;, we should add some trait bounds. And also, what happens if the type is not &lt;code&gt;Copy&lt;&#x2F;code&gt;? It could implement &lt;code&gt;Drop&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, and we will be transmuting from raw bytes, which would trigger the &lt;code&gt;Drop&lt;&#x2F;code&gt; implementation when we&#x27;re done with the value! Not memory safe at all! And how could we possibly cast raw memory to the type without knowing its siz– oh nevermind, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;marker&#x2F;trait.Sized.html&quot;&gt;&lt;code&gt;T&lt;&#x2F;code&gt; is already &lt;code&gt;Sized&lt;&#x2F;code&gt; by default&lt;&#x2F;a&gt;. But anyway, we need the other bounds.&lt;&#x2F;p&gt;
&lt;p&gt;In order to not repeat ourselves, we will implement a new &lt;code&gt;trait&lt;&#x2F;code&gt;, let&#x27;s say &lt;code&gt;Scannable&lt;&#x2F;code&gt;, which requires all other bounds:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub trait Scannable: Copy + PartialEq + PartialOrd {}

impl&amp;lt;T: Copy + PartialEq + PartialOrd&amp;gt; Scannable for T {}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And fix our definitions:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Scan&amp;lt;T: Scannable&amp;gt; { ... }
pub enum Value&amp;lt;T: Scannable&amp;gt; { ... }
pub struct Region&amp;lt;T: Scannable&amp;gt; { ... }

&#x2F;&#x2F; ...and the many other places referring to T
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every type which is &lt;code&gt;Copy&lt;&#x2F;code&gt;, &lt;code&gt;PartialEq&lt;&#x2F;code&gt; and &lt;code&gt;PartialOrd&lt;&#x2F;code&gt; can be scanned over&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, because we &lt;code&gt;impl Scan for T&lt;&#x2F;code&gt; where the bounds are met. Unfortunately, we cannot require &lt;code&gt;Eq&lt;&#x2F;code&gt; or &lt;code&gt;Ord&lt;&#x2F;code&gt; because the floating point types do not implement it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;transmuting-memory&quot;&gt;Transmuting memory&lt;&#x2F;h2&gt;
&lt;p&gt;Also known as reinterpreting a bunch of bytes as something else, or perhaps it stands for &amp;quot;summoning the demon&amp;quot;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;transmute&lt;&#x2F;code&gt; is &lt;strong&gt;incredibly&lt;&#x2F;strong&gt; unsafe. There are a vast number of ways to cause &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;reference&#x2F;behavior-considered-undefined.html&quot;&gt;undefined behavior&lt;&#x2F;a&gt; with this function. &lt;code&gt;transmute&lt;&#x2F;code&gt; should be the absolute last resort.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Types like &lt;code&gt;i32&lt;&#x2F;code&gt; define methods such as &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;primitive.i32.html#method.from_ne_bytes&quot;&gt;&lt;code&gt;from_ne_bytes&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;primitive.i32.html#method.to_ne_bytes&quot;&gt;&lt;code&gt;to_ne_bytes&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which convert raw bytes from and into its native representation. This is all really nice, but unfortunately, there&#x27;s no standard trait in the Rust&#x27;s standard library to &amp;quot;interpret a type &lt;code&gt;T&lt;&#x2F;code&gt; as the byte sequence of its native representation&amp;quot;. &lt;code&gt;transmute&lt;&#x2F;code&gt;, however, does exist, and similar to any other &lt;code&gt;unsafe&lt;&#x2F;code&gt; function, it&#x27;s safe to call &lt;strong&gt;as long as we respect its invariants&lt;&#x2F;strong&gt;. What are these invariants&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both types must have the same size&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, we can just assert that the window length matches the type&#x27;s length. What else?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Neither the original, nor the result, may be an &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;what-unsafe-does.html&quot;&gt;invalid value&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What&#x27;s an invalid value?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;bool&lt;&#x2F;code&gt; that isn&#x27;t 0 or 1&lt;&#x2F;li&gt;
&lt;li&gt;an &lt;code&gt;enum&lt;&#x2F;code&gt; with an invalid discriminant&lt;&#x2F;li&gt;
&lt;li&gt;a null &lt;code&gt;fn&lt;&#x2F;code&gt; pointer&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;char&lt;&#x2F;code&gt; outside the ranges [0x0, 0xD7FF] and [0xE000, 0x10FFFF]&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;code&gt;!&lt;&#x2F;code&gt; (all values are invalid for this type)&lt;&#x2F;li&gt;
&lt;li&gt;an integer (&lt;code&gt;i*&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;u*&lt;&#x2F;code&gt;), floating point value (&lt;code&gt;f*&lt;&#x2F;code&gt;), or raw pointer read from uninitialized memory, or uninitialized memory in a &lt;code&gt;str&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;a reference&#x2F;&lt;code&gt;Box&lt;&#x2F;code&gt; that is dangling, unaligned, or points to an invalid value.&lt;&#x2F;li&gt;
&lt;li&gt;a wide reference, &lt;code&gt;Box&lt;&#x2F;code&gt;, or raw pointer that has invalid metadata:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dyn Trait&lt;&#x2F;code&gt; metadata is invalid if it is not a pointer to a vtable for &lt;code&gt;Trait&lt;&#x2F;code&gt; that matches the actual dynamic trait the pointer or reference points to&lt;&#x2F;li&gt;
&lt;li&gt;slice metadata is invalid if the length is not a valid &lt;code&gt;usize&lt;&#x2F;code&gt; (i.e., it must not be read from uninitialized memory)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;a type with custom invalid values that is one of those values, such as a &lt;code&gt;NonNull&lt;&#x2F;code&gt; that is null. (Requesting custom invalid values is an unstable feature, but some stable libstd types, like &lt;code&gt;NonNull&lt;&#x2F;code&gt;, make use of it.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Okay, that&#x27;s actually an awful lot. Types like &lt;code&gt;bool&lt;&#x2F;code&gt; implement all the trait bounds we defined, and it would be insta-UB to ever try to cast them from arbitrary bytes. The same goes for &lt;code&gt;char&lt;&#x2F;code&gt;, and all &lt;code&gt;enum&lt;&#x2F;code&gt; are out of our control, too. At least we&#x27;re safe on the &amp;quot;memory is initialized&amp;quot; front.&lt;&#x2F;p&gt;
&lt;p&gt;Dang it, I really wanted to use &lt;code&gt;transmute&lt;&#x2F;code&gt;! But if we were to use it for arbitrary types, it would trigger undefined behaviour sooner than later.&lt;&#x2F;p&gt;
&lt;p&gt;We have several options here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make it an &lt;code&gt;unsafe trait&lt;&#x2F;code&gt;. Implementors will be responsible for ensuring that the type they&#x27;re implementing it for can be safely transmuted from and into.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;future-proofing.html&quot;&gt;Seal the &lt;code&gt;trait&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and implement it only for types we know are safe&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, like &lt;code&gt;i32&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add methods to the &lt;code&gt;trait&lt;&#x2F;code&gt; definition that do the conversion of the type into its native representation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will go with the first option&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, because I really want to use &lt;code&gt;transmute&lt;&#x2F;code&gt;, and I want users to be able to implement the trait on their own types.&lt;&#x2F;p&gt;
&lt;p&gt;In any case, we need to change our &lt;code&gt;impl&lt;&#x2F;code&gt; to something more specific, in order to prevent it from automatically implementing the trait for types for which their memory representation has invalid values. So we get rid of this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub trait Scannable: Copy + PartialEq + PartialOrd {}

impl&amp;lt;T: Copy + PartialEq + PartialOrd&amp;gt; Scannable for T {}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And replace it with this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub unsafe trait Scannable: Copy + PartialEq + PartialOrd {}

macro_rules! impl_many {
    ( unsafe impl $trait:tt for $( $ty:ty ),* ) =&amp;gt; {
        $( unsafe impl $trait for $ty {} )*
    };
}

&#x2F;&#x2F; SAFETY: all these types respect `Scannable` invariants.
impl_many!(unsafe impl Scannable for i8, u8, i16, u16, i32, u32, i64, u64, f32, f64);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Making a small macro for things like these is super useful. You could of course write &lt;code&gt;unsafe impl Scannable for T&lt;&#x2F;code&gt; for all ten &lt;code&gt;T&lt;&#x2F;code&gt; as well, but that introduces even more &lt;code&gt;unsafe&lt;&#x2F;code&gt; to read. Last but not least, let&#x27;s replace the hardcoded &lt;code&gt;i32::from_ne_bytes&lt;&#x2F;code&gt; and &lt;code&gt;i32::to_ne_bytes&lt;&#x2F;code&gt; with &lt;code&gt;mem::transmute&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All the &lt;code&gt;windows(4)&lt;&#x2F;code&gt; need to be replaced with &lt;code&gt;windows(mem::size_of::&amp;lt;T&amp;gt;())&lt;&#x2F;code&gt; because the size may no longer be &lt;code&gt;4&lt;&#x2F;code&gt;. All the &lt;code&gt;i32::from_ne_bytes(...)&lt;&#x2F;code&gt; need to be replaced with &lt;code&gt;mem::transmute::&amp;lt;_, T&amp;gt;(...)&lt;&#x2F;code&gt;. We explicitly write out &lt;code&gt;T&lt;&#x2F;code&gt; to make sure the compiler doesn&#x27;t accidentally infer something we didn&#x27;t intend.&lt;&#x2F;p&gt;
&lt;p&gt;And… it doesn&#x27;t work at all. We&#x27;re working with byte slices of arbitrary length. We cannot transmute a &lt;code&gt;&amp;amp;[]&lt;&#x2F;code&gt; type, which is 16 bytes (8 for the pointer and 8 for the length), to our &lt;code&gt;T&lt;&#x2F;code&gt;. My plan to use transmute can&#x27;t possibly work here. Sigh.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;not-quite-transmuting-memory&quot;&gt;Not quite transmuting memory&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, we can&#x27;t transmute, because we don&#x27;t have a sized value, we only have a slice of bytes pointing somewhere else. What we &lt;em&gt;could&lt;&#x2F;em&gt; do is reinterpret the pointer to those bytes as a different type, and then dereference it! This is still a form of &amp;quot;transmutation&amp;quot;, just without using &lt;code&gt;transmute&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let value = unsafe { *(window.as_ptr() as *const T) };
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Woop! You can compile this and test it out on the step 2 and 3 of the tutorial, using &lt;code&gt;i32&lt;&#x2F;code&gt;, and it will still work! Something troubles me, though. Can you see what it is?&lt;&#x2F;p&gt;
&lt;p&gt;When we talked about invalid values, it had a note about unaligned references:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;a reference&#x2F;&lt;code&gt;Box&lt;&#x2F;code&gt; that is dangling, unaligned, or points to an invalid value.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Our &lt;code&gt;window&lt;&#x2F;code&gt; is essentially a reference to &lt;code&gt;T&lt;&#x2F;code&gt;. The only difference is we&#x27;re working at the pointer level, but they&#x27;re pretty much references. Let&#x27;s see what the documentation for &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.pointer.html&quot;&gt;&lt;code&gt;pointer&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; has to say as well, since we&#x27;re dereferencing pointers:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;when a raw pointer is dereferenced (using the &lt;code&gt;*&lt;&#x2F;code&gt; operator), it must be non-null and aligned.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It must be aligned. The only reason why our data is aligned is because we are also performing a &amp;quot;fast scan&amp;quot;, so we only look at aligned locations. This is a time bomb waiting to blow up. Is there any other way to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ptr&#x2F;fn.read.html&quot;&gt;&lt;code&gt;read&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; from a pointer which is safer?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;src&lt;&#x2F;code&gt; must be properly aligned. Use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ptr&#x2F;fn.read_unaligned.html&quot;&gt;&lt;code&gt;read_unaligned&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; if this is not the case.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Bingo! Both &lt;code&gt;read&lt;&#x2F;code&gt; and &lt;code&gt;read_unaligned&lt;&#x2F;code&gt;, unlike dereferencing the pointer, will perform a copy, but if it can make the code less prone to blowing up, I&#x27;ll take it&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Let&#x27;s change the code one more time:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let current = unsafe { window.as_ptr().cast::&amp;lt;T&amp;gt;().read_unaligned() };
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I prefer to avoid type annotations in variables where possible, which is why I use the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;3fimgp&#x2F;why_double_colon_rather_that_dot&#x2F;ctozkd0&#x2F;&quot;&gt;turbofish&lt;&#x2F;a&gt; so often. You can get rid of the cast and use a type annotation instead, but make sure the type is known, otherwise it will think it&#x27;s &lt;code&gt;u8&lt;&#x2F;code&gt; because &lt;code&gt;window&lt;&#x2F;code&gt; is a &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now, this is all cool and good. You can replace &lt;code&gt;i32&lt;&#x2F;code&gt; with &lt;code&gt;f32&lt;&#x2F;code&gt; for &lt;code&gt;T&lt;&#x2F;code&gt; and you&#x27;ll be able to get halfway done with the step 4 of Cheat Engine&#x27;s tutorial. Unfortunately, as it is, this code is not enough to complete step 4 with exact scans&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. You see, comparing floating point values is not as simple as checking for bitwise equality. We were actually really lucky that the &lt;code&gt;f32&lt;&#x2F;code&gt; part works! But the values in the &lt;code&gt;f64&lt;&#x2F;code&gt; part are not as precise as our inputs, so our exact scan fails.&lt;&#x2F;p&gt;
&lt;p&gt;Using a fixed type parameter is pretty limiting as well. On the one hand, it is nice that, if you scan for &lt;code&gt;i32&lt;&#x2F;code&gt;, the compiler statically guarantees that subsequent scans will also happen on &lt;code&gt;i32&lt;&#x2F;code&gt; and thus be compatible. On the other, this requires us to know the type at compile time, which for an interactive program, is not possible. While we &lt;em&gt;could&lt;&#x2F;em&gt; create different methods for each supported type and, at runtime, decide to which we should jump, I am not satisfied with that solution. It also means we can&#x27;t switch from scanning an &lt;code&gt;u32&lt;&#x2F;code&gt; to an &lt;code&gt;i32&lt;&#x2F;code&gt;, for whatever reason.&lt;&#x2F;p&gt;
&lt;p&gt;So we need to work around this once more.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rethinking-the-scans&quot;&gt;Rethinking the scans&lt;&#x2F;h2&gt;
&lt;p&gt;What does our scanning function need, really? It needs a way to compare two chunks of memory as being equal or not (as we have seen, this isn&#x27;t trivial with types such as floating point numbers) and, for other types of scans, it needs to be able to produce an ordering, or calculate a difference.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of having a our trait require the bounds &lt;code&gt;PartialEq&lt;&#x2F;code&gt; and &lt;code&gt;PartialOrd&lt;&#x2F;code&gt;, we can define our own methods to compare &lt;code&gt;Self&lt;&#x2F;code&gt; with &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;. It still should be &lt;code&gt;Clone&lt;&#x2F;code&gt;, so we can pass it around without worrying about lifetimes:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&#x2F;&#x2F; Callers must `assert_eq!(memory.len(), mem::size_of::&amp;lt;Self&amp;gt;())`.
unsafe fn eq(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; bool;
unsafe fn cmp(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; Ordering;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be trivially implemented for all integer types:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;macro_rules! impl_scannable_for_int {
    ( $( $ty:ty ),* ) =&amp;gt; {
        $(
            &#x2F;&#x2F; SAFETY: caller is responsible to `assert_eq!(memory.len(), mem::size_of::&amp;lt;T&amp;gt;())`
            impl Scannable for $ty {
                unsafe fn eq(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; bool {
                    let other = unsafe { memory.as_ptr().cast::&amp;lt;$ty&amp;gt;().read_unaligned() };
                    *self == other
                }

                unsafe fn cmp(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; Ordering {
                    let other = unsafe { memory.as_ptr().cast::&amp;lt;$ty&amp;gt;().read_unaligned() };
                    &amp;lt;$ty as Ord&amp;gt;::cmp(self, &amp;amp;other)
                }
            }
        )*
    };
}

impl_scannable_for_int!(i8, u8, i16, u16, i32, u32, i64, u64);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The funny &lt;code&gt;&amp;lt;$ty as Ord&amp;gt;&lt;&#x2F;code&gt; is because I decided to call the method &lt;code&gt;Scannable::cmp&lt;&#x2F;code&gt;, so I have to disambiguate between it and &lt;code&gt;Ord::cmp&lt;&#x2F;code&gt;. We can go ahead and update the code using &lt;code&gt;Scannable&lt;&#x2F;code&gt; to use these new functions instead.&lt;&#x2F;p&gt;
&lt;p&gt;Now, you may have noticed I only implemented it for the integer types. That&#x27;s because floats need some extra care. Unfortunately, floating point types do not have any form of &amp;quot;precision&amp;quot; embedded in them, so we can&#x27;t accurately say &amp;quot;compare these floats to the precision level the user specified&amp;quot;. What we can do, however, is drop a few bits from the mantissa, so &amp;quot;relatively close&amp;quot; quantities are considered equal. It&#x27;s definitely not as good as comparing floats to the user&#x27;s precision, but it will get the job done.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m going to arbitrarily say that we are okay comparing with &amp;quot;half&amp;quot; the precision. We can achieve that by masking half of the bits from the mantissa to zero:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;
macro_rules! impl_scannable_for_float {
    ( $( $ty:ty : $int_ty:ty ),* ) =&amp;gt; {
        $(
            #[allow(unused_unsafe)] &#x2F;&#x2F; mind you, it is necessary
            impl Scannable for $ty {
                unsafe fn eq(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; bool {
                    const MASK: $int_ty = !((1 &amp;lt;&amp;lt; (&amp;lt;$ty&amp;gt;::MANTISSA_DIGITS &#x2F; 2)) - 1);

                    &#x2F;&#x2F; SAFETY: caller is responsible to `assert_eq!(memory.len(), mem::size_of::&amp;lt;T&amp;gt;())`
                    let other = unsafe { memory.as_ptr().cast::&amp;lt;$ty&amp;gt;().read_unaligned() };
                    let left = &amp;lt;$ty&amp;gt;::from_bits(self.to_bits() &amp;amp; MASK);
                    let right = &amp;lt;$ty&amp;gt;::from_bits(other.to_bits() &amp;amp; MASK);
                    left == right
                }

                ...
            }
        )*
    };
}

impl_scannable_for_float!(f32: u32, f64: u64);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may be wondering what&#x27;s up with that weird &lt;code&gt;MASK&lt;&#x2F;code&gt;. Let&#x27;s visualize it with a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bfloat16_floating-point_format&quot;&gt;&lt;code&gt;f16&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. This type has 16 bits, 1 for sign, 5 for exponent, and 10 for the mantissa:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;S EEEEE MMMMMMMMMM
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we substitute the constant with the numeric value and operate:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;!((1 &amp;lt;&amp;lt; (10 &#x2F; 2)) - 1)
!((1 &amp;lt;&amp;lt; 5) - 1)
!(0b00000000_00100000 - 1)
!(0b00000000_00011111)
0b11111111_11100000
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So effectively, half of the mantisssa bit will be masked to 0. For the &lt;code&gt;f16&lt;&#x2F;code&gt; example, this makes us lose 5 bits of precision. Comparing two floating point values with their last five bits truncated is equivalent to checking if they are &amp;quot;roughly equal&amp;quot;!&lt;&#x2F;p&gt;
&lt;p&gt;When Cheat Engine scans for floating point values, several additional settings show, and one such option is &amp;quot;truncated&amp;quot;. I do not know if it behaves like this, but it might.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try this out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[test]
fn f32_roughly_eq() {
    let left = 0.25f32;
    let right = 0.25000123f32;
    let memory = unsafe { mem::transmute::&amp;lt;_, [u8; 4]&amp;gt;(right) };
    assert_ne!(left, right);
    assert!(unsafe { Scannable::eq(&amp;amp;left, &amp;amp;memory) });
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo test f32_roughly_eq

running 1 test
test scan::candidate_location_tests::f32_roughly_eq ... ok
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Huzzah! The &lt;code&gt;assert_ne!&lt;&#x2F;code&gt; makes sure that a normal comparision would fail, and then we &lt;code&gt;assert!&lt;&#x2F;code&gt; that our custom one passes the test. When the user performs an exact scan, the code will be more tolerant to the user&#x27;s less precise inputs, which overall should result in a nicer experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamically-sized-scans&quot;&gt;Dynamically sized scans&lt;&#x2F;h2&gt;
&lt;p&gt;The second problem we need to solve is the possibility of the size not being known at compile time&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. While we can go as far as scanning over strings of a known length, this is rather limiting, because we need to know the length at compile time&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Heap allocated objects are another problem, because we don&#x27;t want to compare the memory representation of the stack object, but likely the memory where they point to (such as &lt;code&gt;String&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Instead of using &lt;code&gt;mem::size_of&lt;&#x2F;code&gt;, we can add a new method to our &lt;code&gt;Scannable&lt;&#x2F;code&gt;, &lt;code&gt;size&lt;&#x2F;code&gt;, which will tell us the size required of the memory view we&#x27;re comparing against:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;unsafe impl Scannable {
    ...

    fn size(&amp;amp;self) -&amp;gt; usize;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is &lt;code&gt;unsafe&lt;&#x2F;code&gt; to implement, because we are relying on the returned value to be truthful and unchanging. It should be safe to call, because it cannot have any invariants. Unfortunately, signaling &amp;quot;unsafe to implement&amp;quot; is done by marking the entire trait as &lt;code&gt;unsafe&lt;&#x2F;code&gt;, since &amp;quot;unsafe to call&amp;quot; is reserved for &lt;code&gt;unsafe fn&lt;&#x2F;code&gt;, and even though the rest of methods are not necessarily unsafe to implement, they&#x27;re treated as such.&lt;&#x2F;p&gt;
&lt;p&gt;At the moment, &lt;code&gt;Scannable&lt;&#x2F;code&gt; cannot be made into a trait object because it is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;error-index.html#E0038&quot;&gt;not object safe&lt;&#x2F;a&gt;. This is caused by the &lt;code&gt;Clone&lt;&#x2F;code&gt; requirement on all &lt;code&gt;Scannable&lt;&#x2F;code&gt; object, which in turn needs the types to be &lt;code&gt;Sized&lt;&#x2F;code&gt; because &lt;code&gt;clone&lt;&#x2F;code&gt; returns &lt;code&gt;Self&lt;&#x2F;code&gt;. Because of this, the size must be known.&lt;&#x2F;p&gt;
&lt;p&gt;However, we &lt;em&gt;can&lt;&#x2F;em&gt; move the &lt;code&gt;Clone&lt;&#x2F;code&gt; requirement to the methods that need it! This way, &lt;code&gt;Scannable&lt;&#x2F;code&gt; can remain object safe, enabling us to do the following:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;unsafe impl&amp;lt;T: AsRef&amp;lt;dyn Scannable&amp;gt; + AsMut&amp;lt;dyn Scannable&amp;gt;&amp;gt; Scannable for T {
    unsafe fn eq(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; bool {
        self.as_ref().eq(memory)
    }

    unsafe fn cmp(&amp;amp;self, memory: &amp;amp;[u8]) -&amp;gt; Ordering {
        self.as_ref().cmp(memory)
    }

    fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8] {
        self.as_ref().mem_view()
    }

    fn size(&amp;amp;self) -&amp;gt; usize {
        self.as_ref().size()
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any type which can be interpreted as a reference to &lt;code&gt;Scannable&lt;&#x2F;code&gt; is also a scannable! This enables us to perform scans over &lt;code&gt;Box&amp;lt;dyn i32&amp;gt;&lt;&#x2F;code&gt;, where the type is known at runtime! Or rather, it would, if &lt;code&gt;Box&amp;lt;dyn T&amp;gt;&lt;&#x2F;code&gt; implemented &lt;code&gt;Clone&lt;&#x2F;code&gt;, which it can&#x27;t&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#10&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; because that&#x27;s what prompted this entire issue. Dang it! I can&#x27;t catch a breath today!&lt;&#x2F;p&gt;
&lt;p&gt;Okay, let&#x27;s step back. Why did we need our scannables to be clone in the first place? When we perform exact scans, we store the original value in the region, which we don&#x27;t own, so we clone it. But what if we &lt;em&gt;did&lt;&#x2F;em&gt; own the value? Instead of taking the &lt;code&gt;Scan&lt;&#x2F;code&gt; by reference, which holds &lt;code&gt;T: Scannable&lt;&#x2F;code&gt;, we could take it by value. If we get rid of all the &lt;code&gt;Clone&lt;&#x2F;code&gt; bounds and update &lt;code&gt;Scan::run&lt;&#x2F;code&gt; to take &lt;code&gt;self&lt;&#x2F;code&gt;, along with updating all the things that take a &lt;code&gt;Region&lt;&#x2F;code&gt; to take them by value as well, it should all work out.&lt;&#x2F;p&gt;
&lt;p&gt;But it does not. If we take &lt;code&gt;Scan&lt;&#x2F;code&gt; by value, with it not being &lt;code&gt;Clone&lt;&#x2F;code&gt;, we simply can&#x27;t use it to scan over multiple regions. After the first region, we have lost the &lt;code&gt;Scan&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a second step back. We are scanning memory, and we want to compare memory, but we want to treat the memory with different semantics (for example, if we treat it as &lt;code&gt;f32&lt;&#x2F;code&gt;, we want to check for rough equality). Instead of storing the &lt;em&gt;value&lt;&#x2F;em&gt; itself, we could store its &lt;em&gt;memory representation&lt;&#x2F;em&gt;, and when we compare memory representations, we can do so under certain semantics.&lt;&#x2F;p&gt;
&lt;p&gt;First off, let&#x27;s revert getting rid of all &lt;code&gt;Clone&lt;&#x2F;code&gt;. Wherever we stored a &lt;code&gt;T&lt;&#x2F;code&gt;, we will now store a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt;. We will still use a type parameter to represent the &amp;quot;implementations of &lt;code&gt;Scannable&lt;&#x2F;code&gt;&amp;quot;. For this to work, our definitions need to use &lt;code&gt;T&lt;&#x2F;code&gt; somewhere, or else the compiler refuses to compile the code with error &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;error-index.html#E0392&quot;&gt;E0392&lt;&#x2F;a&gt;. For this, I will stick a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;marker&#x2F;struct.PhantomData.html&quot;&gt;&lt;code&gt;PhantomData&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; in the &lt;code&gt;Exact&lt;&#x2F;code&gt; variant. It&#x27;s a bit pointless to include it in all variants, and &lt;code&gt;Exact&lt;&#x2F;code&gt; seems the most appropriated:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Scan&amp;lt;T: Scannable&amp;gt; {
    Exact(Vec&amp;lt;u8&amp;gt;, PhantomData&amp;lt;T&amp;gt;),
    Unknown,
    ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This keeps in line with &lt;code&gt;Value&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Value&amp;lt;T: Scannable&amp;gt; {
    Exact(Vec&amp;lt;u8&amp;gt;, PhantomData&amp;lt;T&amp;gt;),
    ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;Scannable&lt;&#x2F;code&gt; will no longer work on &lt;code&gt;T&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;. Instead, it will work on two &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;. We will also need a way to interpret a &lt;code&gt;T&lt;&#x2F;code&gt; as &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;, which we can achieve with a new method, &lt;code&gt;mem_view&lt;&#x2F;code&gt;. This method interprets the raw memory representation of &lt;code&gt;self&lt;&#x2F;code&gt; as its raw bytes. It also lets us get rid of &lt;code&gt;size&lt;&#x2F;code&gt;, because we can simply do &lt;code&gt;mem_view().len()&lt;&#x2F;code&gt;. It&#x27;s still &lt;code&gt;unsafe&lt;&#x2F;code&gt; to implement, because it should return the same length every time:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub unsafe trait Scannable {
    &#x2F;&#x2F; Callers must `assert_eq!(left.len(), right.len(), self.mem_view().len())`.
    unsafe fn eq(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; bool;
    unsafe fn cmp(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; Ordering;
    fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8];
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But now we can&#x27;t use it in trait object, so the following no longer works:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;unsafe impl&amp;lt;T: AsRef&amp;lt;dyn Scannable&amp;gt; + AsMut&amp;lt;dyn Scannable&amp;gt;&amp;gt; Scannable for T {
    ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ugh! Well, to be fair, we no longer have a &amp;quot;scannable&amp;quot; at this point. It&#x27;s more like a scan mode that tells us how memory should be compared according to a certain type. Let&#x27;s split the trait into two: one for the scan mode, and other for &amp;quot;things which are scannable&amp;quot;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub trait ScanMode {
    unsafe fn eq(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; bool;
    unsafe fn cmp(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; Ordering;
}

pub unsafe trait Scannable {
    type Mode: ScanMode;

    fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8];
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we have an associated &lt;code&gt;type Mode&lt;&#x2F;code&gt; which contains the corresponding &lt;code&gt;ScanMode&lt;&#x2F;code&gt;. If we used a trait bound such as &lt;code&gt;Scannable: ScanMode&lt;&#x2F;code&gt;, we&#x27;d be back to square one: it would inherit the method definitions that don&#x27;t use &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; and thus cannot be used as trait objects.&lt;&#x2F;p&gt;
&lt;p&gt;With these changes, it is possible to implement &lt;code&gt;Scannable&lt;&#x2F;code&gt; for any &lt;code&gt;dyn Scannable&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;unsafe impl&amp;lt;T: ScanMode + AsRef&amp;lt;dyn Scannable&amp;lt;Mode = Self&amp;gt;&amp;gt;&amp;gt; Scannable for T {
    type Mode = Self;

    fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8] {
        self.as_ref().mem_view()
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We do have to adjust a few places of the code to account for both &lt;code&gt;Scannable&lt;&#x2F;code&gt; and &lt;code&gt;ScanMode&lt;&#x2F;code&gt;, but all in all, it&#x27;s pretty straightforward. Things like &lt;code&gt;Value&lt;&#x2F;code&gt; don&#x27;t need to store the &lt;code&gt;Scannable&lt;&#x2F;code&gt; anymore, just a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt;. It also doesn&#x27;t need the &lt;code&gt;ScanMode&lt;&#x2F;code&gt;, because it&#x27;s not going to be scanning anything on its own. This applies transitively to &lt;code&gt;Region&lt;&#x2F;code&gt; which was holding a &lt;code&gt;Value&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Value&lt;&#x2F;code&gt; &lt;em&gt;does&lt;&#x2F;em&gt; need to be updated to store the size of the region we are scanning for, however, because we need that information when running a subsequent scan. For all &lt;code&gt;Scan&lt;&#x2F;code&gt; that don&#x27;t have a explicit thing to scan for (like &lt;code&gt;Decreased&lt;&#x2F;code&gt;), the &lt;code&gt;size&lt;&#x2F;code&gt; also needs to be stored in them.&lt;&#x2F;p&gt;
&lt;p&gt;Despite all our efforts, we&#x27;re still unable to return an &lt;code&gt;Scannable&lt;&#x2F;code&gt; chosen at runtime.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn prompt_user_for_scan() -&amp;gt; Scan&amp;lt;Box&amp;lt;dyn Scannable&amp;lt;Mode = ???&amp;gt;&amp;gt;&amp;gt; {
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As far as I can tell, there&#x27;s simply no way to specify that type. We want to return a type which is scannable, which has itself (which is also a &lt;code&gt;ScanMode&lt;&#x2F;code&gt;) as the corresponding mode. Even if we just tried to return the mode, we simply can&#x27;t, because it&#x27;s not object-safe. Is this the end of the road?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;specifying-the-scan-mode&quot;&gt;Specifying the scan mode&lt;&#x2F;h2&gt;
&lt;p&gt;We need a way to pass an arbitrary scan mode to our &lt;code&gt;Scan&lt;&#x2F;code&gt;. This scan mode should go in tandem with &lt;code&gt;Scannable&lt;&#x2F;code&gt; types, because it would be unsafe otherwise. We&#x27;ve seen that using a type just doesn&#x27;t cut it. What else can we do?&lt;&#x2F;p&gt;
&lt;p&gt;Using an enumeration is a no-go, because I want users to be able to extend it further. I also would like to avoid having to update the &lt;code&gt;enum&lt;&#x2F;code&gt; and all the matches every time I come up with a different type combination. And it could get pretty complicated if I ever built something dynamically, such as letting the user combine different scans in one pass.&lt;&#x2F;p&gt;
&lt;p&gt;So what if we make &lt;code&gt;Scannable&lt;&#x2F;code&gt; return a value that implements the functions we need?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub struct ScanMode {
    eq: unsafe fn(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; bool,
    cmp: unsafe fn(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; Ordering,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s definitely… non-conventional. But hey, now we&#x27;re left with the &lt;code&gt;Scannable&lt;&#x2F;code&gt; trait, which is object-safe, and does not have any type parameters!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub unsafe trait Scannable {
    fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8];
    fn scan_mode(&amp;amp;self) -&amp;gt; ScanMode;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is a bit weird, but defining local functions and using those in the returned value is a nice way to keep things properly scoped:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;macro_rules! impl_scannable_for_int {
    ( $( $ty:ty ),* ) =&amp;gt; {
        $(
            unsafe impl Scannable for $ty {
                fn mem_view(&amp;amp;self) -&amp;gt; &amp;amp;[u8] {
                    unsafe { std::slice::from_raw_parts(self as *const _ as *const u8, mem::size_of::&amp;lt;$ty&amp;gt;()) }
                }

                fn scan_mode(&amp;amp;self) -&amp;gt; ScanMode {
                    unsafe fn eq(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; bool {
                        ...
                    }

                    unsafe fn cmp(left: &amp;amp;[u8], right: &amp;amp;[u8]) -&amp;gt; Ordering {
                        ...
                    }

                    ScanMode { eq, cmp }
                }
            }
        )*
    };
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our &lt;code&gt;Scan&lt;&#x2F;code&gt; needs to store the &lt;code&gt;Scannable&lt;&#x2F;code&gt; type, and not just the memory, once again. For variants that don&#x27;t need any value, they can store the &lt;code&gt;ScanMode&lt;&#x2F;code&gt; and size instead.&lt;&#x2F;p&gt;
&lt;p&gt;Does this solution work? Yes! It&#x27;s possible to return a &lt;code&gt;Box&amp;lt;dyn Scannable&amp;gt;&lt;&#x2F;code&gt; from a function, and underneath, it may be using any type which is &lt;code&gt;Scannable&lt;&#x2F;code&gt;. Is this the best solution? Well, that&#x27;s hard to say. This is &lt;em&gt;one&lt;&#x2F;em&gt; of the possible solutions.&lt;&#x2F;p&gt;
&lt;p&gt;We have been going around in circles for quite some time now, so I&#x27;ll leave it there. It&#x27;s a solution, which may not be pretty, but it works. With these changes, the code is capable of completing all of the steps in the Cheat Engine tutorial up until point!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;If there&#x27;s one lesson to learn from this post, it&#x27;s that there is often no single correct solution to a problem. We could have approached the scan types in many, many ways (and we tried quite a few!), but in the end, choosing one option or the other comes down to your (sometimes self-imposed) requirements.&lt;&#x2F;p&gt;
&lt;p&gt;You may &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;obtain the code for this post&lt;&#x2F;a&gt; over at my GitHub. You can run &lt;code&gt;git checkout step4&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code. The code has gone through a lot of iterations, and I&#x27;d still like to polish it a bit more, so it might slightly differ from the code presented in this entry.&lt;&#x2F;p&gt;
&lt;p&gt;If you feel adventurous, Cheat Engine has different options for scanning floating point types: &amp;quot;rounded (default)&amp;quot;, &amp;quot;rounded (extreme)&amp;quot;, and truncated. Optionally, it can scan for &amp;quot;simple values only&amp;quot;. You could go ahead and toy around with these!&lt;&#x2F;p&gt;
&lt;p&gt;We didn&#x27;t touch on types with different lengths, such as strings. You could support UTF-8, UTF-16, or arbitrary byte sequences. This post also didn&#x27;t cover scanning for multiple things at once, known as &amp;quot;groupscan commands&amp;quot;, although from what I can tell, these are just a nice way to scan for arbitrary byte sequences.&lt;&#x2F;p&gt;
&lt;p&gt;We also didn&#x27;t look into supporting different the same scan with different alignments. All these things may be worth exploring depending on your requirements. You could even get rid of such genericity and go with something way simpler. Supporting &lt;code&gt;i32&lt;&#x2F;code&gt;, &lt;code&gt;f32&lt;&#x2F;code&gt; and &lt;code&gt;f64&lt;&#x2F;code&gt; is enough to complete the Cheat Engine tutorial. But I wanted something more powerful, although my solution currently can&#x27;t scan for a sequence such as &amp;quot;exact type, unknown, exact matching the unknown&amp;quot;. So yeah.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the fifth step of the tutorial: Code finder. Cheat Engine attaches its debugger to the process for this one, and then replaces the instruction that performs the write with a different no-op so that nothing is written anymore. This will be quite the challenge!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;ops&#x2F;trait.Drop.html#copy-and-drop-are-exclusive&quot;&gt;&lt;code&gt;Copy&lt;&#x2F;code&gt; and &lt;code&gt;Drop&lt;&#x2F;code&gt; are exclusive&lt;&#x2F;a&gt;. See also &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;error-index.html#E0184&quot;&gt;E0184&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;If you added more scan types that require additional bounds, make sure to add them too. For example, the &amp;quot;decreased by&amp;quot; scan requires the type to &lt;code&gt;impl Sub&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;This is a good time to remind you to read the documentation. It is of special importance when dealing with &lt;code&gt;unsafe&lt;&#x2F;code&gt; methods; I recommend reading it a couple times.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Even with this option, it would not be a bad idea to make the trait &lt;code&gt;unsafe&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Not for long. As we will find out later, this approach has its limitations.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;We can still perform the pointer dereference when we know it&#x27;s aligned. This would likely be an optimization, although it would definitely complicate the code more.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;It &lt;em&gt;would&lt;&#x2F;em&gt; work if you scanned for unknown values and then checked for decreased values repeatedly. But we can&#x27;t just leave exact scan broken!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;Unfortunately, this makes some optimizations harder or even impossible to perform. Providing specialized functions for types where the size is known at compile time could be worth doing. Programming is all tradeoffs.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;9&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;9&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2021&#x2F;02&#x2F;26&#x2F;const-generics-mvp-beta.html&quot;&gt;Rust 1.51&lt;&#x2F;a&gt;, which was not out at the time of writing, would make it a lot easier to allow scanning for fixed-length sequences of bytes, thanks to const generics.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;10&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;10&lt;&#x2F;sup&gt;
&lt;p&gt;Workarounds do exist, such as &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dyn-clone&quot;&gt;dtolnay&#x27;s &lt;code&gt;dyn-clone&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. But I would rather not go that route.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Unknown initial value</title>
		<published>2021-02-19T00:00:00+00:00</published>
		<updated>2021-02-19T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-3/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-3/</id>
		<content type="html">&lt;p&gt;This is part 3 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Part 3: Unknown initial value&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In part 2 we left off with a bit of a cliff-hanger. Our little program is now able to scan for an exact value, remember the couple hundred addresses pointing to said value, and perform subsequent scans to narrow the list of addresses down until we&#x27;re left with a handful of them.&lt;&#x2F;p&gt;
&lt;p&gt;However, it is not always the case that you have an exact value to work with. The best you can do in these cases is guess what the software might be storing. For example, it could be a floating point for your current movement speed in a game, or an integer for your current health.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with this is that there are far too many possible locations storing our desired value. If you count misaligned locations, this means there is a different location to address every single byte in memory. A program with one megabyte of memory already has a &lt;em&gt;million&lt;&#x2F;em&gt; of addresses. Clearly, we need to do better than performing one million memory reads&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post will shift focus a bit from using &lt;code&gt;winapi&lt;&#x2F;code&gt; to possible techniques to perform the various scans.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unknown-initial-value&quot;&gt;Unknown initial value&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 3&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;Ok, seeing that you&#x27;ve figured out how to find a value using exact value let&#x27;s move on to the next step.&lt;&#x2F;p&gt;
&lt;p&gt;First things first though. Since you are doing a new scan, you have to click on New Scan first, to start a new scan. (You may think this is straighforward, but you&#x27;d be surprised how many people get stuck on that step) I won&#x27;t be explaining this step again, so keep this in mind
Now that you&#x27;ve started a new scan, let&#x27;s continue&lt;&#x2F;p&gt;
&lt;p&gt;In the previous test we knew the initial value so we could do a exact value, but now we have a status bar where we don&#x27;t know the starting value.
We only know that the value is between 0 and 500. And each time you click &#x27;hit me&#x27; you lose some health. The amount you lose each time is shown above the status bar.&lt;&#x2F;p&gt;
&lt;p&gt;Again there are several different ways to find the value. (like doing a decreased value by... scan), but I&#x27;ll only explain the easiest. &amp;quot;Unknown initial value&amp;quot;, and decreased value.
Because you don&#x27;t know the value it is right now, a exact value wont do any good, so choose as scantype &#x27;Unknown initial value&#x27;, again, the value type is 4-bytes. (most windows apps use 4-bytes)click first scan and wait till it&#x27;s done.&lt;&#x2F;p&gt;
&lt;p&gt;When it is done click &#x27;hit me&#x27;. You&#x27;ll lose some of your health. (the amount you lost shows for a few seconds and then disappears, but you don&#x27;t need that)
Now go to Cheat Engine, and choose &#x27;Decreased Value&#x27; and click &#x27;Next Scan&#x27;
When that scan is done, click hit me again, and repeat the above till you only find a few.&lt;&#x2F;p&gt;
&lt;p&gt;We know the value is between 0 and 500, so pick the one that is most likely the address we need, and add it to the list.
Now change the health to 5000, to proceed to the next step.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;dense-memory-locations&quot;&gt;Dense memory locations&lt;&#x2F;h2&gt;
&lt;p&gt;The key thing to notice here is that, when we read memory from another process, we do so over &lt;em&gt;entire regions&lt;&#x2F;em&gt;. A memory region is represented by a starting offset, a size, and a bunch of other things like protection level.&lt;&#x2F;p&gt;
&lt;p&gt;When running the first scan for an unknown value, all we need to remember is the starting offset and size for every single region. All the candidate locations that could point to our value fall within this range, so it is enough for us to store the range definition, and not every location within it.&lt;&#x2F;p&gt;
&lt;p&gt;To gain a better understanding of what this means, let&#x27;s come up with a more specific scenario. With our current approach of doing things, we store an address (&lt;code&gt;usize&lt;&#x2F;code&gt;) for every location pointing to our desired value. In the case of unknown values, all locations are equally valid, since we don&#x27;t know what value they should point to yet, and any value they point to is good. With this representation, we would end up with a very large vector:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let locations = vec![0x2000, 0x2001, ..., 0x20ff, 0x2100];
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This representation is dense. Every single number in the range &lt;code&gt;0x2000..=0x2100&lt;&#x2F;code&gt; is present. So why bother storing the values individually when the range is enough?:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let locations = EntireRegion { range: 0x2000..=0x2100 };
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much better! With two &lt;code&gt;usize&lt;&#x2F;code&gt;, one for the starting location and another for the end, we can indicate that we care about all the locations falling in that range.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, some accessible memory regions immediately follow eachother, so we could even compact this further and merge regions which are together. But due to their potential differences with regards to protection levels, we will not attempt to merge regions.&lt;&#x2F;p&gt;
&lt;p&gt;We don&#x27;t want to get rid of the old way of storing locations, because once we start narrowing them down, we will want to go back to storing just a few candidates. To keep things tidy, let&#x27;s introduce a new &lt;code&gt;enum&lt;&#x2F;code&gt; representing either possibility:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use std::ops::Range;

pub enum CandidateLocations {
    Discrete {
        locations: Vec&amp;lt;usize&amp;gt;,
    },
    Dense {
        range: Range&amp;lt;usize&amp;gt;,
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s also introduce another &lt;code&gt;enum&lt;&#x2F;code&gt; to perform the different scan types. For the time being, we will only worry about looking for &lt;code&gt;i32&lt;&#x2F;code&gt; in memory:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Scan {
    Exact(i32),
    Unknown,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;storing-scanned-values&quot;&gt;Storing scanned values&lt;&#x2F;h2&gt;
&lt;p&gt;When scanning for exact values, it&#x27;s not necessary to store the value found. We already know they&#x27;re all the same, for example, value &lt;code&gt;42&lt;&#x2F;code&gt;. However, if the value is unknown, we do need to store it so that we can compare it in a subsequent scan to see if the value is the same or it changed. This means the value can be &amp;quot;any within&amp;quot; the read memory chunk:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Value {
    Exact(i32),
    AnyWithin(Vec&amp;lt;u8&amp;gt;),
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For every region in memory, there will be some candidate locations and a value (or value range) we need to compare against in subsequent scans:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub struct Region {
    pub info: winapi::um::winnt::MEMORY_BASIC_INFORMATION,
    pub locations: CandidateLocations,
    pub value: Value,
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With all the data structures needed setup, we can finally refactor our old scanning code into a new method capable of dealing with all these cases. For brevity, I will omit the exact scan, as it remains mostly unchanged:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use winapi::um::winnt::MEMORY_BASIC_INFORMATION;

...

&#x2F;&#x2F; inside `impl Process`
pub fn scan_regions(&amp;amp;self, regions: &amp;amp;[MEMORY_BASIC_INFORMATION], scan: Scan) -&amp;gt; Vec&amp;lt;Region&amp;gt; {
    regions
        .iter()
        .flat_map(|region| match scan {
            Scan::Exact(n) =&amp;gt; todo!(&amp;quot;old scan implementation&amp;quot;),
            Scan::Unknown =&amp;gt; {
                let base = region.BaseAddress as usize;
                match self.read_memory(region.BaseAddress as _, region.RegionSize) {
                    Ok(memory) =&amp;gt; Some(Region {
                        info: region.clone(),
                        locations: CandidateLocations::Dense {
                            range: base..base + region.RegionSize,
                        },
                        value: Value::AnyWithin(memory),
                    }),
                    Err(_) =&amp;gt; None,
                }
            }
        })
        .collect()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Time to try it out!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl CandidateLocations {
    pub fn len(&amp;amp;self) -&amp;gt; usize {
        match self {
            CandidateLocations::Discrete { locations } =&amp;gt; locations.len(),
            CandidateLocations::Dense { range } =&amp;gt; range.len(),
        }
    }
}

...

fn main() {
    &#x2F;&#x2F; -snip-

    println!(&amp;quot;Scanning {} memory regions&amp;quot;, regions.len());
    let last_scan = process.scan_regions(&amp;amp;regions, Scan::Unknown);
    println!(
        &amp;quot;Found {} locations&amp;quot;,
        last_scan.iter().map(|r| r.locations.len()).sum::&amp;lt;usize&amp;gt;()
    );
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Scanning 88 memory regions
Found 3014656 locations
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we consider misaligned locations, there is a lot of potential addresses where we could look for. Running the same scan on Cheat Engine yields &lt;code&gt;2,449,408&lt;&#x2F;code&gt; addresses, which is pretty close. It&#x27;s probably skipping some additional regions that we are considering. Emulating Cheat Engine to perfection is not a concern for us at the moment, so I&#x27;m not going to investigate what regions it actually uses.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;comparing-scanned-values&quot;&gt;Comparing scanned values&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have performed the initial scan and have stored all the &lt;code&gt;CandidateLocations&lt;&#x2F;code&gt; and &lt;code&gt;Value&lt;&#x2F;code&gt;, we can re-implement the &amp;quot;next scan&amp;quot; step to handle any variant of our &lt;code&gt;Scan&lt;&#x2F;code&gt; enum. This enables us to mix-and-match any &lt;code&gt;Scan&lt;&#x2F;code&gt; mode in any order. For example, one could perform an exact scan, then one for decreased values, or start with unknown scan and scan for unchanged values.&lt;&#x2F;p&gt;
&lt;p&gt;The tutorial suggests using &amp;quot;decreased value&amp;quot; scan, so let&#x27;s start with that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Scan {
    Exact(i32),
    Unknown,
    Decreased, &#x2F;&#x2F; new!
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other scanning modes, such as decreased by a known amount rather than any decrease, increased, unchanged, changed and so on, are not very different from the &amp;quot;decreased&amp;quot; scan, so I won&#x27;t bore you with the details.&lt;&#x2F;p&gt;
&lt;p&gt;I will use a different method to perform a &amp;quot;rescan&amp;quot;, since the first one is a bit more special in that it doesn&#x27;t start with any previous values:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn rescan_regions(&amp;amp;self, regions: &amp;amp;[Region], scan: Scan) -&amp;gt; Vec&amp;lt;Region&amp;gt; {
    regions
        .iter()
        .flat_map(|region| match scan {
            Scan::Decreased =&amp;gt; {
                let mut locations = Vec::new();
                match region.locations {
                    CandidateLocations::Dense { range } =&amp;gt; {
                        match self.read_memory(range.start, range.end - range.start) {
                            Ok(memory) =&amp;gt; match region.value {
                                Value::AnyWithin(previous) =&amp;gt; {
                                    memory
                                        .windows(4)
                                        .zip(previous.windows(4))
                                        .enumerate()
                                        .step_by(4)
                                        .for_each(|(offset, (new, old))| {
                                            let new = i32::from_ne_bytes([
                                                new[0], new[1], new[2], new[3],
                                            ]);
                                            let old = i32::from_ne_bytes([
                                                old[0], old[1], old[2], old[3],
                                            ]);
                                            if new &amp;lt; old {
                                                locations.push(range.start + offset);
                                            }
                                        });

                                    Some(Region {
                                        info: region.info.clone(),
                                        locations: CandidateLocations::Discrete { locations },
                                        value: Value::AnyWithin(memory),
                                    })
                                }
                                _ =&amp;gt; todo!(),
                            },
                            _ =&amp;gt; todo!(),
                        }
                    }
                    _ =&amp;gt; todo!(),
                }
            }
            _ =&amp;gt; todo!(),
        })
        .collect()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;ve skimmed over that, I do not blame you. Here&#x27;s the summary: for every existing region, when executing the scan mode &amp;quot;decreased&amp;quot;, if the previous locations were dense, read the entire memory region. On success, if the previous values were a chunk of memory, iterate over the current and old memory at the same time, and for every aligned &lt;code&gt;i32&lt;&#x2F;code&gt;, if the new value is less, store it.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also making me ill. Before I leave a mess on the floor, does it work?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;std::thread::sleep(std::time::Duration::from_secs(10));
let last_scan = process.rescan_regions(&amp;amp;last_scan, Scan::Decreased);
println!(
    &amp;quot;Found {} locations&amp;quot;,
    last_scan.iter().map(|r| r.locations.len()).sum::&amp;lt;usize&amp;gt;()
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;Found 3014656 locations
Found 177 locations
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, great, let&#x27;s clean up this mess…&lt;&#x2F;p&gt;
&lt;h2 id=&quot;refactoring&quot;&gt;Refactoring&lt;&#x2F;h2&gt;
&lt;p&gt;Does it also make you uncomfortable to be writing something that you know will end up &lt;em&gt;huge&lt;&#x2F;em&gt; unless you begin refactoring other parts right now? I definitely feel that way. But I think it&#x27;s good discipline to push through with something that works first, even if it&#x27;s nasty, before going on a tangent. Now that we have the basic implementation working, let&#x27;s take on this monster before it eats us alive.&lt;&#x2F;p&gt;
&lt;p&gt;First things first, that method is inside an &lt;code&gt;impl&lt;&#x2F;code&gt; block. The deepest nesting level is 13. I almost have to turn around my chair to read the entire thing out!&lt;&#x2F;p&gt;
&lt;p&gt;Second, we&#x27;re nesting four matches. Three of them we care about: scan, candidate location, and value. If each of these &lt;code&gt;enum&lt;&#x2F;code&gt; has &lt;code&gt;S&lt;&#x2F;code&gt;, &lt;code&gt;C&lt;&#x2F;code&gt; and &lt;code&gt;V&lt;&#x2F;code&gt; variants respectively, writing each of these by hand will require &lt;code&gt;S * C * V&lt;&#x2F;code&gt; different implementations! Cheat Engine offers 10 different scans, I can think of at least 3 different ways to store candidate locations, and another 3 ways to store the values found. That&#x27;s &lt;code&gt;10 * 3 * 3 = 90&lt;&#x2F;code&gt; different combinations. I am not willing to write out all these&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, so we need to start introducing some abstractions. Just imagine what a monster function you would end with! The horror!&lt;&#x2F;p&gt;
&lt;p&gt;Third, why is the scan being executed in the process? This is something that should be done in the &lt;code&gt;impl Scan&lt;&#x2F;code&gt; instead!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s begin the cleanup:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn rescan_regions(&amp;amp;self, regions: &amp;amp;[Region], scan: Scan) -&amp;gt; Vec&amp;lt;Region&amp;gt; {
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I already feel ten times better.&lt;&#x2F;p&gt;
&lt;p&gt;Now, this method will unconditionally read the entire memory region, even if the scan or the previous candidate locations don&#x27;t need it&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. In the worst case with a single discrete candidate location, we will be reading a very large chunk of memory when we could have read just the 4 bytes needed for the &lt;code&gt;i32&lt;&#x2F;code&gt;. On the bright side, if there &lt;em&gt;are&lt;&#x2F;em&gt; more locations in this memory region, we will get read of them at the same time&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. So even if we&#x27;re moving more memory around all the time, it isn&#x27;t &lt;em&gt;too&lt;&#x2F;em&gt; bad.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;regions
    .iter()
    .flat_map(
        |region| match self.read_memory(region.info.BaseAddress as _, region.info.RegionSize) {
            Ok(memory) =&amp;gt; todo!(),
            Err(err) =&amp;gt; {
                eprintln!(
                    &amp;quot;Failed to read {} bytes at {:?}: {}&amp;quot;,
                    region.info.RegionSize, region.info.BaseAddress, err,
                );
                None
            }
        },
    )
    .collect()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! If reading memory succeeds, we want to rerun the scan:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;Ok(memory) =&amp;gt; Some(scan.rerun(region, memory)),
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The rerun will live inside &lt;code&gt;impl Scan&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn rerun(&amp;amp;self, region: &amp;amp;Region, memory: Vec&amp;lt;u8&amp;gt;) -&amp;gt; Region {
    match self {
        Scan::Exact(_) =&amp;gt; self.run(region.info.clone(), memory),
        Scan::Unknown =&amp;gt; region.clone(),
        Scan::Decreased =&amp;gt; todo!(),
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An exact scan doesn&#x27;t care about any previous values, so it behaves like a first scan. The first scan is done by the &lt;code&gt;run&lt;&#x2F;code&gt; function (it contains the implementation factored out of the &lt;code&gt;Process::scan_regions&lt;&#x2F;code&gt; method), which only needs the region information and the current memory chunk we just read.&lt;&#x2F;p&gt;
&lt;p&gt;The unknown scan leaves the region unchanged: any value stored is still valid, because it is unknown what we&#x27;re looking for.&lt;&#x2F;p&gt;
&lt;p&gt;The decreased scan will have to iterate over all the candidate locations, and compare them with the current memory chunk. But this time, we&#x27;ll abstract this iteration too:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;impl Region {
    fn iter_locations&amp;lt;&#x27;a&amp;gt;(
        &amp;amp;&#x27;a self,
        new_memory: &amp;amp;&#x27;a [u8],
    ) -&amp;gt; impl Iterator&amp;lt;Item = (usize, i32, i32)&amp;gt; + &#x27;a {
        match &amp;amp;self.locations {
            CandidateLocations::Dense { range } =&amp;gt; range.clone().step_by(4).map(move |addr| {
                let old = self.value_at(addr);
                let new = i32::from_ne_bytes([
                    new_memory[0],
                    new_memory[1],
                    new_memory[2],
                    new_memory[3],
                ]);
                (addr, old, new)
            }),
            _ =&amp;gt; todo!(),
        }
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For a dense candidate location, we iterate over all the 4-aligned addresses (fast scan for &lt;code&gt;i32&lt;&#x2F;code&gt; values), and yield &lt;code&gt;(current address, old value, new value)&lt;&#x2F;code&gt;. This way, the &lt;code&gt;Scan&lt;&#x2F;code&gt; can do anything it wants with the old and new values, and if it finds a match, it can use the address.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;value_at&lt;&#x2F;code&gt; method will deal with all the &lt;code&gt;Value&lt;&#x2F;code&gt; variants:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn value_at(&amp;amp;self, addr: usize) -&amp;gt; i32 {
    match &amp;amp;self.value {
        Value::AnyWithin(chunk) =&amp;gt; {
            let base = addr - self.info.BaseAddress as usize;
            let bytes = &amp;amp;chunk[base..base + 4];
            i32::from_ne_bytes([bytes[0], bytes[1], bytes[2], bytes[3]])
        }
        _ =&amp;gt; todo!(),
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way, &lt;code&gt;iter_locations&lt;&#x2F;code&gt; can easily use any value type. With this, we have all &lt;code&gt;enum&lt;&#x2F;code&gt; covered: &lt;code&gt;Scan&lt;&#x2F;code&gt; in &lt;code&gt;rerun&lt;&#x2F;code&gt;, &lt;code&gt;CandidateLocation&lt;&#x2F;code&gt; in &lt;code&gt;iter_locations&lt;&#x2F;code&gt;, and &lt;code&gt;Value&lt;&#x2F;code&gt; in &lt;code&gt;value_at&lt;&#x2F;code&gt;. Now we can add as many variants as we want, and we will only need to update a single &lt;code&gt;match&lt;&#x2F;code&gt; arm for each of them. Let&#x27;s implement &lt;code&gt;Scan::Decreased&lt;&#x2F;code&gt; and try it out:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn rerun(&amp;amp;self, region: &amp;amp;Region, memory: Vec&amp;lt;u8&amp;gt;) -&amp;gt; Region {
    match self {
        Scan::Decreased =&amp;gt; Region {
            info: region.info.clone(),
            locations: CandidateLocations::Discrete {
                locations: region
                    .iter_locations(&amp;amp;memory)
                    .flat_map(|(addr, old, new)| if new &amp;lt; old { Some(addr) } else { None })
                    .collect(),
            },
            value: Value::AnyWithin(memory),
        },,
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;Found 3014656 locations
Found 223791 locations
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hmm… before we went down from &lt;code&gt;3014656&lt;&#x2F;code&gt; to &lt;code&gt;177&lt;&#x2F;code&gt; locations, and now we went down to &lt;code&gt;223791&lt;&#x2F;code&gt;. Where did we go wrong?&lt;&#x2F;p&gt;
&lt;p&gt;After spending several hours on this, I can tell you where we went wrong. &lt;code&gt;iter_locations&lt;&#x2F;code&gt; is always accessing the memory range &lt;code&gt;0..4&lt;&#x2F;code&gt;, and not the right address. Here&#x27;s the fix:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;CandidateLocations::Dense { range } =&amp;gt; range.clone().step_by(4).map(move |addr| {
    let old = self.value_at(addr);
    let base = addr - self.info.BaseAddress as usize;
    let bytes = &amp;amp;new_memory[base..base + 4];
    let new = i32::from_ne_bytes([bytes[0], bytes[1], bytes[2], bytes[3]]);
    (addr, old, new)
}),
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;going-beyond&quot;&gt;Going beyond&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take a look at other possible &lt;code&gt;Scan&lt;&#x2F;code&gt; types. Cheat Engine supports the following initial scan types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Exact Value&lt;&#x2F;li&gt;
&lt;li&gt;Bigger than…&lt;&#x2F;li&gt;
&lt;li&gt;Smaller than…&lt;&#x2F;li&gt;
&lt;li&gt;Value between…&lt;&#x2F;li&gt;
&lt;li&gt;Unknown initial value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&amp;quot;Bigger than&amp;quot; and &amp;quot;Smaller than&amp;quot; can both be represented by &amp;quot;Value between&amp;quot;, so it&#x27;s pretty much just three.&lt;&#x2F;p&gt;
&lt;p&gt;For subsequent scans, in addition to the scan types described above, we find:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Increased value&lt;&#x2F;li&gt;
&lt;li&gt;Increased value by…&lt;&#x2F;li&gt;
&lt;li&gt;Decreased value&lt;&#x2F;li&gt;
&lt;li&gt;Decreased value by…&lt;&#x2F;li&gt;
&lt;li&gt;Changed value&lt;&#x2F;li&gt;
&lt;li&gt;Unchanged value&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Not only does Cheat Engine provide all of these scans, but all of them can also be negated. For example, &amp;quot;find values that were not increased by 7&amp;quot;. One could imagine to also support things like &amp;quot;increased value by range&amp;quot;. For the increased and decreased scans, Cheat Engine also supports &amp;quot;at least xx%&amp;quot;, so that if the value changed within the specified percentage interval, it will be considered.&lt;&#x2F;p&gt;
&lt;p&gt;What about &lt;code&gt;CandidateLocations&lt;&#x2F;code&gt;? I can&#x27;t tell you how Cheat Engine stores these, but I can tell you that &lt;code&gt;CandidateLocations::Discrete&lt;&#x2F;code&gt; can still be quite inefficient. Imagine you&#x27;ve started with a scan for unknown values and then ran a scan for unchanged valueus. Most values in memory will have been unchanged, but with our current implementation, we are now storing an entire &lt;code&gt;usize&lt;&#x2F;code&gt; address for each of these. One option would be to introduce &lt;code&gt;CandidateLocations::Sparse&lt;&#x2F;code&gt;, which would be a middle ground. You could implement it like &lt;code&gt;Dense&lt;&#x2F;code&gt; and include a vector of booleans telling you which values to consider, or go smaller and use a bitstring or bit vector. You could use a sparse vector data structure.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Value&lt;&#x2F;code&gt; is very much like &lt;code&gt;CandidateLocations&lt;&#x2F;code&gt;, except that it stores a value to compare against and not an address. Here we can either have an exact value, or an older copy of the memory. Again, keeping a copy of the entire memory chunk when all we need is a handful of values is inefficient. You could keep a mapping from addresses to values if you don&#x27;t have too many. Or you could shrink and fragment the copied memory in a more optimal way. There&#x27;s a lot of room for improvement!&lt;&#x2F;p&gt;
&lt;p&gt;What if, despite all of the efforts above, we still don&#x27;t have enough RAM to store all this information? The Cheat Engine Tutorial doesn&#x27;t use a lot of memory, but as soon as you try scanning bigger programs, like games, you may find yourself needing several gigabytes worth of memory to remember all the found values in order to compare them in subsequent scans. You may even need to consider dumping all the regions to a file and read from it to run the comparisons. For example, running a scan for &amp;quot;unknown value&amp;quot; in Cheat Engine brings its memory up by the same amount of memory used by the process scanned (which makes sense), but as soon as I ran a scan for &amp;quot;unchanged value&amp;quot; over the misaligned values, Cheat Engine&#x27;s disk usage skyrocketed to 1GB&#x2F;s (!) for several seconds on my SSD. After it finished, memory usage went down to normal. It was very likely writing out all candidate locations to disk.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;There is a lot of things to learn from Cheat Engine just by observing its behaviour, and we&#x27;re only scratching its surface.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the fourth step of the tutorial: Floating points. So far, we have only been working with &lt;code&gt;i32&lt;&#x2F;code&gt; for simplicity. We will need to update our code to be able to account for different data types, which will make it easy to support other types like &lt;code&gt;i16&lt;&#x2F;code&gt;, &lt;code&gt;i64&lt;&#x2F;code&gt;, or even strings, represented as an arbitrary sequence of bytes.&lt;&#x2F;p&gt;
&lt;p&gt;As usual, you can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;obtain the code for this post&lt;&#x2F;a&gt; over at my GitHub. You can run &lt;code&gt;git checkout step3&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code. This version is a bit cleaner than the one presented in the blog, and contains some of the things described in the &lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;woce-3&#x2F;#going-beyond&quot;&gt;Going beyond&lt;&#x2F;a&gt; section. Until next time!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;Well, technically, we will perform a million memory reads&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. The issue here is the million calls to &lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt;, not reading memory per se.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Not currently. After a basic implementation works, writing each implementation by hand and fine-tuning them by treating each of them as a special case could yield significant speed improvements. So although it would be a lot of work, this option shouldn&#x27;t be ruled out completely.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;You could ask the candidate locations where one should read, which would still keep the code reasonably simple.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;You could also optimize for this case by determining both the smallest and largest address, and reading enough to cover them both. Or apply additional heuristics to only do so if the ratio of the size you&#x27;re reading compared to the size you need isn&#x27;t too large and abort the joint read otherwise. There is a lot of room for optimization here.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;(A footnote in a footnote?) The machine registers, memory cache and compiler will all help lower this cost, so the generated executable might not actually need that many reads from RAM. But that&#x27;s getting way too deep into the details now.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Exact Value scanning</title>
		<published>2021-02-12T00:00:00+00:00</published>
		<updated>2021-02-19T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-2/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-2/</id>
		<content type="html">&lt;p&gt;This is part 2 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-1&quot;&gt;Part 1: Introduction&lt;&#x2F;a&gt; (start here if you&#x27;re new to the series!)&lt;&#x2F;li&gt;
&lt;li&gt;Part 2: Exact Value scanning&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the introduction, we spent a good deal of time enumerating all running processes just so we could find out the pid we cared about. With the pid now in our hands, we can do pretty much anything to its corresponding process.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s now time to read the process&#x27; memory and write to it. If our process was a single-player game, this would enable us to do things like setting a very high value on the player&#x27;s current health pool, making us invincible. This technique will often not work for multi-player games, because the server likely knows your true current health (the most you could probably do is make the client render an incorrect value). However, if the server is crappy and it trusts the client, then you&#x27;re still free to mess around with your current health.&lt;&#x2F;p&gt;
&lt;p&gt;Even if we don&#x27;t want to write to the process&#x27; memory, reading is still very useful. Maybe you could enhance your experience by making a custom overlay that displays useful information, or something that makes noise if it detects the life is too low, or even simulating a keyboard event to automatically recover some mana when you&#x27;re running low.&lt;&#x2F;p&gt;
&lt;p&gt;Be warned about anti-cheat systems. Anything beyond a basic game is likely to have some protection measures in place, making the analysis more difficult (perhaps the values are scrambled in memory), or even pinging the server if it detects something fishy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;I am not responsible for any bans!&lt;&#x2F;strong&gt; Use your brain before messing with online games, and don&#x27;t ruin the fun for everyone else. If you get caught for cheating, I don&#x27;t want to know about it.&lt;&#x2F;p&gt;
&lt;p&gt;Now that all &lt;a href=&quot;https:&#x2F;&#x2F;www.urbandictionary.com&#x2F;define.php?term=script%20kiddie&quot;&gt;script kiddies&lt;&#x2F;a&gt; have left the room, let&#x27;s proceed with the post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;exact-value-scanning&quot;&gt;Exact Value scanning&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 2&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;Now that you have opened the tutorial with Cheat Engine let&#x27;s get on with the next step.&lt;&#x2F;p&gt;
&lt;p&gt;You can see at the bottom of this window is the text Health: xxx. Each time you click &#x27;Hit me&#x27; your health gets decreased.&lt;&#x2F;p&gt;
&lt;p&gt;To get to the next step you have to find this value and change it to 1000&lt;&#x2F;p&gt;
&lt;p&gt;To find the value there are different ways, but I&#x27;ll tell you about the easiest, &#x27;Exact Value&#x27;: First make sure value type is set to at least 2-bytes or 4-bytes. 1-byte will also work, but you&#x27;ll run into an easy to fix problem when you&#x27;ve found the address and want to change it. The 8-byte may perhaps works if the bytes after the address are 0, but I wouldn&#x27;t take the bet. Single, double, and the other scans just don&#x27;t work, because they store the value in a different way.&lt;&#x2F;p&gt;
&lt;p&gt;When the value type is set correctly, make sure the scantype is set to &#x27;Exact Value&#x27;. Then fill in the number your health is in the value box. And click &#x27;First Scan&#x27;. After a while (if you have a extremely slow pc) the scan is done and the results are shown in the list on the left&lt;&#x2F;p&gt;
&lt;p&gt;If you find more than 1 address and you don&#x27;t know for sure which address it is, click &#x27;Hit me&#x27;, fill in the new health value into the value box, and click &#x27;Next Scan&#x27;. Repeat this until you&#x27;re sure you&#x27;ve found it. (that includes that there&#x27;s only 1 address in the list.....)&lt;&#x2F;p&gt;
&lt;p&gt;Now double click the address in the list on the left. This makes the address pop-up in the list at the bottom, showing you the current value. Double click the value, (or select it and press enter), and change the value to 1000.&lt;&#x2F;p&gt;
&lt;p&gt;If everything went ok the next button should become enabled, and you&#x27;re ready for the next step.&lt;&#x2F;p&gt;
&lt;p&gt;Note: If you did anything wrong while scanning, click &amp;quot;New Scan&amp;quot; and repeat the scanning again. Also, try playing around with the value and click &#x27;hit me&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;our-first-scan&quot;&gt;Our First Scan&lt;&#x2F;h2&gt;
&lt;p&gt;The Cheat Engine tutorial talks about &amp;quot;value types&amp;quot; and &amp;quot;scan types&amp;quot; like &amp;quot;exact value&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;value types&lt;&#x2F;strong&gt; will help us narrow down &lt;em&gt;what&lt;&#x2F;em&gt; we&#x27;re looking for. For example, the integer type &lt;code&gt;i32&lt;&#x2F;code&gt; is represented in memory as 32 bits, or 4 bytes. However, &lt;code&gt;f32&lt;&#x2F;code&gt; is &lt;em&gt;also&lt;&#x2F;em&gt; represented by 4 bytes, and so is &lt;code&gt;u32&lt;&#x2F;code&gt;. Or perhaps the 4 bytes represent RGBA values of a color! So any 4 bytes in memory can be interpreted in many ways, and it&#x27;s up to us to decide which way we interpret the bytes in.&lt;&#x2F;p&gt;
&lt;p&gt;When programming, numbers which are 32-bit wide are common, as they&#x27;re a good (and fast) size to work with. Scanning for this type is often a good bet. For positive numbers, &lt;code&gt;i32&lt;&#x2F;code&gt; is represented the same as &lt;code&gt;u32&lt;&#x2F;code&gt; in memory, so even if the value turns out to not be signed, the scan is likely to work. Focusing on &lt;code&gt;i32&lt;&#x2F;code&gt; will save us from scanning for &lt;code&gt;f32&lt;&#x2F;code&gt; or even other types, like interpreting 8 bytes for &lt;code&gt;i64&lt;&#x2F;code&gt;, &lt;code&gt;f64&lt;&#x2F;code&gt;, or less bytes like &lt;code&gt;i16&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;strong&gt;scan types&lt;&#x2F;strong&gt; will help us narrow down &lt;em&gt;how&lt;&#x2F;em&gt; we&#x27;re looking for a value. Scanning for an exact value means what you think it does: interpret all 4 bytes in the process&#x27; memory as our value type, and check if they exactly match our value. This will often yield a lot of candidates, but it will be enough to get us started. Variations of the exact scan include checking for all values below a threshold, above, in between, or even just… unknown.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s the point of scanning for unknown values if &lt;em&gt;everything&lt;&#x2F;em&gt; in memory is unknown? Sometimes you don&#x27;t have a concrete value. Maybe your health pool is a bar and it nevers tell you how much health you actually have, just a visual indicator of your percentage left, even if the health is not stored as a percentage. As we will find later on, scanning for unknown values is more useful than it might appear at first.&lt;&#x2F;p&gt;
&lt;p&gt;We can access the memory of our own program by guessing random pointers and trying to read from them. But Windows isolates the memory of each program, so no pointer we could ever guess will let us read from the memory of another process. Luckily for us, searching for &amp;quot;read process memory winapi&amp;quot; leads us to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-readprocessmemory&quot;&gt;&lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function. Spot on.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn read_memory(&amp;amp;self, addr: usize, n: usize) -&amp;gt; io::Result&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt; {
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much like trying to dereference a pointer pointing to released memory or even null, reading from an arbitrary address can fail for the same reasons (and more). We will want to signal this with &lt;code&gt;io::Result&lt;&#x2F;code&gt;. It&#x27;s funny to note that, even though we&#x27;re doing something that seems wildly unsafe (reading arbitrary memory, even if the other process is mutating it at the same time), the function is perfectly safe. If we cannot read something, it will return &lt;code&gt;Err&lt;&#x2F;code&gt;, but if it succeeds, it has taken a snapshot of the memory of the process, and the returned value will be correctly initialized.&lt;&#x2F;p&gt;
&lt;p&gt;The function will be defined inside our &lt;code&gt;impl Process&lt;&#x2F;code&gt;, since it conveniently holds an open handle to the process in question. It takes &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;, because we do not need to mutate anything in the &lt;code&gt;Process&lt;&#x2F;code&gt; instance. After adding the &lt;code&gt;memoryapi&lt;&#x2F;code&gt; feature to &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, we can perform the call:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let mut buffer = Vec::&amp;lt;u8&amp;gt;::with_capacity(n);
let mut read = 0;

&#x2F;&#x2F; SAFETY: the buffer points to valid memory, and the buffer size is correctly set.
if unsafe {
    winapi::um::memoryapi::ReadProcessMemory(
        self.handle.as_ptr(),
        addr as *const _,
        buffer.as_mut_ptr().cast(),
        buffer.capacity(),
        &amp;amp;mut read,
    )
} == FALSE
{
    Err(io::Error::last_os_error())
} else {
    &#x2F;&#x2F; SAFETY: the call succeeded and `read` contains the amount of bytes written.
    unsafe { buffer.set_len(read as usize) };
    Ok(buffer)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! But the address space is somewhat large. 64 bits large. Eighteen quintillion, four hundred and forty-six quadrillion, seven hundred and forty-four trillion, seventy-three billion, seven hundred and nine million, five hundred and fifty-one thousand, six hundred and sixteen&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; large. You gave up reading that, didn&#x27;t you? Anyway, 18&#x27;446&#x27;744&#x27;073&#x27;709&#x27;551&#x27;616 is a &lt;em&gt;big&lt;&#x2F;em&gt; number.&lt;&#x2F;p&gt;
&lt;p&gt;I am not willing to wait for the program to scan over so many values. I don&#x27;t even have 16 &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orders_of_magnitude_(data)&quot;&gt;exbibytes&lt;&#x2F;a&gt; of RAM installed on my laptop yet&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;! What&#x27;s up with that?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memory-regions&quot;&gt;Memory regions&lt;&#x2F;h2&gt;
&lt;p&gt;The program does not actually have all that memory allocated (surprise!). Random-guessing an address is extremely likely to point out to invalid memory. Reading from the start of the address space all the way to the end would not be any better. And we &lt;strong&gt;need&lt;&#x2F;strong&gt; to do better.&lt;&#x2F;p&gt;
&lt;p&gt;We need to query for the memory regions allocated to the program. For this purpose we can use &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-virtualqueryex&quot;&gt;&lt;code&gt;VirtualQueryEx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Retrieves information about a range of pages within the virtual address space of a specified process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We have enumerated things before, and this function is not all that different.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn memory_regions(&amp;amp;self) -&amp;gt; io::Result&amp;lt;winapi::um::winnt::MEMORY_BASIC_INFORMATION&amp;gt; {
    let mut info = MaybeUninit::uninit();

    &#x2F;&#x2F; SAFETY: the info structure points to valid memory.
    let written = unsafe {
        winapi::um::memoryapi::VirtualQueryEx(
            self.handle.as_ptr(),
            std::ptr::null(),
            info.as_mut_ptr(),
            mem::size_of::&amp;lt;winapi::um::winnt::MEMORY_BASIC_INFORMATION&amp;gt;(),
        )
    };
    if written == 0 {
        Err(io::Error::last_os_error())
    } else {
        &#x2F;&#x2F; SAFETY: a non-zero amount was written to the structure
        Ok(unsafe { info.assume_init() })
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We start with a base address of zero&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; (&lt;code&gt;std::ptr::null()&lt;&#x2F;code&gt;), and ask the function to tell us what&#x27;s in there. Let&#x27;s try it out, with the &lt;code&gt;impl-debug&lt;&#x2F;code&gt; crate feature in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;dbg!(process.memory_regions());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
Compiling memo v0.1.0

error[E0277]: `winapi::um::winnt::MEMORY_BASIC_INFORMATION` doesn&#x27;t implement `std::fmt::Debug`
   --&amp;gt; src\main.rs:185:5
    |
185 |     dbg!(process.memory_regions());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `winapi::um::winnt::MEMORY_BASIC_INFORMATION` cannot be formatted using `{:?}` because it doesn&#x27;t implement `std::fmt::Debug`
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s annoying. It seems not everything has an &lt;code&gt;impl std::fmt::Debug&lt;&#x2F;code&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;retep998&#x2F;winapi-rs&#x2F;issues&#x2F;548#issuecomment-355278090&quot;&gt;you&#x27;re supposed to send a PR&lt;&#x2F;a&gt; if you want it to have debug, even if the &lt;code&gt;impl-debug&lt;&#x2F;code&gt; feature is set. I&#x27;m surprised they don&#x27;t auto-generate all of this and have to rely on manually adding &lt;code&gt;Debug&lt;&#x2F;code&gt; as needed? Oh well, let&#x27;s get rid of the feature and print it out ourselves:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;eprintln!(
    &amp;quot;Region:
    BaseAddress: {:?}
    AllocationBase: {:?}
    AllocationProtect: {:?}
    RegionSize: {:?}
    State: {:?}
    Protect: {:?}
    Type: {:?}&amp;quot;,
    region.BaseAddress,
    region.AllocationBase,
    region.AllocationProtect,
    region.RegionSize,
    region.State,
    region.Protect,
    region.Type,
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hopefully we don&#x27;t need to do this often:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.60s
     Running `target\debug\memo.exe`

Region:
    BaseAddress: 0x0
    AllocationBase: 0x0
    AllocationProtect: 0
    RegionSize: 65536
    State: 65536
    Protect: 1
    Type: 0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome! There is a region at &lt;code&gt;null&lt;&#x2F;code&gt;, and the &lt;code&gt;AllocationProtect&lt;&#x2F;code&gt; of zero indicates that &amp;quot;the caller does not have access&amp;quot; when the region was created. However, &lt;code&gt;Protect&lt;&#x2F;code&gt; is &lt;code&gt;1&lt;&#x2F;code&gt;, and that is the &lt;em&gt;current&lt;&#x2F;em&gt; protection level. A value of one indicates &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;memory&#x2F;memory-protection-constants&quot;&gt;&lt;code&gt;PAGE_NOACCESS&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Disables all access to the committed region of pages. An attempt to read from, write to, or execute the committed region results in an access violation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now that we know that the first region starts at 0 and has a size of 64 KiB, we can simply query for the page at &lt;code&gt;(current base + current size)&lt;&#x2F;code&gt; to fetch the next region. Essentially, we want to loop until it fails, after which we&#x27;ll know there are no more pages&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn memory_regions(&amp;amp;self) -&amp;gt; Vec&amp;lt;winapi::um::winnt::MEMORY_BASIC_INFORMATION&amp;gt; {
    let mut base = 0;
    let mut regions = Vec::new();
    let mut info = MaybeUninit::uninit();

    loop {
        &#x2F;&#x2F; SAFETY: the info structure points to valid memory.
        let written = unsafe {
            winapi::um::memoryapi::VirtualQueryEx(
                self.handle.as_ptr(),
                base as *const _,
                info.as_mut_ptr(),
                mem::size_of::&amp;lt;winapi::um::winnt::MEMORY_BASIC_INFORMATION&amp;gt;(),
            )
        };
        if written == 0 {
            break regions;
        }
        &#x2F;&#x2F; SAFETY: a non-zero amount was written to the structure
        let info = unsafe { info.assume_init() };
        base = info.BaseAddress as usize + info.RegionSize;
        regions.push(info);
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;RegionSize&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The size of the region beginning at the base address in which all pages have identical attributes, in bytes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;…which also hints that the value we want is &amp;quot;base address&amp;quot;, not the &amp;quot;allocation base&amp;quot;. With these two values, we can essentially iterate over all the page ranges:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;dbg!(process.memory_regions().len());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.63s
     Running `target\debug\memo.exe`

[src\main.rs:189] process.memory_regions().len() = 367
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s a lot of pages!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;protection-levels&quot;&gt;Protection levels&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s try to narrow the amount of pages down. How many pages aren&#x27;t &lt;code&gt;PAGE_NOACCESS&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;dbg!(process
    .memory_regions()
    .into_iter()
    .filter(|p| p.Protect != winapi::um::winnt::PAGE_NOACCESS)
    .count());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;295
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Still a fair bit! Most likely, there are just a few interleaved &lt;code&gt;NOACCESS&lt;&#x2F;code&gt; pages, and the rest are allocated each with different protection levels. How much memory do we need to scan through?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;dbg!(process
    .memory_regions()
    .into_iter()
    .filter(|p| p.Protect != winapi::um::winnt::PAGE_NOACCESS)
    .map(|p| p.RegionSize)
    .sum::&amp;lt;usize&amp;gt;());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;4480434176
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wait, what? What do you mean over 4 GiB? The Task Manager claims that the Cheat Engine Tutorial is only using 2.1 MB worth of RAM! Perhaps we can narrow down the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;memory&#x2F;memory-protection-constants&quot;&gt;protection levels&lt;&#x2F;a&gt; a bit more. If you look at the scan options in Cheat Engine, you will notice the &amp;quot;Memory Scan Options&amp;quot; groupbox. By default, it only scans for memory that is writable, and doesn&#x27;t care if it&#x27;s executable or not:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let mask = winnt::PAGE_EXECUTE_READWRITE
    | winnt::PAGE_EXECUTE_WRITECOPY
    | winnt::PAGE_READWRITE
    | winnt::PAGE_WRITECOPY;

dbg!(process
    .memory_regions()
    .into_iter()
    .filter(|p| (p.Protect &amp;amp; mask) != 0)
    .map(|p| p.RegionSize)
    .sum::&amp;lt;usize&amp;gt;());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each memory protection level has its own bit, so we can OR them all together to have a single mask. When ANDing this mask with the protection level, if any bit is set, it will be non-zero, meaning we want to keep this region.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t ask me why there isn&#x27;t a specific bit for &amp;quot;write&amp;quot;, &amp;quot;read&amp;quot;, &amp;quot;execute&amp;quot;, and there are only bits for combinations. I guess this way Windows forbids certain combinations.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;2580480
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hey, that&#x27;s close to the value shown by the Task Manager! A handfull of megabytes is a lot more manageable than 4 entire gigabytes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;actually-running-our-first-scan&quot;&gt;Actually running our First Scan&lt;&#x2F;h2&gt;
&lt;p&gt;Okay, we have all the memory regions from which the program can read, write, or execute. Now we also can read the memory in these regions:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let regions = process
    .memory_regions()
    .into_iter()
    .filter(|p| (p.Protect &amp;amp; mask) != 0)
    .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();

println!(&amp;quot;Scanning {} memory regions&amp;quot;, regions.len());

regions.into_iter().for_each(|region| {
    match process.read_memory(region.BaseAddress as _, region.RegionSize) {
        Ok(memory) =&amp;gt; todo!(),
        Err(err) =&amp;gt; eprintln!(
            &amp;quot;Failed to read {} bytes at {:?}: {}&amp;quot;,
            region.RegionSize, region.BaseAddress, err,
        ),
    }
})
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All that&#x27;s left is for us to scan for a target value. To do this, we want to iterate over all the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;primitive.slice.html#method.windows&quot;&gt;&lt;code&gt;slice::windows&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; of size equal to the size of our scan type.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let target: i32 = ...;
let target = target.to_ne_bytes();

&#x2F;&#x2F; -snip-

&#x2F;&#x2F; inside the Ok match, replacing the todo!() -- this is where the first scan happens
Ok(memory) =&amp;gt; memory
    .windows(target.len())
    .enumerate()
    .for_each(|(offset, window)| {
        if window == target {
            println!(
                &amp;quot;Found exact value at [{:?}+{:x}]&amp;quot;,
                region.BaseAddress, offset
            );
        }
    })
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We convert the 32-bit exact target value to its memory representation as a byte array in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;primitive.i32.html#method.to_ne_bytes&quot;&gt;native byte order&lt;&#x2F;a&gt;. This way we can compare the target bytes with the window bytes. Another option is to interpret the window bytes as an &lt;code&gt;i32&lt;&#x2F;code&gt; with &lt;code&gt;from_be_bytes&lt;&#x2F;code&gt;, but &lt;code&gt;slice::windows&lt;&#x2F;code&gt; gives us slices of type &lt;code&gt;&amp;amp;[u8]&lt;&#x2F;code&gt;, and &lt;code&gt;from_be_bytes&lt;&#x2F;code&gt; wants an &lt;code&gt;[u8; 4]&lt;&#x2F;code&gt; array, so it&#x27;s a bit more annoying to convert.&lt;&#x2F;p&gt;
&lt;p&gt;This is enough to find the value in the process&#x27; memory!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Found exact value at [0x10000+aec]
Failed to read 12288 bytes at 0x13f8000: Only part of a ReadProcessMemory or WriteProcessMemory request was completed. (os error 299)
Found exact value at [0x14f0000+3188]
Found exact value at [0x14f0000+ac74]
...
Found exact value at [0x10030e000+1816]
Found exact value at [0x7ff8f7b93000+441a]
...
Found exact value at [0x7ff8fb381000+4023]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The tutorial starts out with health &amp;quot;100&amp;quot;, which is what I scanned. Apparently, there are nearly a hundred of &lt;code&gt;100&lt;&#x2F;code&gt;-valued integers stored in the memory of the tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;Attentive readers will notice that some values are located at an offset modulo 4. In Cheat Engine, this is known as &amp;quot;Fast Scan&amp;quot;, which is enabled by default with an alignment of 4. Most of the time, values are aligned in memory, and this alignment often corresponds with the size of the type itself. For 4-byte integers, it&#x27;s common that they&#x27;re 4-byte aligned.&lt;&#x2F;p&gt;
&lt;p&gt;We can perform a fast scan ourselves with &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.step_by&quot;&gt;&lt;code&gt;step_by&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;memory
    .windows(target.len())
    .enumerate()
    .step_by(4)
    .for_each(...)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a bonus, over half the addresses are gone, so we have less results to worry about&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next-scan&quot;&gt;Next Scan&lt;&#x2F;h2&gt;
&lt;p&gt;The first scan gave us way too many results. We have no way to tell which is the correct one, as they all have the same value. What we need to do is a &lt;em&gt;second&lt;&#x2F;em&gt; scan at the &lt;em&gt;locations we just found&lt;&#x2F;em&gt;. This way, we can get a second reading, and compare it against a new value. If it&#x27;s the same, we&#x27;re on good track, and if not, we can discard a location. Repeating this process lets us cut the hundreds of potential addresses to just a handful of them.&lt;&#x2F;p&gt;
&lt;p&gt;For example, let&#x27;s say we&#x27;re scanning our current health of &lt;code&gt;100&lt;&#x2F;code&gt; in a game. This gives us over a hundred addresses that point to the value of &lt;code&gt;100&lt;&#x2F;code&gt;. If we go in-game and get hit&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#7&quot;&gt;7&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; by some enemy and get our health down to, say, &lt;code&gt;99&lt;&#x2F;code&gt; (we have a lot of defense), we can then read the memory at the hundred memory locations we found before. If this second reading is not &lt;code&gt;99&lt;&#x2F;code&gt;, we know the address does not actually point to our health pool and it just happened to also contain a &lt;code&gt;100&lt;&#x2F;code&gt; on the first scan. This address can be removed from the list of potential addresses pointing to our health.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&#x2F;&#x2F; new vector to hold the locations, before getting into `memory.windows`&#x27; for-each
let mut locations = Vec::with_capacity(regions.len());

&#x2F;&#x2F; -snip-

&#x2F;&#x2F; updating the `println!(&amp;quot;Found exact value...&amp;quot;)` to store the location instead.
if window == target {
    locations.push(region.BaseAddress as usize + offset);
}

&#x2F;&#x2F; -snip-

&#x2F;&#x2F; performing a second scan on the locations the first scan found.
let target: i32 = ...;
let target = target.to_ne_bytes();
locations.retain(|addr| match process.read_memory(*addr, target.len()) {
    Ok(memory) =&amp;gt; memory == target,
    Err(_) =&amp;gt; false,
});

println!(&amp;quot;Now have {} locations&amp;quot;, locations.len());
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We create a vector to store all the locations the first scan finds, and then retain those that match a second target value. You may have noticed that we perform a memory read, and thus a call to the Windows API, for every single address. With a hundred locations to read from, this is not a big deal, but oftentimes you will have tens of thousands of addresses. For the time being, we will not worry about this inefficiency, but we will get back to it once it matters:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Scanning 98 memory regions
Which exact value to scan for?: 100
Failed to read 12288 bytes at 0x13f8000: Only part of a ReadProcessMemory or WriteProcessMemory request was completed. (os error 299)
...
Found 49 locations
Which exact value to scan for next?: 99
Now have 1 locations
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sweet! In a real-world scenario, you will likely need to perform these additional scans a couple of times, and even then, there may be more than one value left no matter what.&lt;&#x2F;p&gt;
&lt;p&gt;For good measure, we&#x27;ll wrap our &lt;code&gt;retain&lt;&#x2F;code&gt; in a &lt;code&gt;while&lt;&#x2F;code&gt; loop&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#8&quot;&gt;8&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;while locations.len() != 1 {
    let target: i32 = ...;
    let target = target.to_ne_bytes();
    locations.retain(...);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;modifying-memory&quot;&gt;Modifying memory&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we have very likely locations pointing to our current health in memory, all that&#x27;s left is writing our new desired value to gain infinite health&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#9&quot;&gt;9&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. Much like how we&#x27;re able to read memory with &lt;code&gt;ReadProcessMemory&lt;&#x2F;code&gt;, we can write to it with &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;memoryapi&#x2F;nf-memoryapi-writeprocessmemory&quot;&gt;&lt;code&gt;WriteProcessMemory&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Its usage is straightforward:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub fn write_memory(&amp;amp;self, addr: usize, value: &amp;amp;[u8]) -&amp;gt; io::Result&amp;lt;usize&amp;gt; {
    let mut written = 0;

    &#x2F;&#x2F; SAFETY: the input value buffer points to valid memory.
    if unsafe {
        winapi::um::memoryapi::WriteProcessMemory(
            self.handle.as_ptr(),
            addr as *mut _,
            value.as_ptr().cast(),
            value.len(),
            &amp;amp;mut written,
        )
    } == FALSE
    {
        Err(io::Error::last_os_error())
    } else {
        Ok(written)
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similar to how writing to a file can return short, writing to a memory location could also return short. Here we mimic the API for writing files and return the number of bytes written. The documentation indicates that we could actually ignore the amount written by passing &lt;code&gt;ptr::null_mut()&lt;&#x2F;code&gt; as the last parameter, but it does no harm to retrieve the written count as well.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let new_value: i32 = ...;
locations
    .into_iter()
    .for_each(|addr| match process.write_memory(addr, &amp;amp;new_value) {
        Ok(n) =&amp;gt; eprintln!(&amp;quot;Written {} bytes to [{:x}]&amp;quot;, n, addr),
        Err(e) =&amp;gt; eprintln!(&amp;quot;Failed to write to [{:x}]: {}&amp;quot;, addr, e),
    });
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Now have 1 location(s)
Enter new memory value: 1000
Failed to write to [15d8b90]: Access is denied. (os error 5)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…oh noes. Oh yeah. The documentation, which I totally didn&#x27;t forget to read, mentions:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The handle must have &lt;code&gt;PROCESS_VM_WRITE&lt;&#x2F;code&gt; and &lt;code&gt;PROCESS_VM_OPERATION&lt;&#x2F;code&gt; access to the process.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;We currently open our process with &lt;code&gt;PROCESS_QUERY_INFORMATION&lt;&#x2F;code&gt; and &lt;code&gt;PROCESS_VM_READ&lt;&#x2F;code&gt;, which is enough for reading, but not for writing. Let&#x27;s adjust &lt;code&gt;OpenProcess&lt;&#x2F;code&gt; to accomodate for our new requirements:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;winapi::um::processthreadsapi::OpenProcess(
    winnt::PROCESS_QUERY_INFORMATION
        | winnt::PROCESS_VM_READ
        | winnt::PROCESS_VM_WRITE
        | winnt::PROCESS_VM_OPERATION,
    FALSE,
    pid,
)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Behold:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Now have 1 location(s)
Enter new memory value: 1000
Written 4 bytes to [15d8b90]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;6297805&#x2F;107829541-3f4f2d00-6d8a-11eb-87c4-e2f2d505afbc.png&quot; alt=&quot;Tutorial complete with memo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Isn&#x27;t that active &lt;em&gt;Next&lt;&#x2F;em&gt; button just beautiful?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;This post somehow ended up being longer than part one, but look at what we&#x27;ve achieved! We completed a step of the Cheat Engine Tutorial &lt;em&gt;without using Cheat Engine&lt;&#x2F;em&gt;. Just pure Rust. Figuring out how a program works and reimplementing it yourself is a great way to learn what it&#x27;s doing behind the scenes. And now that this code is yours, you can extend it as much as you like, without being constrained by Cheat Engine&#x27;s UI. You can automate it as much as you want.&lt;&#x2F;p&gt;
&lt;p&gt;And we&#x27;re not even done. The current tutorial has nine steps, and three additional graphical levels.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the third step of the tutorial: Unknown initial value. This will pose a challenge, because with just 2 MiB of memory, storing all the 4-byte aligned locations would require 524288 addresses (&lt;code&gt;usize&lt;&#x2F;code&gt;, 8 bytes). This adds up to twice as much memory as the original program (4 MiB), but that&#x27;s not our main concern, having to perform over five hundred thousand API calls is!&lt;&#x2F;p&gt;
&lt;p&gt;Remember that you can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;obtain the code for this post&lt;&#x2F;a&gt; over at my GitHub. You can run &lt;code&gt;git checkout step2&lt;&#x2F;code&gt; after cloning the repository to get the right version of the code.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;I did in fact use an online tool to spell it out for me.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;16 GiB is good enough for my needs. I don&#x27;t think I&#x27;ll ever upgrade to 16 EiB.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;Every address we query should have a corresponding region, even if it&#x27;s not allocated or we do not have access. This is why we can query for the memory address zero to get its corresponding region.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;Another option is to &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;sysinfoapi&#x2F;nf-sysinfoapi-getsysteminfo&quot;&gt;&lt;code&gt;GetSystemInfo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to determine the &lt;code&gt;lpMinimumApplicationAddress&lt;&#x2F;code&gt; and &lt;code&gt;lpMaximumApplicationAddress&lt;&#x2F;code&gt; and only work within bounds.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;Memory regions are page-aligned, which is a large power of two. Our alignment of 4 is much lower than this, so we&#x27;re guaranteed to start off at an aligned address.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;If it turns out that the value was actually misaligned, we will miss it. You will notice this if, after going through the whole process, there are no results. It could mean that either the value type is wrong, or the value type is misaligned. In the worst case, the value is not stored directly but is rather computed with something like &lt;code&gt;maximum - stored&lt;&#x2F;code&gt;, or XORed with some magic value, or a myriad other things.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;7&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;You could do this without getting hit, and just keep on repeating the scan for the same value over and over again. This does work, but the results are suboptimal, because there are also many other values that didn&#x27;t change. Scanning for a changed value is a better option.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;8&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;8&lt;&#x2F;sup&gt;
&lt;p&gt;You could actually just go ahead and try to modify the memory at the hundred addresses you just found, although don&#x27;t be surprised if the program starts to misbehave!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;9&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;9&lt;&#x2F;sup&gt;
&lt;p&gt;Okay, we cannot fit infinity in an &lt;code&gt;i32&lt;&#x2F;code&gt;. However, we can fit sufficiently large numbers. Like &lt;code&gt;1000&lt;&#x2F;code&gt;, which is enough to complete the tutorial.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing our own Cheat Engine: Introduction</title>
		<published>2021-02-07T00:00:00+00:00</published>
		<updated>2021-02-19T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/woce-1/" type="text/html"/>
		<id>https://lonami.dev/blog/woce-1/</id>
		<content type="html">&lt;p&gt;This is part 1 on the &lt;em&gt;Writing our own Cheat Engine&lt;&#x2F;em&gt; series:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Introduction&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;Part 2: Exact Value scanning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-3&quot;&gt;Part 3: Unknown initial value&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-4&quot;&gt;Part 4: Floating points&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-5&quot;&gt;Part 5: Code finder&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-6&quot;&gt;Part 6: Pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-7&quot;&gt;Part 7: Code Injection&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;woce-8&quot;&gt;Part 8: Multilevel pointers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cheatengine.org&#x2F;&quot;&gt;Cheat Engine&lt;&#x2F;a&gt; is a tool designed to modify single player games and contains other useful tools within itself that enable its users to debug games or other applications. It comes with a memory scanner, (dis)assembler, inspection tools and a handful other things. In this series, we will be writing our own tiny Cheat Engine capable of solving all steps of the tutorial, and diving into how it all works underneath.&lt;&#x2F;p&gt;
&lt;p&gt;Needless to say, we&#x27;re doing this for private and educational purposes only. One has to make sure to not violate the EULA or ToS of the specific application we&#x27;re attaching to. This series, much like cheatengine.org, does not condone the illegal use of the code shared.&lt;&#x2F;p&gt;
&lt;p&gt;Cheat Engine is a tool for Windows, so we will be developing for Windows as well. However, you can also &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;12977179&#x2F;4759433&quot;&gt;read memory from Linux-like systems&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scanmem&#x2F;scanmem&quot;&gt;GameConqueror&lt;&#x2F;a&gt; is a popular alternative to Cheat Engine on Linux systems, so if you feel adventurous, you could definitely follow along too! The techniques shown in this series apply regardless of how we read memory from a process. You will learn a fair bit about doing FFI in Rust too.&lt;&#x2F;p&gt;
&lt;p&gt;We will be developing the application in Rust, because it enables us to interface with the Windows API easily, is memory safe (as long as we&#x27;re careful with &lt;code&gt;unsafe&lt;&#x2F;code&gt;!), and is speedy (we will need this for later steps in the Cheat Engine tutorial). You could use any language of your choice though. For example, &lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;ctypes-and-windows&#x2F;&quot;&gt;Python also makes it relatively easy to use the Windows API&lt;&#x2F;a&gt;. You don&#x27;t need to be a Rust expert to follow along, but this series assumes some familiarity with C-family languages. Slightly advanced concepts like the use of &lt;code&gt;unsafe&lt;&#x2F;code&gt; or the &lt;code&gt;MaybeUninit&lt;&#x2F;code&gt; type will be briefly explained. What a &lt;code&gt;fn&lt;&#x2F;code&gt; is or what &lt;code&gt;let&lt;&#x2F;code&gt; does will not be explained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cheat-engine&#x2F;cheat-engine&#x2F;&quot;&gt;Cheat Engine&#x27;s source code&lt;&#x2F;a&gt; is mostly written in Pascal and C. And it&#x27;s &lt;em&gt;a lot&lt;&#x2F;em&gt; of code, with a very flat project structure, and files ranging in the thousand lines of code each. It&#x27;s daunting&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. It&#x27;s a mature project, with a lot of knowledge encoded in the code base, and a lot of features like distributed scanning or an entire disassembler. Unfortunately, there&#x27;s not a lot of comments. For these reasons, I&#x27;ll do some guesswork when possible as to how it&#x27;s working underneath, rather than actually digging into what Cheat Engine is actually doing.&lt;&#x2F;p&gt;
&lt;p&gt;With that out of the way, let&#x27;s get started!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;welcome-to-the-cheat-engine-tutorial&quot;&gt;Welcome to the Cheat Engine Tutorial&lt;&#x2F;h2&gt;
&lt;details open&gt;&lt;summary&gt;Cheat Engine Tutorial: Step 1&lt;&#x2F;summary&gt;
&lt;blockquote&gt;
&lt;p&gt;This tutorial will teach you the basics of cheating in video games. It will also show you foundational aspects of using Cheat Engine (or CE for short). Follow the steps below to get started.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Open Cheat Engine if it currently isn&#x27;t running.&lt;&#x2F;li&gt;
&lt;li&gt;Click on the &amp;quot;Open Process&amp;quot; icon (it&#x27;s the top-left icon with the computer on it, below &amp;quot;File&amp;quot;.).&lt;&#x2F;li&gt;
&lt;li&gt;With the Process List window now open, look for this tutorial&#x27;s process in the list. It will look something like &amp;gt; &amp;quot;00001F98-Tutorial-x86_64.exe&amp;quot; or &amp;quot;0000047C-Tutorial-i386.exe&amp;quot;. (The first 8 numbers&#x2F;letters will probably be different.)&lt;&#x2F;li&gt;
&lt;li&gt;Once you&#x27;ve found the process, click on it to select it, then click the &amp;quot;Open&amp;quot; button. (Don&#x27;t worry about all the &amp;gt; other buttons right now. You can learn about them later if you&#x27;re interested.)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Congratulations! If you did everything correctly, the process window should be gone with Cheat Engine now attached to the &amp;gt; tutorial (you will see the process name towards the top-center of CE).&lt;&#x2F;p&gt;
&lt;p&gt;Click the &amp;quot;Next&amp;quot; button below to continue, or fill in the password and click the &amp;quot;OK&amp;quot; button to proceed to that step.)&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re having problems, simply head over to forum.cheatengine.org, then click on &amp;quot;Tutorials&amp;quot; to view beginner-friendly &amp;gt; guides!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;enumerating-processes&quot;&gt;Enumerating processes&lt;&#x2F;h2&gt;
&lt;p&gt;Our first step is attaching to the process we want to work with. But we need a way to find that process in the first place! Having to open the task manager, look for the process we care about, noting down the process ID (PID), and slapping it in the source code is not satisfying at all. Instead, let&#x27;s enumerate all the processes from within the program, and let the user select one by typing its name.&lt;&#x2F;p&gt;
&lt;p&gt;From a quick &lt;a href=&quot;https:&#x2F;&#x2F;ddg.gg&#x2F;winapi%20enumerate%20all%20processes&quot;&gt;DuckDuckGo search&lt;&#x2F;a&gt;, we find an official tutorial for &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;psapi&#x2F;enumerating-all-processes&quot;&gt;Enumerating All Processes&lt;&#x2F;a&gt;, which leads to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;psapi&#x2F;nf-psapi-enumprocesses&quot;&gt;&lt;code&gt;EnumProcesses&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; call. Cool! Let&#x27;s slap in the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;winapi&quot;&gt;&lt;code&gt;winapi&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate on &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;, because I don&#x27;t want to write all the definitions by myself:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[dependencies]
winapi = { version = &amp;quot;0.3.9&amp;quot;, features = [&amp;quot;psapi&amp;quot;] }
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;psapi&#x2F;nf-psapi-enumprocesses&quot;&gt;&lt;code&gt;EnumProcesses&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is in &lt;code&gt;Psapi.h&lt;&#x2F;code&gt; (you can see this in the online page of its documentation), we know we&#x27;ll need the &lt;code&gt;psapi&lt;&#x2F;code&gt; crate feature. Another option is to search for it in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;winapi&#x2F;&quot;&gt;&lt;code&gt;winapi&lt;&#x2F;code&gt; documentation&lt;&#x2F;a&gt; and noting down the parent module where its stored.&lt;&#x2F;p&gt;
&lt;p&gt;The documentation for the method has the following remark:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a good idea to use a large array, because it is hard to predict how many processes there will be at the time you call &lt;strong&gt;EnumProcesses&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sidenote: reading the documentation for the methods we&#x27;ll use from the Windows API is extremely important. There&#x27;s a lot of gotchas involved, so we need to make sure we&#x27;re extra careful.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;1024 is a pretty big number, so let&#x27;s go with that:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use std::io;
use std::mem;
use winapi::shared::minwindef::{DWORD, FALSE};

pub fn enum_proc() -&amp;gt; io::Result&amp;lt;Vec&amp;lt;u32&amp;gt;&amp;gt; {
    let mut pids = Vec::&amp;lt;DWORD&amp;gt;::with_capacity(1024);
    let mut size = 0;
    &#x2F;&#x2F; SAFETY: the pointer is valid and the size matches the capacity.
    if unsafe {
        winapi::um::psapi::EnumProcesses(
            pids.as_mut_ptr(),
            (pids.capacity() * mem::size_of::&amp;lt;DWORD&amp;gt;()) as u32,
            &amp;amp;mut size,
        )
    } == FALSE
    {
        return Err(io::Error::last_os_error());
    }

    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We allocate enough space&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; for 1024 &lt;code&gt;pids&lt;&#x2F;code&gt; in a vector&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, and pass a mutable pointer to the contents to &lt;code&gt;EnumProcesses&lt;&#x2F;code&gt;. Note that the size of the array is in &lt;em&gt;bytes&lt;&#x2F;em&gt;, not items, so we need to multiply the capacity by the size of &lt;code&gt;DWORD&lt;&#x2F;code&gt;. The API likes to use &lt;code&gt;u32&lt;&#x2F;code&gt; for sizes, unlike Rust which uses &lt;code&gt;usize&lt;&#x2F;code&gt;, so we need a cast.&lt;&#x2F;p&gt;
&lt;p&gt;Last, we need another mutable variable where the amount of bytes written is stored, &lt;code&gt;size&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the function fails, the return value is zero. To get extended error information, call &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;errhandlingapi&#x2F;nf-errhandlingapi-getlasterror&quot;&gt;&lt;code&gt;GetLastError&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s precisely what we do. If it returns false (zero), we return the last OS error. Rust provides us with &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;io&#x2F;struct.Error.html#method.last_os_error&quot;&gt;&lt;code&gt;std::io::Error::last_os_error&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which essentially makes that same call but returns a proper &lt;code&gt;io::Error&lt;&#x2F;code&gt; instance. Cool!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To determine how many processes were enumerated, divide the &lt;em&gt;lpcbNeeded&lt;&#x2F;em&gt; value by &lt;code&gt;sizeof(DWORD)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Easy enough:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let count = size as usize &#x2F; mem::size_of::&amp;lt;DWORD&amp;gt;();
&#x2F;&#x2F; SAFETY: the call succeeded and count equals the right amount of items.
unsafe { pids.set_len(count) };
Ok(pids)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Rust doesn&#x27;t know that the memory for &lt;code&gt;count&lt;&#x2F;code&gt; items were initialized by the call, but we do, so we make use of the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;vec&#x2F;struct.Vec.html#method.set_len&quot;&gt;&lt;code&gt;Vec::set_len&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; call to indicate this. The Rust documentation even includes a FFI similar to our code!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s give it a ride:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn main() {
    dbg!(enum_proc().unwrap().len());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.20s
     Running `target\debug\memo.exe`
[src\main.rs:27] enum_proc().unwrap().len() = 178
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It works! But currently we only have a bunch of process identifiers, with no way of knowing which process they refer to.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;To obtain process handles for the processes whose identifiers you have just obtained, call the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;processthreadsapi&#x2F;nf-processthreadsapi-openprocess&quot;&gt;&lt;code&gt;OpenProcess&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Oh!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opening-a-process&quot;&gt;Opening a process&lt;&#x2F;h2&gt;
&lt;p&gt;The documentation for &lt;code&gt;OpenProcess&lt;&#x2F;code&gt; also contains the following:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you are finished with the handle, be sure to close it using the &lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;woce-1&#x2F;closehandle&quot;&gt;&lt;code&gt;CloseHandle&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This sounds to me like the perfect time to introduce a custom &lt;code&gt;struct Process&lt;&#x2F;code&gt; with an &lt;code&gt;impl Drop&lt;&#x2F;code&gt;! We&#x27;re using &lt;code&gt;Drop&lt;&#x2F;code&gt; to cleanup resources, not behaviour, so it&#x27;s fine. &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;pre-rfc-leave-auto-trait-for-reliable-destruction&#x2F;13825&quot;&gt;Using &lt;code&gt;Drop&lt;&#x2F;code&gt; to cleanup behaviour is a bad idea&lt;&#x2F;a&gt;. But anyway, let&#x27;s get back to the code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use std::ptr::NonNull;
use winapi::ctypes::c_void;

pub struct Process {
    pid: u32,
    handle: NonNull&amp;lt;c_void&amp;gt;,
}

impl Process {
    pub fn open(pid: u32) -&amp;gt; io::Result&amp;lt;Self&amp;gt; {
        todo!()
    }
}

impl Drop for Process {
    fn drop(&amp;amp;mut self) {
        todo!()
    }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For &lt;code&gt;open&lt;&#x2F;code&gt;, we&#x27;ll want to use &lt;code&gt;OpenProcess&lt;&#x2F;code&gt; (and we also need to add the &lt;code&gt;processthreadsapi&lt;&#x2F;code&gt; feature to the &lt;code&gt;winapi&lt;&#x2F;code&gt; dependency in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;). It returns a &lt;code&gt;HANDLE&lt;&#x2F;code&gt;, which is a nullable mutable pointer to &lt;code&gt;c_void&lt;&#x2F;code&gt;. If it&#x27;s null, the call failed, and if it&#x27;s non-null, it succeeded and we have a valid handle. This is why we use Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;ptr&#x2F;struct.NonNull.html&quot;&gt;&lt;code&gt;NonNull&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&#x2F;&#x2F; SAFETY: the call doesn&#x27;t have dangerous side-effects.
NonNull::new(unsafe { winapi::um::processthreadsapi::OpenProcess(0, FALSE, pid) })
    .map(|handle| Self { pid, handle })
    .ok_or_else(io::Error::last_os_error)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;NonNull&lt;&#x2F;code&gt; will return &lt;code&gt;Some&lt;&#x2F;code&gt; if the pointer is non-null. We map the non-null pointer to a &lt;code&gt;Process&lt;&#x2F;code&gt; instance with &lt;code&gt;Self { .. }&lt;&#x2F;code&gt;. &lt;code&gt;ok_or_else&lt;&#x2F;code&gt; converts the &lt;code&gt;Option&lt;&#x2F;code&gt; to a &lt;code&gt;Result&lt;&#x2F;code&gt; with the error builder function we provide if it was &lt;code&gt;None&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The first parameter is a bitflag of permissions we want to have. For now, we can leave it as zero (all bits unset, no specific permissions granted). The second one is whether we want to inherit the handle, which we don&#x27;t, and the third one is the process identifier. Let&#x27;s close the resource handle on &lt;code&gt;Drop&lt;&#x2F;code&gt; (after adding &lt;code&gt;handleapi&lt;&#x2F;code&gt; to the crate features):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&#x2F;&#x2F; SAFETY: the handle is valid and non-null.
unsafe { winapi::um::handleapi::CloseHandle(self.handle.as_mut()) };
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;CloseHandle&lt;&#x2F;code&gt; can actually fail (for example, on double-close), but given our invariants, it won&#x27;t. You could add an &lt;code&gt;assert!&lt;&#x2F;code&gt; to panic if this is not the case.&lt;&#x2F;p&gt;
&lt;p&gt;We can now open processes, and they will be automatically closed on &lt;code&gt;Drop&lt;&#x2F;code&gt;. Does any of this work though?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn main() {
    let mut success = 0;
    let mut failed = 0;
    enum_proc().unwrap().into_iter().for_each(|pid| match Process::open(pid) {
        Ok(_) =&amp;gt; success += 1,
        Err(_) =&amp;gt; failed += 1,
    });

    eprintln!(&amp;quot;Successfully opened {}&#x2F;{} processes&amp;quot;, success, success + failed);
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.36s
     Running `target\debug\memo.exe`
Successfully opened 0&#x2F;191 processes
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…nope. Maybe the documentation for &lt;code&gt;OpenProcess&lt;&#x2F;code&gt; says something?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;dwDesiredAccess&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The access to the process object. This access right is checked against the security descriptor for the process. This parameter can be &lt;strong&gt;one or more&lt;&#x2F;strong&gt; of the process access rights.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;One or more, but we&#x27;re setting zero permissions. I told you, reading the documentation is important&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;! The &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;procthread&#x2F;process-security-and-access-rights&quot;&gt;Process Security and Access Rights&lt;&#x2F;a&gt; page lists all possible values we could use. &lt;code&gt;PROCESS_QUERY_INFORMATION&lt;&#x2F;code&gt; seems to be appropriated:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Required to retrieve certain information about a process, such as its token, exit code, and priority class&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;OpenProcess(winapi::um::winnt::PROCESS_QUERY_INFORMATION, ...)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Does this fix it?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.36s
     Running `target\debug\memo.exe`
Successfully opened 69&#x2F;188 processes
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Nice&lt;&#x2F;em&gt;. It does solve it. But why did we only open 69 processes out of 188? Does it help if we run our code as administrator? Let&#x27;s search for &lt;code&gt;cmd&lt;&#x2F;code&gt; in the Windows menu and right click to Run as administrator, then &lt;code&gt;cd&lt;&#x2F;code&gt; into our project and try again:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target\debug\memo.exe`
Successfully opened 77&#x2F;190 processes
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re able to open a few more, so it does help. In general, we&#x27;ll want to run as administrator, so normal programs can&#x27;t sniff on what we&#x27;re doing, and so that we have permission to do more things.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-name-of-a-process&quot;&gt;Getting the name of a process&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re not done enumerating things just yet. To get the &amp;quot;name&amp;quot; of a process, we need to enumerate the modules that it has loaded, and only then can we get the module base name. The first module is the program itself, so we don&#x27;t need to enumerate &lt;em&gt;all&lt;&#x2F;em&gt; modules, just the one is enough.&lt;&#x2F;p&gt;
&lt;p&gt;For this we want &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;psapi&#x2F;nf-psapi-enumprocessmodules&quot;&gt;&lt;code&gt;EnumProcessModules&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;psapi&#x2F;nf-psapi-getmodulebasenamea&quot;&gt;&lt;code&gt;GetModuleBaseNameA&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. I&#x27;m using the ASCII variant of &lt;code&gt;GetModuleBaseName&lt;&#x2F;code&gt; because I&#x27;m too lazy to deal with UTF-16 of the &lt;code&gt;W&lt;&#x2F;code&gt; (wide, unicode) variants.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use std::mem::MaybeUninit;
use winapi::shared::minwindef::HMODULE;

pub fn name(&amp;amp;self) -&amp;gt; io::Result&amp;lt;String&amp;gt; {
    let mut module = MaybeUninit::&amp;lt;HMODULE&amp;gt;::uninit();
    let mut size = 0;
    &#x2F;&#x2F; SAFETY: the pointer is valid and the size is correct.
    if unsafe {
        winapi::um::psapi::EnumProcessModules(
            self.handle.as_ptr(),
            module.as_mut_ptr(),
            mem::size_of::&amp;lt;HMODULE&amp;gt;() as u32,
            &amp;amp;mut size,
        )
    } == FALSE
    {
        return Err(io::Error::last_os_error());
    }

    &#x2F;&#x2F; SAFETY: the call succeeded, so module is initialized.
    let module = unsafe { module.assume_init() };
    todo!()
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;EnumProcessModules&lt;&#x2F;code&gt; takes a pointer to an array of &lt;code&gt;HMODULE&lt;&#x2F;code&gt;. We could use a &lt;code&gt;Vec&lt;&#x2F;code&gt; of capacity one to hold the single module, but in memory, a pointer a single item can be seen as a pointer to an array of items. &lt;code&gt;MaybeUninit&lt;&#x2F;code&gt; helps us reserve enough memory for the one item we need.&lt;&#x2F;p&gt;
&lt;p&gt;With the module handle, we can retrieve its base name:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let mut buffer = Vec::&amp;lt;u8&amp;gt;::with_capacity(64);
&#x2F;&#x2F; SAFETY: the handle, module and buffer are all valid.
let length = unsafe {
    winapi::um::psapi::GetModuleBaseNameA(
        self.handle.as_ptr(),
        module,
        buffer.as_mut_ptr().cast(),
        buffer.capacity() as u32,
    )
};
if length == 0 {
    return Err(io::Error::last_os_error());
}

&#x2F;&#x2F; SAFETY: the call succeeded and length represents bytes.
unsafe { buffer.set_len(length as usize) };
Ok(String::from_utf8(buffer).unwrap())
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similar to how we did with &lt;code&gt;EnumProcesses&lt;&#x2F;code&gt;, we create a buffer that will hold the ASCII string of the module&#x27;s base name&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. The call wants us to pass a pointer to a mutable buffer of &lt;code&gt;i8&lt;&#x2F;code&gt;, but Rust&#x27;s &lt;code&gt;String::from_utf8&lt;&#x2F;code&gt; wants a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt;, so instead we declare a buffer of &lt;code&gt;u8&lt;&#x2F;code&gt; and &lt;code&gt;.cast()&lt;&#x2F;code&gt; the pointer in the call. You could also do this with &lt;code&gt;as _&lt;&#x2F;code&gt;, and Rust would infer the right type, but &lt;code&gt;cast&lt;&#x2F;code&gt; is neat.&lt;&#x2F;p&gt;
&lt;p&gt;We &lt;code&gt;unwrap&lt;&#x2F;code&gt; the creation of the UTF-8 string because the buffer should contain only ASCII characters (which are also valid UTF-8). We could use the &lt;code&gt;unsafe&lt;&#x2F;code&gt; variant to create the string, but what if somehow it contains non-ASCII characters? The less &lt;code&gt;unsafe&lt;&#x2F;code&gt;, the better.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see it in action:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;fn main() {
    enum_proc()
        .unwrap()
        .into_iter()
        .for_each(|pid| match Process::open(pid) {
            Ok(proc) =&amp;gt; match proc.name() {
                Ok(name) =&amp;gt; println!(&amp;quot;{}: {}&amp;quot;, pid, name),
                Err(e) =&amp;gt; println!(&amp;quot;{}: (failed to get name: {})&amp;quot;, pid, e),
            },
            Err(e) =&amp;gt; eprintln!(&amp;quot;failed to open {}: {}&amp;quot;, pid, e),
        });
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0
    Finished dev [unoptimized + debuginfo] target(s) in 0.32s
     Running `target\debug\memo.exe`
failed to open 0: The parameter is incorrect. (os error 87)
failed to open 4: Access is denied. (os error 5)
...
failed to open 5940: Access is denied. (os error 5)
5608: (failed to get name: Access is denied. (os error 5))
...
1704: (failed to get name: Access is denied. (os error 5))
failed to open 868: Access is denied. (os error 5)
...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s not good. What&#x27;s up with that? Maybe…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The handle must have the &lt;code&gt;PROCESS_QUERY_INFORMATION&lt;&#x2F;code&gt; and &lt;code&gt;PROCESS_VM_READ&lt;&#x2F;code&gt; access rights.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;…I should&#x27;ve read the documentation. Okay, fine:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;use winapi::um::winnt;
OpenProcess(winnt::PROCESS_QUERY_INFORMATION | winnt::PROCESS_VM_READ, ...)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;cargo run
   Compiling memo v0.1.0 (C:\Users\L\Desktop\memo)
    Finished dev [unoptimized + debuginfo] target(s) in 0.35s
     Running `target\debug\memo.exe`
failed to open 0: The parameter is incorrect. (os error 87)
failed to open 4: Access is denied. (os error 5)
...
9348: cheatengine-x86_64.exe
3288: Tutorial-x86_64.exe
8396: cmd.exe
4620: firefox.exe
7964: cargo.exe
10052: cargo.exe
5756: memo.exe
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hooray 🎉! There&#x27;s some processes we can&#x27;t open, but that&#x27;s because they&#x27;re system processes. Security works!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finale&quot;&gt;Finale&lt;&#x2F;h2&gt;
&lt;p&gt;That was a fairly long post when all we did was print a bunch of pids and their corresponding name. But in all fairness, we also laid out a good foundation for what&#x27;s coming next.&lt;&#x2F;p&gt;
&lt;p&gt;You can &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lonami&#x2F;memo&quot;&gt;obtain the code for this post&lt;&#x2F;a&gt; over at my GitHub. At the end of every post, the last commit will be tagged, so you can &lt;code&gt;git checkout step1&lt;&#x2F;code&gt; to see the final code for any blog post.&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;a href=&quot;&#x2F;blog&#x2F;woce-2&quot;&gt;next post&lt;&#x2F;a&gt;, we&#x27;ll tackle the second step of the tutorial: Exact Value scanning.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;&#x2F;h3&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;You could say I simply love reinventing the wheel, which I do, but in this case, the codebase contains &lt;em&gt;far&lt;&#x2F;em&gt; more features than we&#x27;re interested in. The (apparent) lack of structure and documentation regarding the code, along with the unfortunate &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cheat-engine&#x2F;cheat-engine&#x2F;issues&#x2F;60&quot;&gt;lack of license&lt;&#x2F;a&gt; for the source code, make it a no-go. There&#x27;s a license, but I think that&#x27;s for the distributed program itself.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;If it turns out that there are more than 1024 processes, our code will be unaware of those extra processes. The documentation suggests to perform the call again with a larger buffer if &lt;code&gt;count == provided capacity&lt;&#x2F;code&gt;, but given I have under 200 processes on my system, it seems unlikely we&#x27;ll reach this limit. If you&#x27;re worried about hitting this limit, simply use a larger limit or retry with a larger vector.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;C code would likely use &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winbase&#x2F;nf-winbase-globalalloc&quot;&gt;&lt;code&gt;GlobalAlloc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; here, but Rust&#x27;s &lt;code&gt;Vec&lt;&#x2F;code&gt; handles the allocation for us, making the code both simpler and more idiomatic. In general, if you see calls to &lt;code&gt;GlobalAlloc&lt;&#x2F;code&gt; when porting some code to Rust, you can probably replace it with a &lt;code&gt;Vec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;This will be a recurring theme.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;…and similar to &lt;code&gt;EnumProcesses&lt;&#x2F;code&gt;, if the name doesn&#x27;t fit in our buffer, the result will be truncated.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Data Mining, Warehousing and Information Retrieval</title>
		<published>2020-07-03T00:00:00+00:00</published>
		<updated>2020-07-03T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/university/" type="text/html"/>
		<id>https://lonami.dev/blog/university/</id>
		<content type="html">&lt;p&gt;During university, there were a few subjects where I had to write blog posts for (either as evaluable tasks or just for fun). I thought it was really fun and I wanted to preserve that work here, with the hopes it&#x27;s interesting to someone.&lt;&#x2F;p&gt;
&lt;p&gt;The posts series were auto-generated from the original HTML files and manually anonymized later.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;mdad&quot;&gt;Data Mining and Data Warehousing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;ribw&quot;&gt;Information Retrieval and Web Search&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My new computer</title>
		<published>2020-06-19T00:00:00+00:00</published>
		<updated>2020-07-03T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/new-computer/" type="text/html"/>
		<id>https://lonami.dev/blog/new-computer/</id>
		<content type="html">&lt;p&gt;This post will be mostly me ranting about setting up a new laptop, but I also just want to share my upgrade. If you&#x27;re considering installing Arch Linux with dual-boot for Windows, maybe this post will help. Or perhaps you will learn something new to troubleshoot systems in the future. Let&#x27;s begin!&lt;&#x2F;p&gt;
&lt;p&gt;Last Sunday, I ordered a Asus Rog Strix G531GT-BQ165 for 900€ (on a 20% discount) with the following specifications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Intel® Core i7-9750H (6 cores, 12MB cache, 2.6GHz up to 4.5GHz, 64-bit)&lt;&#x2F;li&gt;
&lt;li&gt;16GB RAM (8GB*2) DDR4 2666MHz&lt;&#x2F;li&gt;
&lt;li&gt;512GB SSD M.2 PCIe® NVMe&lt;&#x2F;li&gt;
&lt;li&gt;Display 15.6&amp;quot; (1920x1080&#x2F;16:9) 60Hz&lt;&#x2F;li&gt;
&lt;li&gt;Graphics NVIDIA® GeForce® GTX1650 4GB GDDR5 VRAM&lt;&#x2F;li&gt;
&lt;li&gt;LAN 10&#x2F;100&#x2F;1000&lt;&#x2F;li&gt;
&lt;li&gt;Wi-Fi 5 (802.11ac) 2x2 RangeBoost&lt;&#x2F;li&gt;
&lt;li&gt;Bluetooth 5.0&lt;&#x2F;li&gt;
&lt;li&gt;48Wh battery with 3 cells&lt;&#x2F;li&gt;
&lt;li&gt;3 x USB 3.1 (GEN1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I was mostly interested in a general upgrade (better processor, disk, more RAM), although the graphics card is a really nice addition which will allow me to take some time off on more games. After using it for a bit, I really love the feel of the keyboard, and I love the lack of numpad! (No sarcasm, I really don&#x27;t like numpads.)&lt;&#x2F;p&gt;
&lt;p&gt;This is an upgrade from my previous laptop (Asus X554LA-XX822T), which I won in a competition before entering university in a programming challenge. It has served me really well for the past five years, and had the following specifications:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Intel® Core™ i5-5200U&lt;&#x2F;li&gt;
&lt;li&gt;4GB RAM DDR3L 1600MHz (which I upgraded to have 8GB)&lt;&#x2F;li&gt;
&lt;li&gt;1TB HDD&lt;&#x2F;li&gt;
&lt;li&gt;Display 15.6&amp;quot; (1366x768&#x2F;16:9)&lt;&#x2F;li&gt;
&lt;li&gt;Intel® HD Graphics 4400&lt;&#x2F;li&gt;
&lt;li&gt;LAN 10&#x2F;100&#x2F;1000&lt;&#x2F;li&gt;
&lt;li&gt;Wifi 802.11 bgn&lt;&#x2F;li&gt;
&lt;li&gt;Bluetooth 4.0&lt;&#x2F;li&gt;
&lt;li&gt;Battery 2 cells&lt;&#x2F;li&gt;
&lt;li&gt;1 x USB 2.0&lt;&#x2F;li&gt;
&lt;li&gt;2 x USB 3.0&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Prior to this one, I had a Lenovo (also won in the same competition of the previous year), and prior to that (just for the sake of history), it was HP Pavilion, AMD A4-3300M processor, which unfortunately ended with heating problems. But that&#x27;s very old now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;laptop-arrival&quot;&gt;Laptop arrival&lt;&#x2F;h2&gt;
&lt;p&gt;The laptop arrived 2 days ago at roughly 19:00, which I put charged for 3 hours as the book said. The day after, nightmares began!&lt;&#x2F;p&gt;
&lt;p&gt;Trying to boot it the first two times was fun, as it comes with a somewhat loud sound on boot. I don&#x27;t know why they would do this, and I immediately turned it off in the BIOS.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installation-journey&quot;&gt;Installation journey&lt;&#x2F;h2&gt;
&lt;p&gt;I spent all of yesterday trying to setup Windows and Arch Linux (and didn&#x27;t even finish, it took me this morning too and even now it&#x27;s only half functional). I absolutely &lt;em&gt;hate&lt;&#x2F;em&gt; the amount of partitions the Windows installer creates on a clean disk. So instead, I first went with Arch Linux, and followed the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Installation_guide&quot;&gt;installation guide on the Arch wiki&lt;&#x2F;a&gt;. Pre-installation, setting up the wireless network, creating the partitions and formatting them went all good. I decided to avoid GRUB at first and go with rEFInd, but alas I missed a big warning on the wiki and after reboot (I would later find out) it was not mounting root properly, so all I had was whatever was in the Initramfs. Reboot didn&#x27;t work, so I had to hold the power button.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, once the partitions were created, I went to install Windows (there was a lot of back and forth burning different &lt;code&gt;.iso&lt;&#x2F;code&gt; images on the USB, which was a bit annoying because it wasn&#x27;t the fastest thing in the world). This was pretty painless, and the process was standard: select advanced to let me choose the right partition, pick the one, say &amp;quot;no&amp;quot; to everything in the services setup, and done. But this was the first Windows &lt;code&gt;.iso&lt;&#x2F;code&gt; I tried. It was an old revision, and the drivers were causing issues when running (something weird about their &lt;code&gt;.dll&lt;&#x2F;code&gt;, manually installing the &lt;code&gt;.ini&lt;&#x2F;code&gt; driver files seemed to work?). The Nvidia drivers didn&#x27;t want to be installed on such an old revision, after updating everything I could via Windows updates. So back I went to burning a newer Windows &lt;code&gt;.iso&lt;&#x2F;code&gt; and going through the same process again…&lt;&#x2F;p&gt;
&lt;p&gt;Once Windows was ready and I verified that I could boot to it correctly, it was time to have a second go at Arch Linux. And I went through the setup at least three times, getting it wrong every single time, formatting root every single time, redownloading the packages every single pain. If only had I known earlier what the issue was!&lt;&#x2F;p&gt;
&lt;p&gt;Why bother with Arch? I was pretty happy with Linux Mint, and I lowkey wanted to try NixOS, but I had used Arch before and it&#x27;s a really nice distro overall (up-to-date, has AUR, quite minimal, imperative), except for trying to install rEFInd while chrooted…&lt;&#x2F;p&gt;
&lt;p&gt;In the end I managed to get something half-working, I still need to properly configure WiFi and pulseaudio in my system but hey it works.&lt;&#x2F;p&gt;
&lt;p&gt;I like to be able to dual-boot Windows and Linux because Linux is amazing for productivity, but unfortunately, some games only work fine on Windows. Might as well have both systems and use one for gaming, while the other is my daily driver.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-arch-linux&quot;&gt;Setting up Arch Linux&lt;&#x2F;h2&gt;
&lt;p&gt;This is the process I followed to install Arch Linux in the end, along with a brief explanation on what I think the things are doing and why we are doing them. I think the wiki could do a better job at this, but I also know it&#x27;s hard to get it right for everyone. Something I do dislike is the link colour, after opening a link it becomes gray and it&#x27;s a lot easier to miss the fact that it is a link in the first place, which was tough when re-reading it because some links actually matter a lot. Furthermore, important information may just be a single line, also easy to skim over. Anyway, on to the installation process…&lt;&#x2F;p&gt;
&lt;p&gt;The first thing we want to do is configure our keyboard layout or else the keys won&#x27;t correspond to what we expect:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;loadkeys es
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because we&#x27;re on a recent system, we want to verify that UEFI works correctly. If we see files listed, then it works fine:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ls &#x2F;sys&#x2F;firmware&#x2F;efi&#x2F;efivars
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next thing we want to do is configure the WiFi, because I don&#x27;t have any ethernet cable nearby. To do this, we check what network interfaces our laptop has (we&#x27;re looking for the one prefixed with &amp;quot;w&amp;quot;, presumably for wireless, such as &amp;quot;wlan0&amp;quot; or &amp;quot;wlo1&amp;quot;), we set it up, scan for available wireless network, and finally connect. In my case, the network has WPA security so we rely on &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; to connect, passing the SSID (network name) and password:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ip link
ip link set &amp;lt;IFACE&amp;gt; up
iw dev &amp;lt;IFACE&amp;gt; scan | less
wpa_supplicant -B -i &amp;lt;IFACE&amp;gt; -c &amp;lt;(wpa_passphrase &amp;lt;SSID&amp;gt; &amp;lt;PASS&amp;gt;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that&#x27;s done, pinging an IP address like &amp;quot;1.1.1.1&amp;quot; should Just Work™, but to be able to resolve hostnames, we need to also setup a nameserver. I&#x27;m using Cloudflare&#x27;s, but you could use any other:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;echo nameserver 1.1.1.1 &amp;gt; &#x2F;etc&#x2F;resolv.conf
ping archlinux.org
^C
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the ping works, then network works! If you still have issues, you may need to &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Network_configuration#Static_IP_address&quot;&gt;manually configure a static IP address&lt;&#x2F;a&gt; and add a route with the address of your, well, router. This basically shows if we have any address, adds a static address (so people know who we are), shows what route we have, and adds a default one (so our packets know where to go):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ip address show
ip address add &amp;lt;YOUR ADDR&amp;gt;&#x2F;24 broadcast + dev &amp;lt;IFACE&amp;gt;
ip route show
ip route add default via &amp;lt;ROUTER ADDR&amp;gt; dev &amp;lt;IFACE&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that we have network available, we can enable NTP to synchronize our system time (this may be required for network operations where certificates have a validity period, not sure; in any case nobody wants a wrong system time):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;timedatectl set-ntp true
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that, we can manage our disk and partitions using &lt;code&gt;fdisk&lt;&#x2F;code&gt;. We want to define partitions to tell the system where it should live. To determine the disk name, we first list them, and then edit it. &lt;code&gt;fdisk&lt;&#x2F;code&gt; is really nice and reminds you at every step that help can be accessed with &amp;quot;m&amp;quot;, which you should constantly use to guide you through.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;fdisk -l
fdisk &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The partitions I made are the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A 100MB one for the EFI system.&lt;&#x2F;li&gt;
&lt;li&gt;A 32GB one for Linux&#x27; root &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; partition.&lt;&#x2F;li&gt;
&lt;li&gt;A 200GB one for Linux&#x27; home &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt; partition.&lt;&#x2F;li&gt;
&lt;li&gt;The rest was unallocated for Windows because I did this first.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I like to have &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; separate because I can reinstall root without losing anything from home (projects, music, photos, screenshots, videos…).&lt;&#x2F;p&gt;
&lt;p&gt;After the partitions are made, we format them in FAT32 and EXT4 which are good defaults for EFI, root and home. They need to have a format, or else they won&#x27;t be usable:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkfs.fat -F32 &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART1&amp;gt;
mkfs.ext4 &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART2&amp;gt;
mkfs.ext4 &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART3&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because the laptop was new, there was no risk to lose anything, but if you&#x27;re doing a install on a previous system, be very careful with the partition names. Make sure they match with the ones in &lt;code&gt;fdisk -l&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have usable partitions, we need to mount them or they won&#x27;t be accessible. We can do this with &lt;code&gt;mount&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mount &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART2&amp;gt; &#x2F;mnt
mkdir &#x2F;mnt&#x2F;efi
mount &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART1&amp;gt; &#x2F;mnt&#x2F;efi
mkdir &#x2F;mnt&#x2F;home
mount &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART3&amp;gt; &#x2F;mnt&#x2F;home
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember to use the correct partitions while mounting. We mount everything so that the system knows which partitions we care about, which we will let know about later on.&lt;&#x2F;p&gt;
&lt;p&gt;Next step is to setup the basic Arch Linux system on root, which can be done with &lt;code&gt;pacstrap&lt;&#x2F;code&gt;. What follows the directory is a list of packages, and you may choose any you wish (at least add &lt;code&gt;base&lt;&#x2F;code&gt;, &lt;code&gt;linux&lt;&#x2F;code&gt; and &lt;code&gt;linux-firmware&lt;&#x2F;code&gt;). These can be installed later, but I&#x27;d recommend having them from the beginning, just in case:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;pacstrap &#x2F;mnt base linux linux-firmware sudo vim-minimal dhcpcd wpa_supplicant man-db man-pages intel-ucode grub efibootmgr os-prober ntfs-3g
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Because my system has an intel CPU, I also installed &lt;code&gt;intel-ucode&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Next up is generating the &lt;code&gt;fstab&lt;&#x2F;code&gt; file, which we tell to use UUIDs to be on the safe side through &lt;code&gt;-U&lt;&#x2F;code&gt;. This file is important, because without it the system won&#x27;t know what partitions exist and will happily only boot with the initramfs, without anything of what we just installed at root. Not knowing this made me restart the entire installation process a few times.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;genfstab -U &#x2F;mnt &amp;gt;&amp;gt; &#x2F;mnt&#x2F;etc&#x2F;fstab
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After that&#x27;s done, we can change our root into our mount point and finish up configuration. We setup our timezone (so DST can be handled correctly if needed), synchronize the hardware clock (to persist the current time to the BIOS), uncomment our locales (exit &lt;code&gt;vim&lt;&#x2F;code&gt; by pressing ESC, then type &lt;code&gt;:wq&lt;&#x2F;code&gt; and press enter), generate locale files (which some applications need), configure language and keymap, update the hostname of our laptop and what indicate what &lt;code&gt;localhost&lt;&#x2F;code&gt; means…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;ln -sf &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;&amp;lt;REGION&amp;gt;&#x2F;&amp;lt;CITY&amp;gt; &#x2F;etc&#x2F;localtime
hwclock --systohc
vim &#x2F;etc&#x2F;locale.gen
locale-gen
echo LANG=es_ES.UTF-8 &amp;gt; &#x2F;etc&#x2F;locale.conf
echo KEYMAP=es &amp;gt; &#x2F;etc&#x2F;vconsole.conf
echo &amp;lt;HOST&amp;gt; &#x2F;etc&#x2F;hostname
cat &amp;lt;&amp;lt;EOF &amp;gt; &#x2F;etc&#x2F;hosts
127.0.0.1 localhost
::1 localhost
127.0.1.1 &amp;lt;HOST&amp;gt;.localdomain &amp;lt;HOST&amp;gt;
EOF
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Really, we could&#x27;ve done all of this later, and the same goes for setting root&#x27;s password with &lt;code&gt;passwd&lt;&#x2F;code&gt; or creating users (some of the groups you probably want are &lt;code&gt;power&lt;&#x2F;code&gt; and &lt;code&gt;wheel&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The important part here is installing GRUB (which also needed the &lt;code&gt;efibootmgr&lt;&#x2F;code&gt; package):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;grub-install --target=x86_64-efi --efi-directory=&#x2F;efi --bootloader-id=GRUB
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we want GRUB to find our Windows install, we also need the &lt;code&gt;os-prober&lt;&#x2F;code&gt; and &lt;code&gt;ntfs-3g&lt;&#x2F;code&gt; packages that we installed earlier with &lt;code&gt;pacstrap&lt;&#x2F;code&gt;, and with those we need to mount the Windows partition somewhere. It doesn&#x27;t matter where. With that done, we can generate the GRUB configuration file which lists all the boot options:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;mkdir &#x2F;windows
mount &#x2F;dev&#x2F;&amp;lt;DISK&amp;gt;&amp;lt;PART5&amp;gt; &#x2F;windows
grub-mkconfig -o &#x2F;boot&#x2F;grub&#x2F;grub.cfg
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(In my case, I installed Windows before completing the Arch install, which created an additional partition in between).&lt;&#x2F;p&gt;
&lt;p&gt;With GRUB ready, we can exit the chroot and reboot the system, and if all went well, you should be greeted with a choice of operating system to use:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;exit
reboot
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If for some reason you need to find what mountpoints were active prior to rebooting (to &lt;code&gt;unmount&lt;&#x2F;code&gt; them for example), you can use &lt;code&gt;findmnt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Before GRUB I tried rEFInd, which as I explained had issues with for missing a warning. Then I tried systemd-boot, which did not pick up Arch at first. That&#x27;s where the several reinstalls come from, I didn&#x27;t want to work with a half-worked system so I mostly redid the entire process quite a few times.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;migrating-to-the-new-laptop&quot;&gt;Migrating to the new laptop&lt;&#x2F;h2&gt;
&lt;p&gt;I had a external disk formatted with NTFS. Of course, after moving every file I cared about from my previous Linux install caused all the permissions to reset. All my &lt;code&gt;.git&lt;&#x2F;code&gt; repositories, dirty with file permission changes! This is going to take a while to fix, or maybe I should just &lt;code&gt;git config core.fileMode false&lt;&#x2F;code&gt;. Here is a &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;2083563&quot;&gt;lovely command&lt;&#x2F;a&gt; to sort them out on a per-repository basis:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git diff --summary | grep --color &#x27;mode change 100644 =&amp;gt; 100755&#x27; | cut -d&#x27; &#x27; -f7- | xargs -d&#x27;\n&#x27; chmod -x
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I never realized how much I had stored over the years, but it really was a lot. While moving things to the external disk, I tried to do some cleanup, such as removing some build artifacts which needlessly occupy space, or completely skipping all the binary application files. If I need those I will install them anyway. The process was mostly focused on finding all the projects and program data that I did care about, or even some game saves. Nothing too difficult, but definitely time consuming.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tuning-arch&quot;&gt;Tuning Arch&lt;&#x2F;h2&gt;
&lt;p&gt;Now that our system is ready, install &lt;code&gt;pacman-contrib&lt;&#x2F;code&gt; to grab a copy of the &lt;code&gt;rankmirrors&lt;&#x2F;code&gt; speed. It should help speed up the download of whatever packages you want to install, since it will help us &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Mirrors#List_by_speed&quot;&gt;rank the mirrors by download speed&lt;&#x2F;a&gt;. Making a copy of the file is important, otherwise whenever you try to install something it will fail saying it can&#x27;t find anything.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;cp &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist.backup
sed -i &#x27;s&#x2F;^#Server&#x2F;Server&#x2F;&#x27; &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist.backup
rankmirrors -n 6 &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist.backup | tee &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will take a while, but it should be well worth it. We&#x27;re using &lt;code&gt;tee&lt;&#x2F;code&gt; to see the progress as it goes.&lt;&#x2F;p&gt;
&lt;p&gt;Some other packages I installed after I had a working system in no particular order:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;xfce4&lt;&#x2F;code&gt; and &lt;code&gt;xorg-server&lt;&#x2F;code&gt;. I just love the simplicity of XFCE.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xfce4-whiskermenu-plugin&lt;&#x2F;code&gt;, a really nice start menu.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xfce4-pulseaudio-plugin&lt;&#x2F;code&gt; and &lt;code&gt;pavucontrol&lt;&#x2F;code&gt;, to quickly adjust the audio with my mouse.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xfce4-taskmanager&lt;&#x2F;code&gt;, a GUI alternative I generally prefer to &lt;code&gt;htop&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pulseaudio&lt;&#x2F;code&gt; and &lt;code&gt;pulseaudio-alsa&lt;&#x2F;code&gt; to get nice integration with XFCE4 and audio mixing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;firefox&lt;&#x2F;code&gt;, which comes with fonts too. A really good web browser.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git&lt;&#x2F;code&gt;, to commit &lt;del&gt;crimes&lt;&#x2F;del&gt; code.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;code&lt;&#x2F;code&gt;, a wonderful editor which I used to write this blog entry.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nano&lt;&#x2F;code&gt;, so much nicer to write a simple commit message.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;python&lt;&#x2F;code&gt; and &lt;code&gt;python-pip&lt;&#x2F;code&gt;, my favourite language to toy around ideas or use as a calculator.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;telegram-desktop&lt;&#x2F;code&gt;, for my needs on sharing memes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cmus&lt;&#x2F;code&gt; and &lt;code&gt;mpv&lt;&#x2F;code&gt;, a simple terminal music player and media player.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;openssh&lt;&#x2F;code&gt;, to connect into any VPS I have access to.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;base-devel&lt;&#x2F;code&gt;, necessary to build most projects I&#x27;ll find myself working with (or even compiling some projects Rust which I installed via &lt;code&gt;rustup&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;flac&lt;&#x2F;code&gt;, &lt;code&gt;libmad&lt;&#x2F;code&gt;, &lt;code&gt;opus&lt;&#x2F;code&gt;, and &lt;code&gt;libvorbis&lt;&#x2F;code&gt;, to be able to play more audio files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;inkscape&lt;&#x2F;code&gt;, to make random drawings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg&lt;&#x2F;code&gt;, to convert media or record screen.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xclip&lt;&#x2F;code&gt;, to automatically copy screenshots to my clipboard.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gvfs&lt;&#x2F;code&gt;, needed by Thunar to handle mounting and having a trash (perma-deletion by default can be nasty sometimes).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;noto-fonts&lt;&#x2F;code&gt;, &lt;code&gt;noto-fonts-cjk&lt;&#x2F;code&gt;, &lt;code&gt;noto-fonts-extra&lt;&#x2F;code&gt; and &lt;code&gt;noto-fonts-emoji&lt;&#x2F;code&gt;, if you don&#x27;t want missing gliphs everywhere.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xfce4-notifyd&lt;&#x2F;code&gt; and &lt;code&gt;libnotify&lt;&#x2F;code&gt;, for notifications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cronie&lt;&#x2F;code&gt;, to be able to &lt;code&gt;crontab -e&lt;&#x2F;code&gt;. Make sure to &lt;code&gt;system enable cronie&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xarchiver&lt;&#x2F;code&gt; (with &lt;code&gt;p7zip&lt;&#x2F;code&gt;, &lt;code&gt;zip&lt;&#x2F;code&gt;, &lt;code&gt;unzip&lt;&#x2F;code&gt; and &lt;code&gt;unrar&lt;&#x2F;code&gt;) to uncompress stuff.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xreader&lt;&#x2F;code&gt; to read &lt;code&gt;.pdf&lt;&#x2F;code&gt; files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sqlitebrowser&lt;&#x2F;code&gt; is always nice to tinker around with SQLite databases.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;jre8-openjdk&lt;&#x2F;code&gt; if you want to run Java applications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;smartmontools&lt;&#x2F;code&gt; is nice with a SSD to view your disk statistics.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;After that, I configured my Super L key to launch &lt;code&gt;xfce4-popup-whiskermenu&lt;&#x2F;code&gt; so that it opens the application menu, pretty much the same as it would on Windows, moved the panels around and configured them to my needs, and it feels like home once more.&lt;&#x2F;p&gt;
&lt;p&gt;I made some mistakes while &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Systemd-networkd&quot;&gt;configuring systemd-networkd&lt;&#x2F;a&gt; and accidentally added a service that was incorrect, which caused boot to wait for it to timeout before completing. My boot time was taking 90 seconds longer because of this! &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;archlinux&#x2F;comments&#x2F;4nv9yi&#x2F;my_arch_greets_me_now_with_a_start_job&#x2F;&quot;&gt;The solution was to remove said service&lt;&#x2F;a&gt;, so this is something to look out for.&lt;&#x2F;p&gt;
&lt;p&gt;In order to find what was taking long, I had to edit the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;kernel_parameters&quot;&gt;kernel parameters&lt;&#x2F;a&gt; to remove the &lt;code&gt;quiet&lt;&#x2F;code&gt; option. I prefer seeing the output on what my computer is doing anyway, because it gives me a sense of progress and most importantly is of great value when things go wrong. Another interesting option is &lt;code&gt;noauto,x-systemd.automount&lt;&#x2F;code&gt;, which makes a disk lazily-mounted. If you have a slow disk, this could help speed things up.&lt;&#x2F;p&gt;
&lt;p&gt;If you see a service taking long, you can also use &lt;code&gt;systemd-analyze blame&lt;&#x2F;code&gt; to see what takes the longest, and &lt;code&gt;systemctl list-dependencies&lt;&#x2F;code&gt; is also helpful to find what services are active.&lt;&#x2F;p&gt;
&lt;p&gt;My &lt;code&gt;locale charmap&lt;&#x2F;code&gt; was spitting out a bunch of warnings:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;$ locale charmap
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_ALL to default locale: No such file or directory
ANSI_X3.4-1968
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…ANSI encoding? Immediately I added the following to &lt;code&gt;~&#x2F;.bashrc&lt;&#x2F;code&gt; and &lt;code&gt;~&#x2F;.profile&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For some reason, I also had to edit &lt;code&gt;xfce4-terminal&lt;&#x2F;code&gt;&#x27;s preferences in advanced to change the default character encoding to UTF-8. This also solved my issues with pasting things into the terminal, and also proper rendering! I guess pastes were not working because it had some characters that could not be encoded.&lt;&#x2F;p&gt;
&lt;p&gt;To have working notifications, I added the following to &lt;code&gt;~&#x2F;.bash_profile&lt;&#x2F;code&gt; after &lt;code&gt;exec startx&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;systemctl --user start xfce4-notifyd.service
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;m pretty sure there&#x27;s a better way to do this, or maybe it&#x27;s not even necessary, but this works for me.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the other things I had left to do was setting up &lt;code&gt;sccache&lt;&#x2F;code&gt; to speed up Rust builds:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;cargo install sccache
echo export RUSTC_WRAPPER=sccache &amp;gt;&amp;gt; ~&#x2F;.bashrc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once I had &lt;code&gt;cargo&lt;&#x2F;code&gt; ready, installed &lt;code&gt;hacksaw&lt;&#x2F;code&gt; and &lt;code&gt;shotgun&lt;&#x2F;code&gt; with it to perform screenshots.&lt;&#x2F;p&gt;
&lt;p&gt;I also disabled the security delay when downloading files in Firefox because it&#x27;s just annoying, in &lt;code&gt;about:config&lt;&#x2F;code&gt; setting &lt;code&gt;security.dialog_enable_delay&lt;&#x2F;code&gt; to &lt;code&gt;0&lt;&#x2F;code&gt;, and added the &lt;a href=&quot;https:&#x2F;&#x2F;alisdair.mcdiarmid.org&#x2F;kill-sticky-headers&#x2F;&quot;&gt;Kill sticky headers&lt;&#x2F;a&gt; to my bookmarks (you may prefer &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;t-mart&#x2F;kill-sticky&quot;&gt;the updated version&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;utils-linux&lt;&#x2F;code&gt; comes with a &lt;code&gt;fstrim&lt;&#x2F;code&gt; utility to &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Solid_state_drive#Periodic_TRIM&quot;&gt;trim the SSD weekly&lt;&#x2F;a&gt;, which I want enabled via &lt;code&gt;systemctl enable fstrim.timer&lt;&#x2F;code&gt; (you may also want to &lt;code&gt;start&lt;&#x2F;code&gt; it if you don&#x27;t reboot often). For more SSD tips, check &lt;a href=&quot;https:&#x2F;&#x2F;easylinuxtipsproject.blogspot.com&#x2F;p&#x2F;ssd.html&quot;&gt;How to optimize your Solid State Drive&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If the sound is funky prior to reboot, try &lt;code&gt;pulseaudio --kill&lt;&#x2F;code&gt; and &lt;code&gt;pulseaudio --start&lt;&#x2F;code&gt;, or delete &lt;code&gt;~&#x2F;.config&#x2F;pulse&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t been able to get the brightness keys to work yet, but it&#x27;s not a big deal, because scrolling on the power manager plugin of Xfce does work (and also &lt;code&gt;xbacklight&lt;&#x2F;code&gt; works, or writing directly to &lt;code&gt;&#x2F;sys&#x2F;class&#x2F;backlight&#x2F;*&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tuning-windows&quot;&gt;Tuning Windows&lt;&#x2F;h2&gt;
&lt;p&gt;On the Windows side, I disabled the annoying Windows defender by running (&lt;kbd&gt;Ctrl+R&lt;&#x2F;kbd&gt;) &lt;code&gt;gpedit.msc&lt;&#x2F;code&gt; and editing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Computer Configuration &amp;gt; Administrative Templates &amp;gt; Windows Components &amp;gt; Windows Defender » Turn off Windows Defender » Enable&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;User Configuration &amp;gt; Administrative Templates &amp;gt; Start Menu and Taskbar » Remove Notifications and Action Center » Enable&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also updated the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WindowsLies&#x2F;BlockWindows&#x2F;raw&#x2F;master&#x2F;hosts&quot;&gt;&lt;code&gt;hosts&lt;&#x2F;code&gt; file&lt;&#x2F;a&gt; (located at &lt;code&gt;%windir%\system32\Drivers\etc\hosts&lt;&#x2F;code&gt;) with the hope that it will stop some of the telemetry.&lt;&#x2F;p&gt;
&lt;p&gt;Last, to have consistent time on Windows and Linux, I changed the following registry key for a &lt;code&gt;qword&lt;&#x2F;code&gt; with value &lt;code&gt;1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation\RealTimeIsUniversal
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(The key might not exist, but you can create it if that&#x27;s the case).&lt;&#x2F;p&gt;
&lt;p&gt;All this time, my laptop had the keyboard lights on, which have been quite annoying. Apparently, they also can cause &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ValveIndex&#x2F;comments&#x2F;cm6pos&#x2F;psa_uninstalldisable_aura_sync_lighting_if_you&#x2F;&quot;&gt;massive FPS drops&lt;&#x2F;a&gt;. I headed over to &lt;a href=&quot;https:&#x2F;&#x2F;rog.asus.com&#x2F;downloads&#x2F;&quot;&gt;Asus Rog downloads&lt;&#x2F;a&gt;, selected Aura Sync…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;# Not Found

The requested URL &#x2F;campaign&#x2F;aura&#x2F;us&#x2F;Sync.html was not found on this server.

Additionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…great! I&#x27;ll just find the &lt;a href=&quot;https:&#x2F;&#x2F;www.asus.com&#x2F;campaign&#x2F;aura&#x2F;global&#x2F;&quot;&gt;Aura site&lt;&#x2F;a&gt; somewhere else…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;# ASUS

# We&#x27;ll be back.

Hi, our website is temporarily closed for service enhancements.

We&#x27;ll be back shortly.Thank you for your patience!
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh come on. After waiting for the next day, I headed over, downloaded their software, tried to install it and it was an awful experience. It felt like I was purposedly installing malware. It spammed and flashed a lot of &lt;code&gt;cmd&lt;&#x2F;code&gt;&#x27;s on screen as if it was a virus. It was stuck at 100% doing that and then, Windows blue-screened with &lt;code&gt;KERNEL_MODE_HEAP_CORRUPTION&lt;&#x2F;code&gt;. Amazing. How do you screw up this bad?&lt;&#x2F;p&gt;
&lt;p&gt;Well, at least rebooting worked. I tried to &lt;a href=&quot;https:&#x2F;&#x2F;answers.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;forum&#x2F;all&#x2F;unable-to-uninstall-asus-aura-sync-utility&#x2F;e9bec36c-e62f-4773-80be-88fb68dace16&quot;&gt;uninstall Aura, but of course that failed&lt;&#x2F;a&gt;. Using the &lt;a href=&quot;https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-us&#x2F;help&#x2F;17588&#x2F;windows-fix-problems-that-block-programs-being-installed-or-removed&quot;&gt;troubleshooter to uninstall programs&lt;&#x2F;a&gt; helped me remove most of the crap that was installed.&lt;&#x2F;p&gt;
&lt;p&gt;After searching around how to disable the lights (because &lt;a href=&quot;https:&#x2F;&#x2F;rog.asus.com&#x2F;forum&#x2F;showthread.php?112786-Option-to-Disable-Aura-Lights-on-Strix-G-series-(G531GT)-irrespective-of-OSes&quot;&gt;my BIOS did not have this setting&lt;&#x2F;a&gt;), I stumbled upon &lt;a href=&quot;https:&#x2F;&#x2F;rog.asus.com&#x2F;us&#x2F;innovation&#x2F;armoury_crate&#x2F;&quot;&gt;&amp;quot;Armoury Crate&amp;quot;&lt;&#x2F;a&gt;. Okay, fine, I will install that.&lt;&#x2F;p&gt;
&lt;p&gt;The experience wasn&#x27;t much better. It did the same thing with a lot of consoles flashing on screen. And of course, it resulted in another blue-screen, this time &lt;code&gt;KERNEL_SECURITY_CHECK_FAILURE&lt;&#x2F;code&gt;. To finish up, the BSOD kept happening as I rebooted the system. &lt;del&gt;Time to reinstall Windows once more.&lt;&#x2F;del&gt; After booting and crashing a few more times I could get into secure mode and perform the reinstall from there, which saved me from burning the &lt;code&gt;.iso&lt;&#x2F;code&gt; again.&lt;&#x2F;p&gt;
&lt;p&gt;Asus software might be good, but the software is utter crap.&lt;&#x2F;p&gt;
&lt;p&gt;After trying out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wroberts&#x2F;rogauracore&quot;&gt;rogauracore&lt;&#x2F;a&gt; (which didn&#x27;t list my model), it worked! I could disable the stupid lights from Linux, and &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.com&#x2F;CalcProgrammer1&#x2F;OpenRGB&#x2F;-&#x2F;wikis&#x2F;home&quot;&gt;OpenRGB&lt;&#x2F;a&gt; also works on Windows which may be worth checking out too.&lt;&#x2F;p&gt;
&lt;p&gt;Because &lt;code&gt;rougauracore&lt;&#x2F;code&gt; helped me and they linked to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;linuxhw&#x2F;hw-probe&#x2F;blob&#x2F;master&#x2F;README.md#appimage&quot;&gt;hw-probe&lt;&#x2F;a&gt;, I decided to &lt;a href=&quot;https:&#x2F;&#x2F;linux-hardware.org&#x2F;?probe=0e3e48c501&quot;&gt;run it on my system&lt;&#x2F;a&gt;, with the hopes it is useful for other people.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;Closing words&lt;&#x2F;h2&gt;
&lt;p&gt;I hope the installation journey is at least useful to someone, or that you enjoyed reading about it all. If not, sorry!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Tips for Outpost</title>
		<published>2020-05-10T00:00:00+00:00</published>
		<updated>2020-05-22T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/tips-outpost/" type="text/html"/>
		<id>https://lonami.dev/blog/tips-outpost/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;1127110&#x2F;Outpost&#x2F;&quot;&gt;Outpost&lt;&#x2F;a&gt; is a fun little game by Open Mid Interactive that has popped in recently in my recommended section of Steam, and I decided to give it a try.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s a fun tower-defense game with progression, different graphics and random world generation which makes it quite fun for a few hours. In this post I want to talk about some tips I found useful to get past night 50.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;build-pattern&quot;&gt;Build Pattern&lt;&#x2F;h2&gt;
&lt;p&gt;At first, you may be inclined to design a checkerboard pattern like the following, where &amp;quot;C&amp;quot; is the Crystal shrine, &amp;quot;S&amp;quot; is a stone launcher and &amp;quot;B&amp;quot; is a booster:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;tips-outpost&#x2F;outpost-bad-pattern.svg&quot; alt=&quot;Bad Outpost build pattern&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, this pattern will apply &lt;strong&gt;4&lt;&#x2F;strong&gt; boosts to every turret, but unfortunately, the other 4 slots of the booster are wasted! This is because boosters are able to power 8 different towers, and you really want to maximize that. Here&#x27;s a better design:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;tips-outpost&#x2F;outpost-good-pattern.svg&quot; alt=&quot;Good Outpost build pattern&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The shrine&#x27;s tower does get boosted, but it&#x27;s still not really worth it to boost it. This pattern works good, and it&#x27;s really easy to tile: just repeat the same 3x3 pattern.&lt;&#x2F;p&gt;
&lt;p&gt;Nonetheless, we can do better. What if we applied multiple boosters to the same tower while still applying all 8 boosts?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;tips-outpost&#x2F;outpost-best-pattern.svg&quot; alt=&quot;Best Outpost build pattern&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s what peak performance looks like. You can actually apply multiple boosters to the same tower, and it works great.&lt;&#x2F;p&gt;
&lt;p&gt;Now, is it really worth it building anywhere except around the shrine? Not really. You never know where a boss will come from, so all sides need a lot of defense if you want to stand a chance.&lt;&#x2F;p&gt;
&lt;p&gt;The addition of traps in 1.6 is amazing. You want to build these outside your strong &amp;quot;core&amp;quot;, mostly to slow the enemies down so your turrets have more time to finish them off. Don&#x27;t waste boosters on the traps, and build them at a reasonable distance from the center (the sixth tile is a good spot):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;tips-outpost&#x2F;outpost-trap-pattern.svg&quot; alt=&quot;Trap Outpost build pattern&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you gather enough materials, you can build more trap and cannon layers outside, roughly at enough distance to slow them for enough duration until they reach the next layer of traps, and so on. Probably a single gap of &amp;quot;cannon, booster, cannon&amp;quot; is enough between trap layers, just not in the center where you need a lot of fire power.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;talents&quot;&gt;Talents&lt;&#x2F;h2&gt;
&lt;p&gt;Talents are the way progression works in the game. Generally, after a run, you will have enough experience to upgrade nearly all talents of roughly the same tier. However, some are worth upgrading more than others (which provide basically no value).&lt;&#x2F;p&gt;
&lt;p&gt;The best ones to upgrade are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Starting supplies. Amazing to get good tools early.&lt;&#x2F;li&gt;
&lt;li&gt;Shrine shield. Very useful to hold against tough bosses.&lt;&#x2F;li&gt;
&lt;li&gt;Better buildings (cannon, boosters, bed and traps). They&#x27;re a must to deal the most damage.&lt;&#x2F;li&gt;
&lt;li&gt;Better pickaxe. Stone is limited, so better make good use of it.&lt;&#x2F;li&gt;
&lt;li&gt;Better chests. They provide an insane amount of resources early.&lt;&#x2F;li&gt;
&lt;li&gt;Winter slow. Turrets will have more time to deal damage, it&#x27;s perfect.&lt;&#x2F;li&gt;
&lt;li&gt;More time. Useful if you&#x27;re running out, although generally you enter nights early after having a good core anyway.&lt;&#x2F;li&gt;
&lt;li&gt;More rocks. Similar to a better pickaxe, more stone is always better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some decent ones:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In-shrine turret. It&#x27;s okay to get past the first night without building but not much beyond that.&lt;&#x2F;li&gt;
&lt;li&gt;Better axe and greaves. Great to save some energy and really nice quality of life to move around.&lt;&#x2F;li&gt;
&lt;li&gt;Tree growth. Normally there&#x27;s enough trees for this not to be an issue but it can save some time gathering wood.&lt;&#x2F;li&gt;
&lt;li&gt;Wisps. They&#x27;re half-decent since they can provide materials once you max out or max out expensive gear.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some okay ones:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Extra XP while playing. Generally not needed due to the way XP scales per night, but can be a good boost.&lt;&#x2F;li&gt;
&lt;li&gt;Runestones. Not as reliable as chests but some can grant more energy per day.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some crap ones:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Boosts for other seasons. I mean, winter is already the best, no use there.&lt;&#x2F;li&gt;
&lt;li&gt;Bow. The bow is very useless at the moment, it&#x27;s not worth your experience.&lt;&#x2F;li&gt;
&lt;li&gt;More energy per bush. Not really worth hunting for bushes since you will have enough energy to do well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;turrets&quot;&gt;Turrets&lt;&#x2F;h2&gt;
&lt;p&gt;Always build the highest tier, there&#x27;s no point in anything lower than that. You will need to deal a lot of damage in a small area, which means space is a premium.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;boosters&quot;&gt;Boosters&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re very early in the game, I recommend alternating both the flag and torch in a checkerboard pattern where the boosters should go in the pattern above. This way your towers will get extra speed and extra range, which works great.&lt;&#x2F;p&gt;
&lt;p&gt;When you&#x27;re in mid-game (stone launchers, gears and campfires), I do not recommend using campfires. The issue is their range boost is way too long, and the turrets will miss quite a few shots. It&#x27;s better to put all your power into fire speed for increased DPS, at least near the center. If you manage to build too far out and some of the turrets hardly ever shoot, you may put campfires there.&lt;&#x2F;p&gt;
&lt;p&gt;In end-game, of course alternate both of the highest tier upgrades. They are really good, and provide the best benefit &#x2F; cost ratio.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gathering-materials&quot;&gt;Gathering Materials&lt;&#x2F;h2&gt;
&lt;p&gt;It is &lt;strong&gt;very&lt;&#x2F;strong&gt; important to use all your energy every day! Otherwise it will go to waste, and you will need a lot of materials.&lt;&#x2F;p&gt;
&lt;p&gt;As of 1.6, you can mine two things at once if they&#x27;re close enough! I don&#x27;t know if this is intended or a bug, but it sure is great.&lt;&#x2F;p&gt;
&lt;p&gt;Once you&#x27;re in mid-game, your stone-based fort should stand pretty well against the nights on its own. After playing for a while you will notice, if your base can defend a boss, then it will have no issue carrying you through the nights until the next boss. You can (and should!) spend the nights gathering materials, but only when you&#x27;re confident that the night won&#x27;t run out.&lt;&#x2F;p&gt;
&lt;p&gt;Before the boss hits (every fifth night), come back to your base and use all of your materials. This is the next fort upgrade that will carry it the five next nights.&lt;&#x2F;p&gt;
&lt;p&gt;You may also speed up time during night, but make sure you use all your energy before hand. And also take care, in the current version of the game speeding up time only speeds up monster movement, not the fire rate or projectile speed of your turrets! This means they will miss more shots and can be pretty dangerous. If you&#x27;re speeding up time, consider speeding it up for a little bit, then go back to normal until things are more calm, and repeat.&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re in the end-game, try to rush for chests. They provide a huge amount of materials which is really helpful to upgrade all your tools early so you can make sure to get the most out of every rock left in the map.&lt;&#x2F;p&gt;
&lt;p&gt;In the end-game, after all stone has been collected, you don&#x27;t really need to use all of your energy anymore. Just enough to have enough wood to build with the remaining stone. This will also be nice with the bow upgrades, which admitedly can get quite powerful, but it&#x27;s best to have a strong fort first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;season&quot;&gt;Season&lt;&#x2F;h2&gt;
&lt;p&gt;In my opinion, winter is just the best of the seasons. You don&#x27;t &lt;em&gt;really&lt;&#x2F;em&gt; need that much energy (it gets tiresome), or extra tree drops, or luck. Slower movement means your turrets will be able to shoot enemies for longer, dealing more damage over time, giving them more chance to take enemies out before they reach the shrine.&lt;&#x2F;p&gt;
&lt;p&gt;Feel free to re-roll the map a few times (play and exit, or even restart the game) until you get winter if you want to go for The Play.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gear&quot;&gt;Gear&lt;&#x2F;h2&gt;
&lt;p&gt;In my opinion, you really should rush for the best pickaxe you can afford. Stone is a limited resource that doesn&#x27;t regrow like trees, so once you run out, it&#x27;s over. Better to make the best use out of it with a good pickaxe!&lt;&#x2F;p&gt;
&lt;p&gt;You may also upgrade your greaves, we all known faster movement is a &lt;em&gt;really&lt;&#x2F;em&gt; nice quality of life improvement.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, you will eventually upgrade your axe to chop wood (otherwise it&#x27;s wasted energy, really), but it&#x27;s not as much of a priority as the pickaxe.&lt;&#x2F;p&gt;
&lt;p&gt;Now, the bow is completely useless. Don&#x27;t bother with it. Your energy is better spent gathering materials to build permanent turrets that deal constant damage while you&#x27;re away, and the damage adds up with every extra turret you build.&lt;&#x2F;p&gt;
&lt;p&gt;With regards to items you carry (like sword, or helmet), look for these (from best to worst):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Less minion life.&lt;&#x2F;li&gt;
&lt;li&gt;Chance to not consume energy.&lt;&#x2F;li&gt;
&lt;li&gt;+1 turret damage.&lt;&#x2F;li&gt;
&lt;li&gt;Extra energy.&lt;&#x2F;li&gt;
&lt;li&gt;+1 drop from trees or stones.&lt;&#x2F;li&gt;
&lt;li&gt;+1 free wood or stone per day.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Less minion life, nothing to say. You will need it near end-game.&lt;&#x2F;p&gt;
&lt;p&gt;The chance to not consume energy is better the more energy you have. With a 25% chance not to consume energy, you can think of it as 1 extra energy for every 4 energy you have on average.&lt;&#x2F;p&gt;
&lt;p&gt;Turret damage is a tough one, it&#x27;s &lt;em&gt;amazing&lt;&#x2F;em&gt; mid-game (it basically doubles your damage) but falls short once you unlock the cannon where you may prefer other items. Definitely recommended if you&#x27;re getting started. You may even try to roll it on low tiers by dying on the second night, because it&#x27;s that good.&lt;&#x2F;p&gt;
&lt;p&gt;Extra energy is really good, because it means you can get more materials before it gets too rough. Make sure you have built at least two beds in the first night! This extra energy will pay of for the many nights to come.&lt;&#x2F;p&gt;
&lt;p&gt;The problem with free wood or stone per day is that you have, often, five times as much energy per day. By this I mean you can get easily 5 stone every day, which means 5 extra stone, whereas the other would provide just 1 per night. On a good run, you will get around 50 free stone or 250 extra stone. It&#x27;s a clear winner.&lt;&#x2F;p&gt;
&lt;p&gt;In end-game, more quality of life are revealing chests so that you can rush them early, if you like to hunt for them try to make better use of the slot.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;Closing words&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you enjoy the game as much as I do! Movement is sometimes janky and there&#x27;s the occassional lag spikes, but despite this it should provide at least a few good hours of gameplay. Beware however a good run can take up to an hour!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Python ctypes and Windows</title>
		<published>2019-06-19T00:00:00+00:00</published>
		<updated>2019-06-19T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/ctypes-and-windows/" type="text/html"/>
		<id>https://lonami.dev/blog/ctypes-and-windows/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;&quot;&gt;Python&lt;&#x2F;a&gt;&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;ctypes.html&quot;&gt;&lt;code&gt;ctypes&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is quite a nice library to easily load and invoke C methods available in already-compiled &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dynamic-link_library&quot;&gt;&lt;code&gt;.dll&lt;&#x2F;code&gt; files&lt;&#x2F;a&gt; without any additional dependencies. And I &lt;em&gt;love&lt;&#x2F;em&gt; depending on as little as possible.&lt;&#x2F;p&gt;
&lt;p&gt;In this blog post, we will walk through my endeavors to use &lt;code&gt;ctypes&lt;&#x2F;code&gt; with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;&quot;&gt;Windows API&lt;&#x2F;a&gt;, and do some cool stuff with it.&lt;&#x2F;p&gt;
&lt;p&gt;We will assume some knowledge of C&#x2F;++ and Python, since we will need to read and write a bit of both. Please note that this post is only an introduction to &lt;code&gt;ctypes&lt;&#x2F;code&gt;, and if you need more information you should consult the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;ctypes.html&quot;&gt;Python&#x27;s documentation for &lt;code&gt;ctypes&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While the post focuses on Windows&#x27; API, the code here probably applies to unix-based systems with little modifications.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basics&quot;&gt;Basics&lt;&#x2F;h2&gt;
&lt;p&gt;First of all, let&#x27;s learn how to load a library. Let&#x27;s say we want to load &lt;code&gt;User32.dll&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import ctypes

ctypes.windll.user32
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yes, it&#x27;s that simple. When you access an attribute of &lt;code&gt;windll&lt;&#x2F;code&gt;, said library will load. Since Windows is case-insensitive, we will use lowercase consistently.&lt;&#x2F;p&gt;
&lt;p&gt;Calling a function is just as simple. Let&#x27;s say you want to call &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;nf-winuser-setcursorpos&quot;&gt;&lt;code&gt;SetCursorPos&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is defined as follows:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;BOOL SetCursorPos(
    int X,
    int Y
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, it returns a &lt;code&gt;bool&lt;&#x2F;code&gt; and takes two inputs, &lt;code&gt;x&lt;&#x2F;code&gt; and &lt;code&gt;y&lt;&#x2F;code&gt;. So we can call it like so:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;ctypes.windll.user32.SetCursorPos(100, 100)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try it! Your cursor will move!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;funky-stuff&quot;&gt;Funky Stuff&lt;&#x2F;h2&gt;
&lt;p&gt;We can go a bit more crazy and make it form a spiral:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import math
import time

for i in range(200):
    x = int(500 + math.cos(i &#x2F; 5) * i)
    y = int(500 + math.sin(i &#x2F; 5) * i)
    ctypes.windll.user32.SetCursorPos(x, y)
    time.sleep(0.05)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ah, it&#x27;s always so pleasant to do random stuff when programming. Sure makes it more fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;complex-structures&quot;&gt;Complex Structures&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;SetCursorPos&lt;&#x2F;code&gt; was really simple. It took two parameters and they both were integers. Let&#x27;s go with something harder. Let&#x27;s go with &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;nf-winuser-sendinput&quot;&gt;&lt;code&gt;SendInput&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;! Emulating input will be a fun exercise:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;UINT SendInput(
    UINT    cInputs,
    LPINPUT pInputs,
    int     cbSize
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay, &lt;code&gt;LPINPUT&lt;&#x2F;code&gt;, what are you? Microsoft likes to prefix types with what they are. In this case, &lt;code&gt;LP&lt;&#x2F;code&gt; stands for &amp;quot;Long Pointer&amp;quot; (I guess?), so &lt;code&gt;LPINPUT&lt;&#x2F;code&gt; is just a Long Pointer to &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;ns-winuser-taginput&quot;&gt;&lt;code&gt;INPUT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;typedef struct tagINPUT {
    DWORD type;
    union {
        MOUSEINPUT    mi;
        KEYBDINPUT    ki;
        HARDWAREINPUT hi;
    } DUMMYUNIONNAME;
} INPUT, *PINPUT, *LPINPUT;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, that&#x27;s new. We have a &lt;code&gt;struct&lt;&#x2F;code&gt; and &lt;code&gt;union&lt;&#x2F;code&gt;, two different concepts. We can define both with &lt;code&gt;ctypes&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;INPUT_MOUSE = 0
INPUT_KEYBOARD = 1
INPUT_HARDWARE = 2

class INPUT(ctypes.Structure):
    _fields_ = [
        (&#x27;type&#x27;, ctypes.c_long),
        ...
    ]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Structures are classes that subclass &lt;code&gt;ctypes.Structure&lt;&#x2F;code&gt;, and you define their fields in the &lt;code&gt;_fields_&lt;&#x2F;code&gt; class-level variable, which is a list of tuples &lt;code&gt;(field name, field type)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The C structure had a &lt;code&gt;DWORD type&lt;&#x2F;code&gt;. &lt;code&gt;DWORD&lt;&#x2F;code&gt; is a &lt;code&gt;c_long&lt;&#x2F;code&gt;, and &lt;code&gt;type&lt;&#x2F;code&gt; is a name like any other, which is why we did &lt;code&gt;(&#x27;type&#x27;, ctypes.c_long)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But what about the union? It&#x27;s anonymous, and we can&#x27;t make anonymous unions (&lt;em&gt;citation needed&lt;&#x2F;em&gt;) with &lt;code&gt;ctypes&lt;&#x2F;code&gt;. We will give it a concrete name and a type.&lt;&#x2F;p&gt;
&lt;p&gt;Before defining the union, we need to define its inner structures, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;ns-winuser-tagmouseinput&quot;&gt;&lt;code&gt;MOUSEINPUT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;ns-winuser-tagkeybdinput&quot;&gt;&lt;code&gt;KEYBDINPUT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;ns-winuser-taghardwareinput&quot;&gt;&lt;code&gt;HARDWAREINPUT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. We won&#x27;t be using them all, but since they count towards the final struct size (C will choose the largest structure as the final size), we need them, or Windows&#x27; API will get confused and refuse to work (personal experience):&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class MOUSEINPUT(ctypes.Structure):
    _fields_ = [
        (&#x27;dx&#x27;, ctypes.c_long),
        (&#x27;dy&#x27;, ctypes.c_long),
        (&#x27;mouseData&#x27;, ctypes.c_long),
        (&#x27;dwFlags&#x27;, ctypes.c_long),
        (&#x27;time&#x27;, ctypes.c_long),
        (&#x27;dwExtraInfo&#x27;, ctypes.POINTER(ctypes.c_ulong))
    ]


class KEYBDINPUT(ctypes.Structure):
    _fields_ = [
        (&#x27;wVk&#x27;, ctypes.c_short),
        (&#x27;wScan&#x27;, ctypes.c_short),
        (&#x27;dwFlags&#x27;, ctypes.c_long),
        (&#x27;time&#x27;, ctypes.c_long),
        (&#x27;dwExtraInfo&#x27;, ctypes.POINTER(ctypes.c_ulong))
    ]


class HARDWAREINPUT(ctypes.Structure):
    _fields_ = [
        (&#x27;uMsg&#x27;, ctypes.c_long),
        (&#x27;wParamL&#x27;, ctypes.c_short),
        (&#x27;wParamH&#x27;, ctypes.c_short)
    ]


class INPUTUNION(ctypes.Union):
    _fields_ = [
        (&#x27;mi&#x27;, MOUSEINPUT),
        (&#x27;ki&#x27;, KEYBDINPUT),
        (&#x27;hi&#x27;, HARDWAREINPUT)
    ]


class INPUT(ctypes.Structure):
    _fields_ = [
        (&#x27;type&#x27;, ctypes.c_long),
        (&#x27;value&#x27;, INPUTUNION)
    ]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some things to note:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pointers are defined as &lt;code&gt;ctypes.POINTER(inner type)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The field names can be anything you want. You can make them more &amp;quot;pythonic&amp;quot; if you want (such as changing &lt;code&gt;dwExtraInfo&lt;&#x2F;code&gt; for just &lt;code&gt;extra_info&lt;&#x2F;code&gt;), but I chose to stick with the original naming.&lt;&#x2F;li&gt;
&lt;li&gt;The union is very similar, but it uses &lt;code&gt;ctypes.Union&lt;&#x2F;code&gt; instead of &lt;code&gt;ctypes.Structure&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;We gave a name to the anonymous union, &lt;code&gt;INPUTUNION&lt;&#x2F;code&gt;, and used it inside &lt;code&gt;INPUT&lt;&#x2F;code&gt; with also a made-up name, &lt;code&gt;(&#x27;value&#x27;, INPUTUNION)&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now that we have all the types we need defined, we can use them:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;KEYEVENTF_KEYUP = 0x0002

def press(vk, down):
    inputs = INPUT(type=INPUT_KEYBOARD, value=INPUTUNION(ki=KEYBDINPUT(
        wVk=vk,
        wScan=0,
        dwFlags=0 if down else KEYEVENTF_KEYUP,
        time=0,
        dwExtraInfo=None
    )))
    ctypes.windll.user32.SendInput(1, ctypes.byref(inputs), ctypes.sizeof(inputs))


for char in &#x27;HELLO&#x27;:
    press(ord(char), down=True)
    press(ord(char), down=False)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run it! It will press and release the keys &lt;code&gt;hello&lt;&#x2F;code&gt; to type the word &lt;code&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;vk&lt;&#x2F;code&gt; stands for &amp;quot;virtual key&amp;quot;. Letters correspond with their upper-case ASCII value, which is what we did above. You can find all the available keys in the page with all the &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;inputdev&#x2F;virtual-key-codes&quot;&gt;Virtual Key Codes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dynamic-inputs-and-pointers&quot;&gt;Dynamic Inputs and Pointers&lt;&#x2F;h2&gt;
&lt;p&gt;What happens if a method wants something by reference? That is, a pointer to your thing? For example, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;winuser&#x2F;nf-winuser-getcursorpos&quot;&gt;&lt;code&gt;GetCursorPos&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;typedef struct tagPOINT {
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

BOOL GetCursorPos(
    LPPOINT lpPoint
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It wants a Long Pointer to &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;desktop&#x2F;api&#x2F;windef&#x2F;ns-windef-point&quot;&gt;&lt;code&gt;POINT&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. We can do just that with &lt;code&gt;ctypes.byref&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class POINT(ctypes.Structure):
    _fields_ = [
        (&#x27;x&#x27;, ctypes.c_long),
        (&#x27;y&#x27;, ctypes.c_long)
    ]


def get_mouse():
    point = POINT()
    ctypes.windll.user32.GetCursorPos(ctypes.byref(point))
    #                  pass our point by ref ^^^^^
    # this lets GetCursorPos fill its x and y fields

    return point.x, point.y


while True:
    print(get_mouse())
    time.sleep(0.05)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can track the mouse position! Make sure to &lt;code&gt;Ctrl+C&lt;&#x2F;code&gt; the program when you&#x27;re tired of it.&lt;&#x2F;p&gt;
&lt;p&gt;What happens if a method wants a dynamically-sized input?&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;buffer = ctypes.create_string_buffer(size)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In that case, you can create an in-memory &lt;code&gt;buffer&lt;&#x2F;code&gt; of &lt;code&gt;size&lt;&#x2F;code&gt; with &lt;code&gt;ctypes.create_string_buffer&lt;&#x2F;code&gt;. It will return a character array of that size, which you can pass as a pointer directly (without &lt;code&gt;ctypes.byref&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;To access the buffer&#x27;s contents, you can use either &lt;code&gt;.raw&lt;&#x2F;code&gt; or &lt;code&gt;.value&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;entire_buffer_as_bytes = buffer.raw
up_until_null = buffer.value
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the method fills in the data, you can &lt;code&gt;cast&lt;&#x2F;code&gt; your buffer back into a pointer of a concrete type:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;result_ptr = ctypes.cast(buffer, ctypes.POINTER(ctypes.c_long))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you can de-reference pointers with &lt;code&gt;.contents&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;first_result = result_ptr.contents
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;arrays&quot;&gt;Arrays&lt;&#x2F;h2&gt;
&lt;p&gt;Arrays are defined as &lt;code&gt;type * size&lt;&#x2F;code&gt;. Your linter may not like that, and if you don&#x27;t know the size beforehand, consider creating a 0-sized array. For example:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# 10 longs
ten_longs = (ctypes.c_long * 10)()
for i in range(10):
    ten_longs[i] = 2 ** i

# Unknown size of longs, e.g. inside some Structure
longs = (ctypes.c_long * 0)

# Now you know how many longs it actually was
known_longs = ctypes.cast(
    ctypes.byref(longs),
    ctypes.POINTER(ctypes.c_long * size)
).contents
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If there&#x27;s a better way to initialize arrays, please let me know.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wintypes&quot;&gt;wintypes&lt;&#x2F;h2&gt;
&lt;p&gt;Under Windows, the &lt;code&gt;ctypes&lt;&#x2F;code&gt; module has a &lt;code&gt;wintypes&lt;&#x2F;code&gt; submodule. This one contains definitions like &lt;code&gt;HWND&lt;&#x2F;code&gt; which may be useful and can be imported as:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from ctypes.wintypes import HWND, LPCWSTR, UINT
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;callbacks&quot;&gt;Callbacks&lt;&#x2F;h2&gt;
&lt;p&gt;Some functions (I&#x27;m looking at you, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;win32&#x2F;api&#x2F;winuser&#x2F;nf-winuser-enumwindows&quot;&gt;&lt;code&gt;EnumWindows&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) ask us to pass a callback. In this case, it wants a &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;previous-versions&#x2F;windows&#x2F;desktop&#x2F;legacy&#x2F;ms633498(v=vs.85)&quot;&gt;&lt;code&gt;EnumWindowsProc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;BOOL EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM      lParam
);

BOOL CALLBACK EnumWindowsProc(
    _In_ HWND   hwnd,
    _In_ LPARAM lParam
);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The naive approach won&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def callback(hwnd, lParam):
    print(hwnd)
    return True

ctypes.windll.user32.EnumWindows(callback, 0)
# ctypes.ArgumentError: argument 1: &amp;lt;class &#x27;TypeError&#x27;&amp;gt;: Don&#x27;t know how to convert parameter 1
# Aww.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead, you must wrap your function as a C definition like so:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from ctypes.wintypes import BOOL, HWND, LPARAM

EnumWindowsProc = ctypes.WINFUNCTYPE(BOOL, HWND, LPARAM)

def callback(hwnd, lParam):
    print(hwnd)
    return True

# Wrap the function in the C definition
callback = EnumWindowsProc(callback)

ctypes.windll.user32.EnumWindows(callback, 0)
# Yay, it works.
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may have noticed this is what decorators do, wrap the function. So…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from ctypes.wintypes import BOOL, HWND, LPARAM

@ctypes.WINFUNCTYPE(BOOL, HWND, LPARAM)
def callback(hwnd, lParam):
    print(hwnd)
    return True

ctypes.windll.user32.EnumWindows(callback, 0)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…will also work. And it is a &lt;em&gt;lot&lt;&#x2F;em&gt; fancier.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;Closing Words&lt;&#x2F;h2&gt;
&lt;p&gt;With the knowledge above and some experimentation, you should be able to call and do (almost) anything you want. That was pretty much all I needed on my project anyway :)&lt;&#x2F;p&gt;
&lt;p&gt;We have been letting Python convert Python values into C values, but you can do so explicitly too. For example, you can use &lt;code&gt;ctypes.c_short(17)&lt;&#x2F;code&gt; to make sure to pass that &lt;code&gt;17&lt;&#x2F;code&gt; as a &lt;code&gt;short&lt;&#x2F;code&gt;. And if you have a &lt;code&gt;c_short&lt;&#x2F;code&gt;, you can convert or cast it to its Python &lt;code&gt;.value&lt;&#x2F;code&gt; as &lt;code&gt;some_short.value&lt;&#x2F;code&gt;. The same applies for integers, longs, floats, doubles… pretty much anything, char pointers (strings) included.&lt;&#x2F;p&gt;
&lt;p&gt;If you can&#x27;t find something in their online documentation, you can always &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;&lt;code&gt;rg&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; for it in the &lt;code&gt;C:\Program Files (x86)\Windows Kits\10\Include\*&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;Note that the &lt;code&gt;ctypes.Structure&lt;&#x2F;code&gt;&#x27;s that you define can have more methods of your own. For example, you can write them a &lt;code&gt;__str__&lt;&#x2F;code&gt; to easily view its fields, or define a &lt;code&gt;@property&lt;&#x2F;code&gt; to re-interpret some data in a meaningful way.&lt;&#x2F;p&gt;
&lt;p&gt;For enumerations, you can pass just the right integer number, make a constant for it, or if you prefer, use a &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;enum.html#enum.IntEnum&quot;&gt;&lt;code&gt;enum.IntEnum&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. For example, &lt;a href=&quot;https:&#x2F;&#x2F;docs.microsoft.com&#x2F;en-us&#x2F;windows-hardware&#x2F;manufacture&#x2F;desktop&#x2F;dism&#x2F;dismloglevel-enumeration&quot;&gt;&lt;code&gt;DismLogLevel&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; would be:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class DismLogLevel(enum.IntEnum):
    DismLogErrors = 0
    DismLogErrorsWarnings = 1
    DismLogErrorsWarningsInfo = 2
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you &lt;em&gt;should&lt;&#x2F;em&gt; be able to pass &lt;code&gt;DismLogLevel.DismLogErrors&lt;&#x2F;code&gt; as the parameter now.&lt;&#x2F;p&gt;
&lt;p&gt;If you see a function definition like &lt;code&gt;Function(void)&lt;&#x2F;code&gt;, that&#x27;s C&#x27;s way of saying it takes no parameters, so just call it as &lt;code&gt;Function()&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Make sure to pass all parameters, even if they seem optional they probably still want a &lt;code&gt;NULL&lt;&#x2F;code&gt; at least, and of course, read the documentation well. Some methods have certain pre-conditions.&lt;&#x2F;p&gt;
&lt;p&gt;Have fun hacking!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Shattered Pixel Dungeon</title>
		<published>2019-06-03T00:00:00+00:00</published>
		<updated>2019-06-03T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/pixel-dungeon/" type="text/html"/>
		<id>https://lonami.dev/blog/pixel-dungeon/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;shatteredpixel.com&#x2F;shatteredpd&#x2F;&quot;&gt;Shattered Pixel Dungeon&lt;&#x2F;a&gt; is the classic roguelike RPG game with randomly-generated dungeons. As a new player, it was a bit frustrating to be constantly killed on the first levels of the dungeon, but with some practice it&#x27;s easy to reach high levels if you can kill the first boss.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-tips&quot;&gt;Basic Tips&lt;&#x2F;h2&gt;
&lt;p&gt;The game comes with its own tips, but here&#x27;s a short and straight-forward summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Don&#x27;t rush into enemies&lt;&#x2F;strong&gt;. Abuse doors and small corridors to kill them one by one. You can use the clock on the bottom left to wait a turn without moving.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Explore each level at full&lt;&#x2F;strong&gt;. You will find goodies and gain XP while doing so.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Upon finding a special room&lt;&#x2F;strong&gt; (e.g. has a chest but is protected by piranhas), drink all potions that you found in that level until there&#x27;s one that helps you (e.g. be invisible so piranhas leave you alone). There is guaranteed to be a helpful one per level with special rooms.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Drink potions as early as possible&lt;&#x2F;strong&gt;. Harmful potions do less damage on early levels (and if you die, you lose less). This will keep them identified early for the rest of the game.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Read scrolls as early as possible&lt;&#x2F;strong&gt; as well. This will keep them identified. It may be worth to wait until you have an item which may be cursed and until the level is clear, because some scrolls clean curses and others alert enemies.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Food and health are resources&lt;&#x2F;strong&gt; that you have to &lt;em&gt;manage&lt;&#x2F;em&gt;, not keep them always at full. Even if you are starving and taking damage, you may not need to eat &lt;em&gt;just yet&lt;&#x2F;em&gt;, since food is scarce. Eat when you are low on health or in possible danger.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Piranhas&lt;&#x2F;strong&gt;. Seriously, just leave them alone if you are melee. They&#x27;re free food if you&#x27;re playing ranged, though.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Prefer armor over weapons&lt;&#x2F;strong&gt;. And make sure to identify or clean it from curses before wearing anything!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Find a dew vial early&lt;&#x2F;strong&gt;. It&#x27;s often a better idea to store dew (health) for later than to use it as soon as possible.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;bosses&quot;&gt;Bosses&lt;&#x2F;h2&gt;
&lt;p&gt;There is a boss every 5 levels.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Level 5 boss&lt;&#x2F;strong&gt;. Try to stay on water, but don&#x27;t let &lt;em&gt;it&lt;&#x2F;em&gt; stay on water since it will heal. Be careful when he starts enraging.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Level 10 boss&lt;&#x2F;strong&gt;. Ranged weapons are good against it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Level 15 boss&lt;&#x2F;strong&gt;. I somehow managed to tank it with a health potion.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Level 20 boss&lt;&#x2F;strong&gt;. I didn&#x27;t get this far just yet. You are advised to use scrolls of magic mapping in the last levels to skip straight to the boss, since there&#x27;s nothing else of value.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Level 25 boss&lt;&#x2F;strong&gt;. The final boss. Good job if you made it this far!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mage&quot;&gt;Mage&lt;&#x2F;h2&gt;
&lt;p&gt;If you followed the basic tips, you will sooner or later make use of two scrolls of upgrade in a single run. This will unlock the mage class, which is ridiculously powerful. He starts with a ranged-weapon, a magic missile wand, which is really helpful to keep enemies at a distance. Normally, you want to use this at first to surprise attack them soon, and if you are low on charges, you may go melee on normal enemies if you are confident.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;luck&quot;&gt;Luck&lt;&#x2F;h2&gt;
&lt;p&gt;This game is all about luck and patience! Some runs will be better than others, and you should thank and pray the RNG gods for them. If you don&#x27;t, they will only give you cursed items and not a single scroll to clean them. So, good luck and enjoy playing!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Installing NixOS, Take 2</title>
		<published>2019-02-15T00:00:00+00:00</published>
		<updated>2019-02-16T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/installing-nixos-2/" type="text/html"/>
		<id>https://lonami.dev/blog/installing-nixos-2/</id>
		<content type="html">&lt;p&gt;This is my second take at installing NixOS, after a while being frustrated with Arch Linux and the fact that a few kernel upgrades ago, the system crashed randomly from time to time. &lt;code&gt;journalctl&lt;&#x2F;code&gt; did not have any helpful hints and I thought reinstalling could be worthwhile anyway.&lt;&#x2F;p&gt;
&lt;p&gt;This time, I started with more knowledge! The first step is heading to the &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&quot;&gt;NixOS website&lt;&#x2F;a&gt; and downloading their minimal installation CD for 64 bits. I didn&#x27;t go with their graphical live CD, because their &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;nixos&#x2F;manual&quot;&gt;installation manual&lt;&#x2F;a&gt; is a wonderful resource that guides you nicely.&lt;&#x2F;p&gt;
&lt;p&gt;Once you have downloaded their &lt;code&gt;.iso&lt;&#x2F;code&gt;, you should probably verify it&#x27;s &lt;code&gt;sha256sum&lt;&#x2F;code&gt; and make sure that it matches. The easiest thing to do in my opinion is using an USB to burn the image in it. Plug it in and check its device name with &lt;code&gt;fdisk -l&lt;&#x2F;code&gt;. In my case, it was &lt;code&gt;&#x2F;dev&#x2F;sdb&lt;&#x2F;code&gt;, so I went ahead with it and ran &lt;code&gt;dd if=nixos.iso of=&#x2F;dev&#x2F;sdb status=progress&lt;&#x2F;code&gt;. Make sure to run &lt;code&gt;sync&lt;&#x2F;code&gt; once that&#x27;s done.&lt;&#x2F;p&gt;
&lt;p&gt;If either &lt;code&gt;dd&lt;&#x2F;code&gt; or &lt;code&gt;sync&lt;&#x2F;code&gt; seem &amp;quot;stuck&amp;quot; in the end, they are just flushing the changes to disk to make sure all is good. This is normal, and depends on your drives.&lt;&#x2F;p&gt;
&lt;p&gt;Now, reboot your computer with the USB plugged in and make sure to boot into it. You should be welcome with a pretty screen. Just select the first option and wait until it logs you in as root. Once you&#x27;re there you probably want to &lt;code&gt;loadkeys es&lt;&#x2F;code&gt; or whatever your keyboard layout is, or you will have a hard time with passwords, since the characters are all over the place.&lt;&#x2F;p&gt;
&lt;p&gt;In a clean disk, you would normally create the partitions now. In my case, I already had the partitions made (100MB for the EFI system, where &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt; lives, 40GB for the root &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; partition with my old Linux installation, and 700G for &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt;), so I didn&#x27;t need to do anything here. The manual showcases &lt;code&gt;parted&lt;&#x2F;code&gt;, but I personally use &lt;code&gt;fdisk&lt;&#x2F;code&gt;, which has very helpful help I check every time I use it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Important&lt;&#x2F;strong&gt;: The &lt;code&gt;XY&lt;&#x2F;code&gt; in &lt;code&gt;&#x2F;dev&#x2F;sdXY&lt;&#x2F;code&gt; is probably different in your system! Make sure you use &lt;code&gt;fdisk -l&lt;&#x2F;code&gt; to see the correct letters and numbers!&lt;&#x2F;p&gt;
&lt;p&gt;With the partitions ready in my UEFI system, I formatted both &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;boot&lt;&#x2F;code&gt; just to be safe with &lt;code&gt;mkfs.ext4 -L nixos &#x2F;dev&#x2F;sda2&lt;&#x2F;code&gt; and &lt;code&gt;mkfs.fat -F 32 -n boot &#x2F;dev&#x2F;sda1&lt;&#x2F;code&gt; (remember that these are the letters and numbers used in my partition scheme). Don&#x27;t worry about the warning in the second command regarding lowercase letters and Windows. It&#x27;s not really an issue.&lt;&#x2F;p&gt;
&lt;p&gt;Now, since we gave each partition a label, we can easily mount them through &lt;code&gt;mount &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;nixos &#x2F;mnt&lt;&#x2F;code&gt; and, in UEFI systems, be sure to &lt;code&gt;mkdir -p &#x2F;mnt&#x2F;boot&lt;&#x2F;code&gt; and &lt;code&gt;mount &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;boot &#x2F;mnt&#x2F;boot&lt;&#x2F;code&gt;. I didn&#x27;t bother setting up swap, since I have 8GB of RAM in my laptop and that&#x27;s really enough for my use case.&lt;&#x2F;p&gt;
&lt;p&gt;With that done, we will now ask the configuration wizard to do some work for us (in particular, generate a template) with &lt;code&gt;nixos-generate-config --root &#x2F;mnt&lt;&#x2F;code&gt;. This generates a very well documented file that we should edit right now (and this is important!) with whatever editor you prefer. I used &lt;code&gt;vim&lt;&#x2F;code&gt;, but you can change it for &lt;code&gt;nano&lt;&#x2F;code&gt; if you prefer.&lt;&#x2F;p&gt;
&lt;p&gt;On to the configuration file, we need to enable a few things, so &lt;code&gt;vim &#x2F;mnt&#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt; and start scrolling down. We want to make sure to uncomment:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# We really want network!
networking.wireless.enable = true;

# This &amp;quot;fixes&amp;quot; the keyboard layout. Put the one you use.
i18n = {
consoleKeyMap = &amp;quot;es&amp;quot;;
}

# Timezones are tricky so let&#x27;s get this right.
time.timeZone = &amp;quot;Europe&#x2F;Madrid&amp;quot;;

# We *really* want some base packages installed, such as
# wpa_supplicant, or we won&#x27;t have a way to connect to the
# network once we install...
environment.systemPackages = with pkgs; [
wpa_supplicant wget curl vim neovim cmus mpv firefox git tdesktop
];

# Printing is useful, sure, enable CUPS
services.printing.enable = true;

# We have speakers, let&#x27;s make use of them.
sound.enable = true;
hardware.pulseaudio.enable = true;

# We want the X11 windowing system enabled, in Spanish.
services.xserver.enable = true;
services.xserver.layout = &amp;quot;es&amp;quot;;

# I want a desktop manager in my laptop.
# I personally prefer XFCE, but the manual shows plenty
# of other options, such as Plasma, i3 WM, or whatever.
services.xserver.desktopManager.xfce.enable = true;
services.xserver.desktopManager.default = &amp;quot;xfce&amp;quot;;

# Touchpad is useful (although sometimes annoying) in a laptop
services.xserver.libinput.enable = true;

# We don&#x27;t want to do everything as root!
users.users.lonami = {
isNormalUser = true;
uid = 1000;
home = &amp;quot;&#x2F;home&#x2F;lonami&amp;quot;;
extraGroups = [ &amp;quot;wheel&amp;quot; &amp;quot;networkmanager&amp;quot; &amp;quot;audio&amp;quot; ];
};
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;(Fun fact, I overlooked the configuration file until I wrote this and hadn&#x27;t noticed sound&#x2F;pulseaudio was there. It wasn&#x27;t hard to find online how to enable it though!)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s modify &lt;code&gt;hardware-configuration.nix&lt;&#x2F;code&gt;. But if you have &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt; in a separate partition like me, you should run &lt;code&gt;blkid&lt;&#x2F;code&gt; to figure out its UUID. To avoid typing it out myself, I just ran &lt;code&gt;blkid &amp;gt;&amp;gt; &#x2F;mnt&#x2F;etc&#x2F;nixos&#x2F;hardware-configuration.nix&lt;&#x2F;code&gt; so that I could easily move it around with &lt;code&gt;vim&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# (stuff...)

fileSystems.&amp;quot;&#x2F;home&amp;quot; =
{ device = &amp;quot;&#x2F;dev&#x2F;disk&#x2F;by-uuid&#x2F;d344c686-cae7-4dd3-840e-308eddf86608&amp;quot;;
fsType = &amp;quot;ext4&amp;quot;;
};

# (more stuff...)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that, obviously, you should put your own partition&#x27;s UUID there. Modifying the configuration is where I think the current NixOS&#x27; manual should have made more emphasis, at this step of the installation. They do detail it below, but that was already too late in my first attempt. Anyway, you can boot from the USB and run &lt;code&gt;nixos-install&lt;&#x2F;code&gt; as many times as you need until you get it working!&lt;&#x2F;p&gt;
&lt;p&gt;But before installing, we need to configure the network since there are plenty of things to download. If you want to work from WiFi, you should first figure out the name of your network card with &lt;code&gt;ip link show&lt;&#x2F;code&gt;. In my case it&#x27;s called &lt;code&gt;wlp3s0&lt;&#x2F;code&gt;. So with that knowledge we can run &lt;code&gt;wpa_supplicant -B -i wlp3s0 -c &amp;lt;(wpa_passphrase SSID key)&lt;&#x2F;code&gt;. Be sure to replace both &lt;code&gt;SSID&lt;&#x2F;code&gt; and &lt;code&gt;key&lt;&#x2F;code&gt; with the name of your network and password key, respectively. If they have spaces, surround them in quotes.&lt;&#x2F;p&gt;
&lt;p&gt;Another funny pitfall was typing &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; in the command above twice (instead of &lt;code&gt;wpa_passphrase&lt;&#x2F;code&gt;). That sure spit out a few funny errors! Once you have ran that, wait a few seconds and &lt;code&gt;ping 1.1.1.1&lt;&#x2F;code&gt; to make sure that you can reach the internet. If you do, &lt;code&gt;^C&lt;&#x2F;code&gt; and let&#x27;s install NixOS!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;nixos-install
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, that was pretty painless. You can now &lt;code&gt;reboot&lt;&#x2F;code&gt; and enjoy your new, functional system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;afterword&quot;&gt;Afterword&lt;&#x2F;h2&gt;
&lt;p&gt;The process of installing NixOS was really painless once you have made sense out of what things mean. I was far more pleased this time than in my previous attempt, despite the four attempts I needed to have it up and running.&lt;&#x2F;p&gt;
&lt;p&gt;However not all is so good. I&#x27;m not sure where I went wrong, but the first time I tried with &lt;code&gt;i3&lt;&#x2F;code&gt; instead of &lt;code&gt;xfce&lt;&#x2F;code&gt;, all I was welcome with was a white, small terminal in the top left corner. I even generated a configuration file with &lt;code&gt;i3-config-wizard&lt;&#x2F;code&gt; to make sure it could detect my Mod1&#x2F;Mod4 keys (which, it did), but even after rebooting, my commands weren&#x27;t responding. For example, I couldn&#x27;t manage to open another terminal with &lt;code&gt;Mod1+Enter&lt;&#x2F;code&gt;. I&#x27;m not even sure that I was in &lt;code&gt;i3&lt;&#x2F;code&gt;…&lt;&#x2F;p&gt;
&lt;p&gt;In my very first attempt, I pressed &lt;code&gt;Alt+F8&lt;&#x2F;code&gt; as suggested in the welcome message. This took me an offline copy of the manual, which is really nicely done. Funny enough, though, I couldn&#x27;t exit &lt;code&gt;w3m&lt;&#x2F;code&gt;. Both &lt;code&gt;Q&lt;&#x2F;code&gt; and &lt;code&gt;B&lt;&#x2F;code&gt; to quit and take me back wouldn&#x27;t work. Somehow, it kept throwing me back into &lt;code&gt;w3m&lt;&#x2F;code&gt;, so I had to forcibly shutdown.&lt;&#x2F;p&gt;
&lt;p&gt;In my second attempt, I also forgot to configure network, so I had no way to download &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; without having &lt;code&gt;wpa_supplicant&lt;&#x2F;code&gt; itself to connect my laptop to the network! So, it was important to do that through the USB before installing it (which comes with the program preinstalled), just by making sure to add it in the configuration file.&lt;&#x2F;p&gt;
&lt;p&gt;Some other notes, if you can&#x27;t reach the internet, don&#x27;t add any DNS in &lt;code&gt;&#x2F;etc&#x2F;resolv.conf&lt;&#x2F;code&gt;. This should be done declaratively in &lt;code&gt;configuration.nix&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In the end, I spent the entire afternoon playing around with it, taking breaks and what-not. I still haven&#x27;t figured out why &lt;code&gt;nvim&lt;&#x2F;code&gt; was printing the literal escape character when going from normal to insert mode in the &lt;code&gt;xfce4-terminal&lt;&#x2F;code&gt; (and other actions also made it print this &amp;quot;garbage&amp;quot; to the console), why sometimes the network can reach the internet (and only some sites!) and sometimes not, and how to setup dualboot.&lt;&#x2F;p&gt;
&lt;p&gt;But despite all of this, I think it was a worth installing it again. One sure sees things from a different perspective, and gets the chance to write another blog post!&lt;&#x2F;p&gt;
&lt;p&gt;If there&#x27;s something I overlooked or that could be done better, or maybe you can explain it differently, please be sure to &lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;contact&quot;&gt;contact me&lt;&#x2F;a&gt; to let me know!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Well, that was surprisingly fast feedback. Thank you very much &lt;a href=&quot;https:&#x2F;&#x2F;bb010g.keybase.pub&#x2F;&quot;&gt;@bb010g&lt;&#x2F;a&gt; for it! As they rightfully pointed out, one can avoid adding &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt; manually to &lt;code&gt;hardware-configuration.nix&lt;&#x2F;code&gt; if you mount it before generating the configuration files. However, the installation process doesn&#x27;t need &lt;code&gt;&#x2F;home&lt;&#x2F;code&gt; mounted, so I didn&#x27;t do it.&lt;&#x2F;p&gt;
&lt;p&gt;The second weird issue with &lt;code&gt;w3m&lt;&#x2F;code&gt; is actually a funny one. &lt;code&gt;Alt+F8&lt;&#x2F;code&gt; &lt;em&gt;switches to another TTY&lt;&#x2F;em&gt;! That&#x27;s why quitting the program wouldn&#x27;t do anything. You&#x27;d still be in a different TTY! Normally, this is &lt;code&gt;Ctrl+Alt+FX&lt;&#x2F;code&gt;, so I hadn&#x27;t even thought that this is what could be happening. Anyway, the solution is not quitting the program, but rather going back to the main TTY with &lt;code&gt;Alt+F1&lt;&#x2F;code&gt;. You can switch back and forth all you need to consult the manual.&lt;&#x2F;p&gt;
&lt;p&gt;More suggestions are having &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rycee&#x2F;home-manager&quot;&gt;&lt;code&gt;home-manager&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; manage the graphical sessions, since it should be easier to deal with than the alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;Despite having followed the guide and having read it over and over several times, it seems like my thoughts in this blog post may be a bit messy. So I recommend you also reading through the guide to have two versions of all this, just in case.&lt;&#x2F;p&gt;
&lt;p&gt;Regarding network issues, they use &lt;code&gt;connman&lt;&#x2F;code&gt; so that may be worth checking out.&lt;&#x2F;p&gt;
&lt;p&gt;Regarding terminal issues with &lt;code&gt;nvim&lt;&#x2F;code&gt; printing the literal escape character, I was told off for not having checked what my &lt;code&gt;$TERM&lt;&#x2F;code&gt; was. I hadn&#x27;t really looked into it much myself, just complained about it here, so sorry for being annoying about that. A quick search in the &lt;code&gt;nixpkgs&lt;&#x2F;code&gt; repository lets us find &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NixOS&#x2F;nixpkgs&#x2F;blob&#x2F;release-18.09&#x2F;pkgs&#x2F;applications&#x2F;editors&#x2F;neovim&#x2F;default.nix&quot;&gt;neovim&#x2F;default.nix&lt;&#x2F;a&gt;, with version 0.3.1. Looking at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&quot;&gt;Neovim&#x27;s main repository&lt;&#x2F;a&gt; we can see that this is a bit outdated, but that is fine.&lt;&#x2F;p&gt;
&lt;p&gt;If only I had bothered to look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;wiki&#x2F;FAQ#nvim-shows-weird-symbols-2-q-when-changing-modes&quot;&gt;Neovim&#x27;s wiki&lt;&#x2F;a&gt;, (which they found through &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;issues&#x2F;7749&quot;&gt;Neovim&#x27;s GitHub issues&lt;&#x2F;a&gt;) I would&#x27;ve seen that some terminals just don&#x27;t support the program properly. The solution is, of course, to use a different terminal emulator with better support or to disable the &lt;code&gt;guicursor&lt;&#x2F;code&gt; in Neovim&#x27;s config.&lt;&#x2F;p&gt;
&lt;p&gt;This is a pretty good life lesson. 30 seconds of searching, maybe two minutes and a half for also checking XFCE issues, are often more than enough to troubleshoot your issues. The internet is a big place and more people have surely came across the problem before, so make sure to look online first. In my defense I&#x27;ll say that it didn&#x27;t bother me so much so I didn&#x27;t bother looking for that soon either.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Breaking Risk of Rain</title>
		<published>2019-01-12T00:00:00+00:00</published>
		<updated>2019-01-12T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/breaking-ror/" type="text/html"/>
		<id>https://lonami.dev/blog/breaking-ror/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;riskofraingame.com&#x2F;&quot;&gt;Risk of Rain&lt;&#x2F;a&gt; is a fun little game you can spend a lot of hours on. It&#x27;s incredibly challenging for new players, and fun once you have learnt the basics. This blog will go through what I&#x27;ve learnt and how to play the game correctly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re new to the game, you may find it frustrating. You must learn very well to dodge.&lt;&#x2F;p&gt;
&lt;p&gt;Your first &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Category:Characters&quot;&gt;character&lt;&#x2F;a&gt; will be &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Commando&quot;&gt;Commando&lt;&#x2F;a&gt;. He&#x27;s actually a very nice character. Use your third skill (dodge) to move faster, pass through large groups of enemies, and negate fall damage.&lt;&#x2F;p&gt;
&lt;p&gt;If there are a lot of monsters, remember to &lt;strong&gt;leave&lt;&#x2F;strong&gt; from there! It&#x27;s really important for survival. Most enemies &lt;strong&gt;don&#x27;t do body damage&lt;&#x2F;strong&gt;. Not even the body of the &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Magma_Worm&quot;&gt;Magma Worm&lt;&#x2F;a&gt; or the &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Wandering_Vagrant&quot;&gt;Wandering Vagrant&lt;&#x2F;a&gt; (just dodge the head and projectiles respectively).&lt;&#x2F;p&gt;
&lt;p&gt;The first thing you must do is always &lt;strong&gt;rush for the teleporter&lt;&#x2F;strong&gt;. Completing the levels quick will make the game easier. But make sure to take note of &lt;strong&gt;where the chests are&lt;&#x2F;strong&gt;! When you have time (even when the countdown finishes), go back for them and buy as many as you can. Generally, prefer &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Chest&quot;&gt;chests&lt;&#x2F;a&gt; over &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Shrine&quot;&gt;shrines&lt;&#x2F;a&gt; since they may eat all your money.&lt;&#x2F;p&gt;
&lt;p&gt;Completing the game on &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Difficulty&quot;&gt;Drizzle&lt;&#x2F;a&gt; is really easy if you follow these tips.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requisites&quot;&gt;Requisites&lt;&#x2F;h2&gt;
&lt;p&gt;Before breaking the game, you must obtain several &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Item#Artifacts&quot;&gt;artifacts&lt;&#x2F;a&gt;. We are interested in particular in the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Sacrifice&quot;&gt;Sacrifice&lt;&#x2F;a&gt;. You really need this one, and may be a bit hard to get. With it, you will be able to farm the first level for 30 minutes and kill the final boss in 30 seconds.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Command&quot;&gt;Command&lt;&#x2F;a&gt;. You need this unless you want to grind for hours to get enough of the items you really need for the rest of the game. Getting this one is easy.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Glass&quot;&gt;Glass&lt;&#x2F;a&gt;. Your life will be very small (at the beginning…), but you will be able to one-shot everything easily.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Kin&quot;&gt;Kin&lt;&#x2F;a&gt; (optional). It makes it easier to obtain a lot of boxes if you restart the first level until you get &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Lemurian&quot;&gt;lemurians&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Jellyfish&quot;&gt;jellyfish&lt;&#x2F;a&gt; as the monster, since they&#x27;re cheap to spawn.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;With those, the game becomes trivial. Playing as &lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Huntress&quot;&gt;Huntress&lt;&#x2F;a&gt; is excellent since she can move at high speed while killing everything on screen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;breaking-the-game&quot;&gt;Breaking the Game&lt;&#x2F;h2&gt;
&lt;p&gt;The rest is easy! With the command artifact you want the following items.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;common-items&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Category:Common_Items&quot;&gt;Common Items&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Soldier&amp;#x27;s_Syringe&quot;&gt;Soldier&#x27;s Syringe&lt;&#x2F;a&gt;. &lt;strong&gt;Stack 13&lt;&#x2F;strong&gt; of these and you will triple your attack speed. You can get started with 4 or so.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Paul&amp;#x27;s_Goat_Hoof&quot;&gt;Paul&#x27;s Goat Hoof&lt;&#x2F;a&gt;. &lt;strong&gt;Stack +30&lt;&#x2F;strong&gt; of these and your movement speed will be insane. You can get a very good speed with 8 or so.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Crowbar&quot;&gt;Crowbar&lt;&#x2F;a&gt;. &lt;strong&gt;Stack +20&lt;&#x2F;strong&gt; to guarantee you can one-shot bosses.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to be safer:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Hermit&amp;#x27;s_Scarf&quot;&gt;Hermit&#x27;s Scarf&lt;&#x2F;a&gt;. &lt;strong&gt;Stack 6&lt;&#x2F;strong&gt; of these to dodge 1&#x2F;3 of the attacks.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Monster_Tooth&quot;&gt;Monster Tooth&lt;&#x2F;a&gt;. &lt;strong&gt;Stack 9&lt;&#x2F;strong&gt; of these to recover 50 life on kill. This is plenty, since you will be killing &lt;em&gt;a lot&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you don&#x27;t have enough and want more fun, get one of these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Gasoline&quot;&gt;Gasoline&lt;&#x2F;a&gt;. Burn the ground on kill, and more will die!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Headstompers&quot;&gt;Headstompers&lt;&#x2F;a&gt;. They make a pleasing sound on fall, and hurt.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Lens-Maker&amp;#x27;s_Glasses&quot;&gt;Lens-Maker&#x27;s Glasses&lt;&#x2F;a&gt;. &lt;strong&gt;Stack 14&lt;&#x2F;strong&gt; and you will always deal a critical strike for double the damage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;uncommon-items&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Category:Uncommon_Items&quot;&gt;Uncommon Items&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Infusion&quot;&gt;Infusion&lt;&#x2F;a&gt;. You only really need one of this. Your life will skyrocket after a while, since this gives you 1HP per kill.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Hopoo_Feather&quot;&gt;Hopoo Feather&lt;&#x2F;a&gt;. &lt;strong&gt;Stack +10&lt;&#x2F;strong&gt; of these. You will pretty much be able to fly with so many jumps.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Guardian&amp;#x27;s_Heart&quot;&gt;Guardian&#x27;s Heart&lt;&#x2F;a&gt;. Not really necessary, but useful for early and late game, since it will absorb infinite damage the first hit.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If, again, you want more fun, get one of these:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Ukulele&quot;&gt;Ukelele&lt;&#x2F;a&gt;. Spazz your enemies!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Will-o&amp;#x27;-the-wisp&quot;&gt;Will-o&#x27;-the-wisp&lt;&#x2F;a&gt;. Explode your enemies!&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Chargefield_Generator&quot;&gt;Chargefield Generator&lt;&#x2F;a&gt;. It should cover your entire screen after a bit, hurting all enemies without moving a finger.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Golden_Gun&quot;&gt;Golden Gun&lt;&#x2F;a&gt;. You will be rich, so this gives you +40% damage.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Predatory_Instincts&quot;&gt;Predatory Instincts&lt;&#x2F;a&gt;. If you got 14 glasses, you will always be doing critical strikes, and this will give even more attack speed.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;56_Leaf_Clover&quot;&gt;56 Leaf Clover&lt;&#x2F;a&gt;. More drops, in case you didn&#x27;t have enough.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rare-items&quot;&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Category:Rare_Items&quot;&gt;Rare Items&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Ceremonial_Dagger&quot;&gt;Ceremonial Dagger&lt;&#x2F;a&gt;. &lt;strong&gt;Stack +3&lt;&#x2F;strong&gt;, then killing one thing kills another thing and makes a chain reaction.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Alien_Head&quot;&gt;Alien Head&lt;&#x2F;a&gt;. &lt;strong&gt;Stack 3&lt;&#x2F;strong&gt;, and you will be able to use your abilities more often.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For more fun:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;riskofrain.wikia.com&#x2F;wiki&#x2F;Brilliant_Behemoth&quot;&gt;Brilliant Behemoth&lt;&#x2F;a&gt;. Boom boom.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;closing-words&quot;&gt;Closing Words&lt;&#x2F;h2&gt;
&lt;p&gt;You can now beat the game in Monsoon solo with any character. Have fun! And be careful with the sadly common crashes.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>WorldEdit Commands</title>
		<published>2018-07-11T00:00:00+00:00</published>
		<updated>2018-07-11T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/world-edit/" type="text/html"/>
		<id>https://lonami.dev/blog/world-edit/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dev.bukkit.org&#x2F;projects&#x2F;worldedit&quot;&gt;WorldEdit&lt;&#x2F;a&gt; is an extremely powerful tool for modifying entire worlds within &lt;a href=&quot;https:&#x2F;&#x2F;minecraft.net&quot;&gt;Minecraft&lt;&#x2F;a&gt;, which can be used as either a mod for your single-player worlds or as a plugin for your &lt;a href=&quot;https:&#x2F;&#x2F;getbukkit.org&#x2F;&quot;&gt;Bukkit&lt;&#x2F;a&gt; servers.&lt;&#x2F;p&gt;
&lt;p&gt;This command guide was written for Minecraft 1.12.1, version &lt;a href=&quot;https:&#x2F;&#x2F;dev.bukkit.org&#x2F;projects&#x2F;worldedit&#x2F;files&#x2F;2460562&quot;&gt;6.1.7.3&lt;&#x2F;a&gt;, but should work for newer versions too. All WorldEdit commands can be used with a double slash (&lt;code&gt;&#x2F;&#x2F;&lt;&#x2F;code&gt;) so they don&#x27;t conlict with built-in commands. This means you can get a list of all commands with &lt;code&gt;&#x2F;&#x2F;help&lt;&#x2F;code&gt;. Let&#x27;s explore different categories!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;movement&quot;&gt;Movement&lt;&#x2F;h2&gt;
&lt;p&gt;In order to edit a world properly you need to learn how to move in said world properly. There are several straightforward commands that let you move:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;ascend&lt;&#x2F;code&gt; goes up one floor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;descend&lt;&#x2F;code&gt; goes down one floor.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;thru&lt;&#x2F;code&gt; let&#x27;s you pass through walls.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;jumpto&lt;&#x2F;code&gt; to go wherever you are looking.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;information&quot;&gt;Information&lt;&#x2F;h2&gt;
&lt;p&gt;Knowing your world properly is as important as knowing how to move within it, and will also let you change the information in said world if you need to.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;biomelist&lt;&#x2F;code&gt; shows all known biomes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;biomeinfo&lt;&#x2F;code&gt; shows the current biome.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;setbiome&lt;&#x2F;code&gt; lets you change the biome.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;blocks&quot;&gt;Blocks&lt;&#x2F;h2&gt;
&lt;p&gt;You can act over all blocks in a radius around you with quite a few commands. Some won&#x27;t actually act over the entire range you specify, so 100 is often a good number.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;filling&quot;&gt;Filling&lt;&#x2F;h3&gt;
&lt;p&gt;You can fill pools with &lt;code&gt;&#x2F;&#x2F;fill water 100&lt;&#x2F;code&gt; or caves with &lt;code&gt;&#x2F;&#x2F;fillr water 100&lt;&#x2F;code&gt;, both of which act below your feet.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fixing&quot;&gt;Fixing&lt;&#x2F;h3&gt;
&lt;p&gt;If the water or lava is buggy use &lt;code&gt;&#x2F;&#x2F;fixwater 100&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;&#x2F;fixlava 100&lt;&#x2F;code&gt; respectively.&lt;&#x2F;p&gt;
&lt;p&gt;Some creeper removed the snow or the grass? Fear not, you can use &lt;code&gt;&#x2F;&#x2F;snow 10&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;&#x2F;grass 10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;emptying&quot;&gt;Emptying&lt;&#x2F;h3&gt;
&lt;p&gt;You can empty a pool completely with &lt;code&gt;&#x2F;&#x2F;drain 100&lt;&#x2F;code&gt;, remove the snow with &lt;code&gt;&#x2F;&#x2F;thaw 10&lt;&#x2F;code&gt;, and remove fire with &lt;code&gt;&#x2F;&#x2F;ex 10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;removing&quot;&gt;Removing&lt;&#x2F;h3&gt;
&lt;p&gt;You can remove blocks above and below you in some area with the &lt;code&gt;&#x2F;&#x2F;removeabove N&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;&#x2F;removebelow N&lt;&#x2F;code&gt;. You probably want to set a limit though, or you could fall off the world with &lt;code&gt;&#x2F;&#x2F;removebelow 1 10&lt;&#x2F;code&gt; for radius and depth. You can also remove near blocks with &lt;code&gt;&#x2F;&#x2F;removenear block 10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shapes&quot;&gt;Shapes&lt;&#x2F;h3&gt;
&lt;p&gt;Making a cylinder (or circle) can be done with through &lt;code&gt;&#x2F;&#x2F;cyl stone 10&lt;&#x2F;code&gt;, a third argument for the height. The radius can be comma-separated to make a ellipses instead, such as &lt;code&gt;&#x2F;&#x2F;cyl stone 5,10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Spheres are done with &lt;code&gt;&#x2F;&#x2F;sphere stone 5&lt;&#x2F;code&gt;. This will build one right at your center, so you can raise it to be on your feet with &lt;code&gt;&#x2F;&#x2F;sphere stone 5 yes&lt;&#x2F;code&gt;. Similar to cylinders, you can comma separate the radius &lt;code&gt;x,y,z&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Pyramids can be done with &lt;code&gt;&#x2F;&#x2F;pyramic stone 5&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All these commands can be prefixed with &amp;quot;h&amp;quot; to make them hollow. For instance, &lt;code&gt;&#x2F;&#x2F;hsphere stone 10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;regions&quot;&gt;Regions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;basics&quot;&gt;Basics&lt;&#x2F;h3&gt;
&lt;p&gt;Operating over an entire region is really important, and the first thing you need to work comfortably with them is a tool to make selections. The default wooden-axe tool can be obtained with &lt;code&gt;&#x2F;&#x2F;wand&lt;&#x2F;code&gt;, but you must be near the blocks to select. You can use a different tool, like a golden axe, to use as your &amp;quot;far wand&amp;quot; (wand usable over distance). Once you have one in your hand type &lt;code&gt;&#x2F;&#x2F;farwand&lt;&#x2F;code&gt; to use it as your &amp;quot;far wand&amp;quot;. You can select the two corners of your region with left and right click. If you have selected the wrong tool, use &lt;code&gt;&#x2F;&#x2F;none&lt;&#x2F;code&gt; to clear it.&lt;&#x2F;p&gt;
&lt;p&gt;If there are no blocks but you want to use your current position as a corner, use &lt;code&gt;&#x2F;&#x2F;pos1&lt;&#x2F;code&gt; or 2.&lt;&#x2F;p&gt;
&lt;p&gt;If you made a region too small, you can enlarge it with &lt;code&gt;&#x2F;&#x2F;expand 10 up&lt;&#x2F;code&gt;, or &lt;code&gt;&#x2F;&#x2F;expand vert&lt;&#x2F;code&gt; for the entire vertical range, etc., or make it smaller with &lt;code&gt;&#x2F;&#x2F;contract 10 up&lt;&#x2F;code&gt; etc., or &lt;code&gt;&#x2F;&#x2F;inset&lt;&#x2F;code&gt; it to contract in both directions. You can use short-names for the cardinal directions (NSEW).&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you want to move your selection, you can &lt;code&gt;&#x2F;&#x2F;shift 1 north&lt;&#x2F;code&gt; it to wherever you need.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;information-1&quot;&gt;Information&lt;&#x2F;h3&gt;
&lt;p&gt;You can get the &lt;code&gt;&#x2F;&#x2F;size&lt;&#x2F;code&gt; of the selection or even &lt;code&gt;&#x2F;&#x2F;count torch&lt;&#x2F;code&gt; in some area. If you want to count all blocks, get their distribution &lt;code&gt;&#x2F;&#x2F;distr&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;filling-1&quot;&gt;Filling&lt;&#x2F;h3&gt;
&lt;p&gt;With a region selected, you can &lt;code&gt;&#x2F;&#x2F;set&lt;&#x2F;code&gt; it to be any block! For instance, you can use &lt;code&gt;&#x2F;&#x2F;set air&lt;&#x2F;code&gt; to clear it entirely. You can use more than one block evenly by separting them with a comma &lt;code&gt;&#x2F;&#x2F;set stone,dirt&lt;&#x2F;code&gt;, or with a custom chance &lt;code&gt;&#x2F;&#x2F;set 20%stone,80%dirt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can use &lt;code&gt;&#x2F;&#x2F;replace from to&lt;&#x2F;code&gt; instead if you don&#x27;t want to override all blocks in your selection.&lt;&#x2F;p&gt;
&lt;p&gt;You can make an hollow set with &lt;code&gt;&#x2F;&#x2F;faces&lt;&#x2F;code&gt;, and if you just want the walls, use &lt;code&gt;&#x2F;&#x2F;walls&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cleaning&quot;&gt;Cleaning&lt;&#x2F;h3&gt;
&lt;p&gt;If someone destroyed your wonderful snow landscape, fear not, you can use &lt;code&gt;&#x2F;&#x2F;overlay snow&lt;&#x2F;code&gt; over it (although for this you actually have &lt;code&gt;&#x2F;&#x2F;snow N&lt;&#x2F;code&gt; and its opposite &lt;code&gt;&#x2F;&#x2F;thaw&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;If you set some rough area, you can always &lt;code&gt;&#x2F;&#x2F;smooth&lt;&#x2F;code&gt; it, even more than one time with &lt;code&gt;&#x2F;&#x2F;smooth 3&lt;&#x2F;code&gt;. You can get your dirt and stone back with &lt;code&gt;&#x2F;&#x2F;naturalize&lt;&#x2F;code&gt; and put some plants with &lt;code&gt;&#x2F;&#x2F;flora&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;&#x2F;forest&lt;&#x2F;code&gt;, both of which support a density or even the type for the trees. If you already have the dirt use &lt;code&gt;&#x2F;&#x2F;green&lt;&#x2F;code&gt; instead. If you want some pumpkins, with &lt;code&gt;&#x2F;&#x2F;pumpkins&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moving&quot;&gt;Moving&lt;&#x2F;h3&gt;
&lt;p&gt;You can repeat an entire selection many times by stacking them with &lt;code&gt;&#x2F;&#x2F;stack N DIR&lt;&#x2F;code&gt;. This is extremely useful to make things like corridors or elevators. For instance, you can make a small section of the corridor, select it entirely, and then repeat it 10 times with &lt;code&gt;&#x2F;&#x2F;stack 10 north&lt;&#x2F;code&gt;. Or you can make the elevator and then &lt;code&gt;&#x2F;&#x2F;stack 10 up&lt;&#x2F;code&gt;. If you need to also copy the air use &lt;code&gt;&#x2F;&#x2F;stackair&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, if you don&#x27;t need to repeat it and simply move it just a bit towards the right direction, you can use &lt;code&gt;&#x2F;&#x2F;move N&lt;&#x2F;code&gt;. The default direction is &amp;quot;me&amp;quot; (towards where you are facing) but you can set one with &lt;code&gt;&#x2F;&#x2F;move 1 up&lt;&#x2F;code&gt; for example.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;selecting&quot;&gt;Selecting&lt;&#x2F;h3&gt;
&lt;p&gt;You can not only select cuboids. You can also select different shapes, or even just points:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel cuboid&lt;&#x2F;code&gt; is the default.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel extend&lt;&#x2F;code&gt; expands the default.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel poly&lt;&#x2F;code&gt; first point with left click and right click to add new points.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel ellipsoid&lt;&#x2F;code&gt; first point to select the center and right click to select the different radius.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel sphere&lt;&#x2F;code&gt; first point to select the center and one more right click for the radius.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel cyl&lt;&#x2F;code&gt; for cylinders, first click being the center.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&#x2F;sel convex&lt;&#x2F;code&gt; for convex shapes. This one is extremely useful for &lt;code&gt;&#x2F;&#x2F;curve&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;brushes&quot;&gt;Brushes&lt;&#x2F;h2&gt;
&lt;p&gt;Brushes are a way to paint in 3D without first bothering about making a selection, and there are spherical and cylinder brushes with e.g. &lt;code&gt;&#x2F;&#x2F;brush sphere stone 2&lt;&#x2F;code&gt;, or the shorter form &lt;code&gt;&#x2F;&#x2F;br s stone&lt;&#x2F;code&gt;. For cylinder, one must use &lt;code&gt;cyl&lt;&#x2F;code&gt; instead &lt;code&gt;sphere&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There also exists a brush to smooth the terrain which can be enabled on the current item with &lt;code&gt;&#x2F;&#x2F;br smooth&lt;&#x2F;code&gt;, which can be used with right-click like any other brush.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clipboard&quot;&gt;Clipboard&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, you can copy and cut things around like you would do with normal text with &lt;code&gt;&#x2F;&#x2F;copy&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;&#x2F;cut&lt;&#x2F;code&gt;. The copy is issued from wherever you issue the command, so when you use &lt;code&gt;&#x2F;&#x2F;paste&lt;&#x2F;code&gt;, remember that if you were 4 blocks apart when copying, it will be 4 blocks apart when pasting.&lt;&#x2F;p&gt;
&lt;p&gt;The contents of the clipboard can be flipped to wherever you are looking via &lt;code&gt;&#x2F;&#x2F;flip&lt;&#x2F;code&gt;, and can be rotated via the &lt;code&gt;&#x2F;&#x2F;rotate 90&lt;&#x2F;code&gt; command (in degrees).&lt;&#x2F;p&gt;
&lt;p&gt;To remove the copy use &lt;code&gt;&#x2F;&#x2F;clearclipboard&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>An Introduction to Asyncio</title>
		<published>2018-06-13T00:00:00+00:00</published>
		<updated>2020-10-03T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/asyncio/" type="text/html"/>
		<id>https://lonami.dev/blog/asyncio/</id>
		<content type="html">&lt;h2 id=&quot;index&quot;&gt;Index&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#background&quot;&gt;Background&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#input_output&quot;&gt;Input &#x2F; Output&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#diving_in&quot;&gt;Diving In&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#a_toy_example&quot;&gt;A Toy Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#a_real_example&quot;&gt;A Real Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;#extra_material&quot;&gt;Extra Material&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;After seeing some friends struggle with &lt;code&gt;asyncio&lt;&#x2F;code&gt; I decided that it could be a good idea to write a blog post using my own words to explain how I understand the world of asynchronous IO. I will focus on Python&#x27;s &lt;code&gt;asyncio&lt;&#x2F;code&gt; module but this post should apply to any other language easily.&lt;&#x2F;p&gt;
&lt;p&gt;So what is &lt;code&gt;asyncio&lt;&#x2F;code&gt; and what makes it good? Why don&#x27;t we just use the old and known threads to run several parts of the code concurrently, at the same time?&lt;&#x2F;p&gt;
&lt;p&gt;The first reason is that &lt;code&gt;asyncio&lt;&#x2F;code&gt; makes your code easier to reason about, as opposed to using threads, because the amount of ways in which your code can run grows exponentially. Let&#x27;s see that with an example. Imagine you have this code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def method():
	line 1
	line 2
	line 3
	line 4
	line 5
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And you start two threads to run the method at the same time. What is the order in which the lines of code get executed? The answer is that you can&#x27;t know! The first thread can run the entire method before the second thread even starts. Or it could be the first thread that runs after the second thread. Perhaps both run the &amp;quot;line 1&amp;quot;, and then the line 2. Maybe the first thread runs lines 1 and 2, and then the second thread only runs the line 1 before the first thread finishes.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, any combination of the order in which the lines run is possible. If the lines modify some global shared state, that will get messy quickly.&lt;&#x2F;p&gt;
&lt;p&gt;Second, in Python, threads &lt;em&gt;won&#x27;t&lt;&#x2F;em&gt; make your code faster most of the time. It will only increase the concurrency of your program (which is okay if it makes many blocking calls), allowing you to run several things at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;If you have a lot of CPU work to do though, threads aren&#x27;t a real advantage. Indeed, your code will probably run slower under the most common Python implementation, CPython, which makes use of a Global Interpreter Lock (GIL) that only lets a thread run at once. The operations won&#x27;t run in parallel!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;input-output&quot;&gt;Input &#x2F; Output&lt;&#x2F;h2&gt;
&lt;p&gt;Before we go any further, let&#x27;s first stop to talk about input and output, commonly known as &amp;quot;IO&amp;quot;. There are two main ways to perform IO operations, such as reading or writing from a file or a network socket.&lt;&#x2F;p&gt;
&lt;p&gt;The first one is known as &amp;quot;blocking IO&amp;quot;. What this means is that, when you try performing IO, the current application thread is going to &lt;em&gt;block&lt;&#x2F;em&gt; until the Operative System can tell you it&#x27;s done. Normally, this is not a problem, since disks are pretty fast anyway, but it can soon become a performance bottleneck. And network IO will be much slower than disk IO!&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import socket

# Setup a network socket and a very simple HTTP request.
# By default, sockets are open in blocking mode.
sock = socket.socket()
request = b&#x27;&#x27;&#x27;HEAD &#x2F; HTTP&#x2F;1.0\r
Host: example.com\r
\r
&#x27;&#x27;&#x27;

# &amp;quot;connect&amp;quot; will block until a successful TCP connection
# is made to the host &amp;quot;example.com&amp;quot; on port 80.
sock.connect((&#x27;example.com&#x27;, 80))

# &amp;quot;sendall&amp;quot; will repeatedly call &amp;quot;send&amp;quot; until all the data in &amp;quot;request&amp;quot; is
# sent to the host we just connected, which blocks until the data is sent.
sock.sendall(request)

# &amp;quot;recv&amp;quot; will try to receive up to 1024 bytes from the host, and block until
# there is any data to receive (or empty if the host closes the connection).
response = sock.recv(1024)

# After all those blocking calls, we got out data! These are the headers from
# making a HTTP request to example.com.
print(response.decode())
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Blocking IO offers timeouts, so that you can get control back in your code if the operation doesn&#x27;t finish. Imagine that the remote host doesn&#x27;t want to reply, your code would be stuck for as long as the connection remains alive!&lt;&#x2F;p&gt;
&lt;p&gt;But wait, what if we make the timeout small? Very, very small? If we do that, we will never block waiting for an answer. That&#x27;s how asynchronous IO works, and it&#x27;s the opposite of blocking IO (you can also call it non-blocking IO if you want to).&lt;&#x2F;p&gt;
&lt;p&gt;How does non-blocking IO work if the IO device needs a while to answer with the data? In that case, the operative system responds with &amp;quot;not ready&amp;quot;, and your application gets control back so it can do other stuff while the IO device completes your request. It works a bit like this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;app&amp;gt; Hey, I would like to read 16 bytes from this file
&amp;lt;OS&amp;gt; Okay, but the disk hasn&#x27;t sent me the data yet
&amp;lt;app&amp;gt; Alright, I will do something else then
(a lot of computer time passes)
&amp;lt;app&amp;gt; Do you have my 16 bytes now?
&amp;lt;OS&amp;gt; Yes, here they are! &amp;quot;Hello, world !!\n&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In reality, you can tell the OS to notify you when the data is ready, as opposed to polling (constantly asking the OS whether the data is ready yet or not), which is more efficient.&lt;&#x2F;p&gt;
&lt;p&gt;But either way, that&#x27;s the difference between blocking and non-blocking IO, and what matters is that your application gets to run more without ever needing to wait for data to arrive, because the data will be there immediately when you ask, and if it&#x27;s not yet, your app can do more things meanwhile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;diving-in&quot;&gt;Diving In&lt;&#x2F;h2&gt;
&lt;p&gt;Now we&#x27;ve seen what blocking and non-blocking IO is, and how threads make your code harder to reason about, but they give concurrency (yet not more speed). Is there any other way to achieve this concurrency that doesn&#x27;t involve threads? Yes! The answer is &lt;code&gt;asyncio&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So how does &lt;code&gt;asyncio&lt;&#x2F;code&gt; help? First we need to understand a very crucial concept before we can dive any deeper, and I&#x27;m talking about the &lt;em&gt;event loop&lt;&#x2F;em&gt;. What is it and why do we need it?&lt;&#x2F;p&gt;
&lt;p&gt;You can think of the event loop as a &lt;em&gt;loop&lt;&#x2F;em&gt; that will be responsible for calling your &lt;code&gt;async&lt;&#x2F;code&gt; functions:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;eventloop.svg&quot; alt=&quot;The Event Loop&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s silly you may think. Now not only we run our code but we also have to run some &amp;quot;event loop&amp;quot;. It doesn&#x27;t sound beneficial at all. What are these events? Well, they are the IO events we talked about before!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;asyncio&lt;&#x2F;code&gt;&#x27;s event loop is responsible for handling those IO events, such as file is ready, data arrived, flushing is done, and so on. As we saw before, we can make these events non-blocking by setting their timeout to 0.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say you want to read from 10 files at the same time. You will ask the OS to read data from 10 files, and at first none of the reads will be ready. But the event loop will be constantly asking the OS to know which are done, and when they are done, you will get your data.&lt;&#x2F;p&gt;
&lt;p&gt;This has some nice advantages. It means that, instead of waiting for a network request to send you a response or some file, instead of blocking there, the event loop can decide to run other code meanwhile. Whenever the contents are ready, they can be read, and your code can continue. Waiting for the contents to be received is done with the &lt;code&gt;await&lt;&#x2F;code&gt; keyword, and it tells the loop that it can run other code meanwhile:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;awaitkwd1.svg&quot; alt=&quot;Step 1, await keyword&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;asyncio&#x2F;awaitkwd2.svg&quot; alt=&quot;Step 2, await keyword&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Start reading the code of the event loop and follow the arrows. You can see that, in the beginning, there are no events yet, so the loop calls one of your functions. The code runs until it has to &lt;code&gt;await&lt;&#x2F;code&gt; for some IO operation to complete, such as sending a request over the network. The method is &amp;quot;paused&amp;quot; until an event occurs (for example, an &amp;quot;event&amp;quot; occurs when the request has been sent completely).&lt;&#x2F;p&gt;
&lt;p&gt;While the first method is busy, the event loop can enter the second method, and run its code until the first &lt;code&gt;await&lt;&#x2F;code&gt;. But it can happen that the event of the second query occurs before the request on the first method, so the event loop can re-enter the second method because it has already sent the query, but the first method isn&#x27;t done sending the request yet.&lt;&#x2F;p&gt;
&lt;p&gt;Then, the second method &lt;code&gt;await&lt;&#x2F;code&gt;&#x27;s for an answer, and an event occurs telling the event loop that the request from the first method was sent. The code can be resumed again, until it has to &lt;code&gt;await&lt;&#x2F;code&gt; for a response, and so on. Here&#x27;s an explanation with pseudo-code for this process if you prefer:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;async def method(request):
    prepare request
    await send request

    await receive request

    process request
    return result

run in parallel (
	method with request 1,
	method with request 2,
)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is what the event loop will do on the above pseudo-code:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;no events pending, can advance

enter method with request 1
	prepare request
	await sending request
pause method with request 1

no events ready, can advance

enter method with request 2
	prepare request
	await sending request
pause method with request 2

both requests are paused, cannot advance
wait for events
event for request 2 arrives (sending request completed)

enter method with request 2
	await receiving response
pause method with request 2

event for request 1 arrives (sending request completed)

enter method with request 1
	await receiving response
pause method with request 1

...and so on
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may be wondering &amp;quot;okay, but threads work for me, so why should I change?&amp;quot;. There are some important things to note here. The first is that we only need one thread to be running! The event loop decides when and which methods should run. This results in less pressure for the operating system. The second is that we know when it may run other methods. Those are the &lt;code&gt;await&lt;&#x2F;code&gt; keywords! Whenever there is one of those, we know that the loop is able to run other things until the resource (again, like network) becomes ready (when a event occurs telling us it&#x27;s ready to be used without blocking or it has completed).&lt;&#x2F;p&gt;
&lt;p&gt;So far, we already have two advantages. We are only using a single thread so the cost for switching between methods is low, and we can easily reason about where our program may interleave operations.&lt;&#x2F;p&gt;
&lt;p&gt;Another advantage is that, with the event loop, you can easily schedule when a piece of code should run, such as using the method &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;asyncio-eventloop.html#asyncio.loop.call_at&quot;&gt;&lt;code&gt;loop.call_at&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, without the need for spawning another thread at all.&lt;&#x2F;p&gt;
&lt;p&gt;To tell the &lt;code&gt;asyncio&lt;&#x2F;code&gt; to run the two methods shown above, we can use &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;asyncio-future.html#asyncio.ensure_future&quot;&gt;&lt;code&gt;asyncio.ensure_future&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is a way of saying &amp;quot;I want the future of my method to be ensured&amp;quot;. That is, you want to run your method in the future, whenever the loop is free to do so. This method returns a &lt;code&gt;Future&lt;&#x2F;code&gt; object, so if your method returns a value, you can &lt;code&gt;await&lt;&#x2F;code&gt; this future to retrieve its result.&lt;&#x2F;p&gt;
&lt;p&gt;What is a &lt;code&gt;Future&lt;&#x2F;code&gt;? This object represents the value of something that will be there in the future, but might not be there yet. Just like you can &lt;code&gt;await&lt;&#x2F;code&gt; your own &lt;code&gt;async def&lt;&#x2F;code&gt; functions, you can &lt;code&gt;await&lt;&#x2F;code&gt; these &lt;code&gt;Future&lt;&#x2F;code&gt;&#x27;s.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;async def&lt;&#x2F;code&gt; functions are also called &amp;quot;coroutines&amp;quot;, and Python does some magic behind the scenes to turn them into such. The coroutines can be &lt;code&gt;await&lt;&#x2F;code&gt;&#x27;ed, and this is what you normally do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-toy-example&quot;&gt;A Toy Example&lt;&#x2F;h2&gt;
&lt;p&gt;That&#x27;s all about &lt;code&gt;asyncio&lt;&#x2F;code&gt;! Let&#x27;s wrap up with some example code. We will create a server that replies with the text a client sends, but reversed. First, we will show what you could write with normal synchronous code, and then we will port it.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;strong&gt;synchronous version&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# server.py
import socket


def server_method():
	# create a new server socket to listen for connections
	server = socket.socket()

	# bind to localhost:6789 for new connections
	server.bind((&#x27;localhost&#x27;, 6789))

	# we will listen for one client at most
	server.listen(1)

	# *block* waiting for a new client
	client, _ = server.accept()

	# *block* waiting for some data
	data = client.recv(1024)

	# reverse the data
	data = data[::-1]

	# *block* sending the data
	client.sendall(data)

	# close client and server
	server.close()
	client.close()


if __name__ == &#x27;__main__&#x27;:
	# block running the server
	server_method()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# client.py
import socket


def client_method():
	message = b&#x27;Hello Server!\n&#x27;
	client = socket.socket()

	# *block* trying to stabilish a connection
	client.connect((&#x27;localhost&#x27;, 6789))

	# *block* trying to send the message
	print(&#x27;Sending&#x27;, message)
	client.sendall(message)

	# *block* until we receive a response
	response = client.recv(1024)
	print(&#x27;Server replied&#x27;, response)

	client.close()


if __name__ == &#x27;__main__&#x27;:
	client_method()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From what we&#x27;ve seen, this code will block on all the lines with a comment above them saying that they will block. This means that for running more than one client or server, or both in the same file, you will need threads. But we can do better, we can rewrite it into &lt;code&gt;asyncio&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;The first step is to mark all your &lt;code&gt;def&lt;&#x2F;code&gt;initions that may block with &lt;code&gt;async&lt;&#x2F;code&gt;. This marks them as coroutines, which can be &lt;code&gt;await&lt;&#x2F;code&gt;ed on.&lt;&#x2F;p&gt;
&lt;p&gt;Second, since we&#x27;re using low-level sockets, we need to make use of the methods that &lt;code&gt;asyncio&lt;&#x2F;code&gt; provides directly. If this was a third-party library, this would be just like using their &lt;code&gt;async def&lt;&#x2F;code&gt;initions.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;strong&gt;asynchronous version&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# server.py
import asyncio
import socket

# get the default &amp;quot;event loop&amp;quot; that we will run
loop = asyncio.get_event_loop()


# notice our new &amp;quot;async&amp;quot; before the definition
async def server_method():
	server = socket.socket()
	server.bind((&#x27;localhost&#x27;, 6789))
	server.listen(1)

	# await for a new client
	# the event loop can run other code while we wait here!
	client, _ = await loop.sock_accept(server)

	# await for some data
	data = await loop.sock_recv(client, 1024)
	data = data[::-1]

	# await for sending the data
	await loop.sock_sendall(client, data)

	server.close()
	client.close()


if __name__ == &#x27;__main__&#x27;:
	# run the loop until &amp;quot;server method&amp;quot; is complete
	loop.run_until_complete(server_method())
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# client.py
import asyncio
import socket

loop = asyncio.get_event_loop()


async def client_method():
	message = b&#x27;Hello Server!\n&#x27;
	client = socket.socket()

	# await to stabilish a connection
	await loop.sock_connect(client, (&#x27;localhost&#x27;, 6789))

	# await to send the message
	print(&#x27;Sending&#x27;, message)
	await loop.sock_sendall(client, message)

	# await to receive a response
	response = await loop.sock_recv(client, 1024)
	print(&#x27;Server replied&#x27;, response)

	client.close()


if __name__ == &#x27;__main__&#x27;:
	loop.run_until_complete(client_method())
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it! You can place these two files separately and run, first the server, then the client. You should see output in the client.&lt;&#x2F;p&gt;
&lt;p&gt;The big difference here is that you can easily modify the code to run more than one server or clients at the same time. Whenever you &lt;code&gt;await&lt;&#x2F;code&gt; the event loop will run other of your code. It seems to &amp;quot;block&amp;quot; on the &lt;code&gt;await&lt;&#x2F;code&gt; parts, but remember it&#x27;s actually jumping to run more code, and the event loop will get back to you whenever it can.&lt;&#x2F;p&gt;
&lt;p&gt;In short, you need an &lt;code&gt;async def&lt;&#x2F;code&gt; to &lt;code&gt;await&lt;&#x2F;code&gt; things, and you run them with the event loop instead of calling them directly. So this…&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def main():
	...  # some code


if __name__ == &#x27;__main__&#x27;:
	main()
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;…becomes this:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import asyncio


async def main():
	...  # some code


if __name__ == &#x27;__main__&#x27;:
	asyncio.get_event_loop().run_until_complete(main)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is pretty much how most of your &lt;code&gt;async&lt;&#x2F;code&gt; scripts will start, running the main method until its completion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-real-example&quot;&gt;A Real Example&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s have some fun with a real library. We&#x27;ll be using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LonamiWebs&#x2F;Telethon&quot;&gt;Telethon&lt;&#x2F;a&gt; to broadcast a message to our three best friends, all at the same time, thanks to the magic of &lt;code&gt;asyncio&lt;&#x2F;code&gt;. We&#x27;ll dive right into the code, and then I&#x27;ll explain our new friend &lt;code&gt;asyncio.wait(...)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# broadcast.py
import asyncio
import sys

from telethon import TelegramClient

# (you need your own values here, check Telethon&#x27;s documentation)
api_id = 123
api_hash = &#x27;123abc&#x27;
friends = [
	&#x27;@friend1__username&#x27;,
	&#x27;@friend2__username&#x27;,
	&#x27;@bestie__username&#x27;
]

# we will have to await things, so we need an async def
async def main(message):
	# start is a coroutine, so we need to await it to run it
	client = await TelegramClient(&#x27;me&#x27;, api_id, api_hash).start()

	# wait for all three client.send_message to complete
	await asyncio.wait([
		client.send_message(friend, message)
		for friend in friends
	])

	# and close our client
	await client.disconnect()


if __name__ == &#x27;__main__&#x27;:
	if len(sys.argv) != 2:
		print(&#x27;You must pass the message to broadcast!&#x27;)
		quit()

	message = sys.argv[1]
	asyncio.get_event_loop().run_until_complete(main(message))
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wait… how did that send a message to all three of
my friends? The magic is done here:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;[
	client.send_message(friend, message)
	for friend in friends
]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This list comprehension creates another list with three
coroutines, the three &lt;code&gt;client.send_message(...)&lt;&#x2F;code&gt;.
Then we just pass that list to &lt;code&gt;asyncio.wait&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;await asyncio.wait([...])
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This method, by default, waits for the list of coroutines to run until they&#x27;ve all finished. You can read more on the Python &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;asyncio-task.html#asyncio.wait&quot;&gt;documentation&lt;&#x2F;a&gt;. Truly a good function to know about!&lt;&#x2F;p&gt;
&lt;p&gt;Now whenever you have some important news for your friends, you can simply &lt;code&gt;python3 broadcast.py &#x27;I bought a car!&#x27;&lt;&#x2F;code&gt; to tell all your friends about your new car! All you need to remember is that you need to &lt;code&gt;await&lt;&#x2F;code&gt; on coroutines, and you will be good. &lt;code&gt;asyncio&lt;&#x2F;code&gt; will warn you when you forget to do so.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extra-material&quot;&gt;Extra Material&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to understand how &lt;code&gt;asyncio&lt;&#x2F;code&gt; works under the hood, I recommend you to watch this hour-long talk &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;M-UcUs7IMIM&quot;&gt;Get to grips with asyncio in Python 3&lt;&#x2F;a&gt; by Robert Smallshire. In the video, they will explain the differences between concurrency and parallelism, along with others concepts, and how to implement your own &lt;code&gt;asyncio&lt;&#x2F;code&gt; &amp;quot;scheduler&amp;quot; from scratch.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Atemporal Blog Posts</title>
		<published>2018-02-03T00:00:00+00:00</published>
		<updated>2021-02-19T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/posts/" type="text/html"/>
		<id>https://lonami.dev/blog/posts/</id>
		<content type="html">&lt;p&gt;These are some interesting posts and links I&#x27;ve found around the web. I believe they are quite interesting and nice reads, so if you have the time, I encourage you to check some out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;algorithms&quot;&gt;Algorithms&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.tannerhelland.com&#x2F;4660&#x2F;dithering-eleven-algorithms-source-code&#x2F;&quot;&gt;Image Dithering: Eleven Algorithms and Source Code&lt;&#x2F;a&gt;. What does it mean and how to achieve it?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cristian.io&#x2F;post&#x2F;bloom-filters&#x2F;&quot;&gt;Idempotence layer on bloom filters&lt;&#x2F;a&gt;. What are they and how can they help?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Huffman_coding&quot;&gt;Huffman coding&lt;&#x2F;a&gt;. This encoding is a simple yet interesting way of compressing information.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mxgmn&#x2F;WaveFunctionCollapse&quot;&gt;Wave Function Collapse&lt;&#x2F;a&gt;. Bitmap &amp;amp; tilemap generation from a single example with the help of ideas from quantum mechanics.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.nelhage.com&#x2F;2015&#x2F;02&#x2F;regular-expression-search-with-suffix-arrays&#x2F;&quot;&gt;Regular Expression Search with Suffix Arrays&lt;&#x2F;a&gt;. A way to efficiently search large amounts of text.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;culture&quot;&gt;Culture&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wired.com&#x2F;story&#x2F;ideas-joi-ito-robot-overlords&#x2F;&quot;&gt;Why Westerners Fear Robots and the Japanese Do Not&lt;&#x2F;a&gt;. Explains some possible reasons for this case.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;catb.org&#x2F;%7Eesr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;How To Ask Questions The Smart Way&lt;&#x2F;a&gt;. Some bits of hacker culture and amazing tips on how to ask a question.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;apenwarr.ca&#x2F;log&#x2F;?m=201809#14&quot;&gt;XML, blockchains, and the strange shapes of progress&lt;&#x2F;a&gt;. Some of history about XML and blockchain.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;czep.net&#x2F;17&#x2F;legion-of-lobotomized-unices.html&quot;&gt;Legion of lobotomized unices&lt;&#x2F;a&gt;. A time where computers are treated a lot more nicely.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;eli.thegreenplace.net&#x2F;2016&#x2F;the-expression-problem-and-its-solutions&#x2F;&quot;&gt;The Expression Problem and its solutions&lt;&#x2F;a&gt;. What is it and what can we do to solve it?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;allendowney.blogspot.com&#x2F;2015&#x2F;08&#x2F;the-inspection-paradox-is-everywhere.html&quot;&gt;The Inspection Paradox is Everywhere&lt;&#x2F;a&gt;. Interesting and very common phenomena.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ChrisKnott&#x2F;Algojammer&quot;&gt;An experimental code editor for writing algorithms&lt;&#x2F;a&gt;. Contains several links to different tools for reverse debugging.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;habitatchronicles.com&#x2F;2017&#x2F;05&#x2F;what-are-capabilities&#x2F;&quot;&gt;What Are Capabilities?&lt;&#x2F;a&gt; Good ideas with great security implications.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.aurynn.com&#x2F;2015&#x2F;12&#x2F;16-contempt-culture&quot;&gt;Contempt Culture&lt;&#x2F;a&gt;. Or why you should not speak crap about your non-favourite programming languages.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lesswrong.com&#x2F;posts&#x2F;tscc3e5eujrsEeFN4&#x2F;well-kept-gardens-die-by-pacifism&quot;&gt;Well-Kept Gardens Die By Pacifism&lt;&#x2F;a&gt;. Risks any online community can run into.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ncase.me&#x2F;&quot;&gt;It&#x27;s Nicky Case!&lt;&#x2F;a&gt; They make some cool things worth checking out, I really like &amp;quot;we become what we behold&amp;quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;debate&quot;&gt;Debate&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;steemit.com&#x2F;opensource&#x2F;@crell&#x2F;open-source-is-awful&quot;&gt;Open Source is awful&lt;&#x2F;a&gt;. Has some points about why is it bad and how it could improve.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.mondo2000.com&#x2F;2018&#x2F;01&#x2F;17&#x2F;pink-lexical-goop-dark-side-autocorrect&#x2F;&quot;&gt;Pink Lexical Goop: The Dark Side of Autocorrect&lt;&#x2F;a&gt;. It can shape how you think.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.ploeh.dk&#x2F;2015&#x2F;08&#x2F;03&#x2F;idiomatic-or-idiosyncratic&#x2F;&quot;&gt;Idiomatic or idiosyncratic?&lt;&#x2F;a&gt; Can porting code constructs from other languages have a positive effect?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gamasutra.com&#x2F;view&#x2F;news&#x2F;169296&#x2F;Indepth_Functional_programming_in_C.php&quot;&gt;In-depth: Functional programming in C++&lt;&#x2F;a&gt;. Is it useful to bother with functional concepts in a language like C++?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vorpus.org&#x2F;blog&#x2F;notes-on-structured-concurrency-or-go-statement-considered-harmful&#x2F;&quot;&gt;Notes on structured concurrency, or: Go statement considered harmful&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;queue.acm.org&#x2F;detail.cfm?id=3212479&quot;&gt;C Is Not a Low-level Language&lt;&#x2F;a&gt;. Could there be alternative programming models designed for more specialized CPUs?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;food-for-thought&quot;&gt;Food for Thought&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;divide-by-zero&#x2F;&quot;&gt;1&#x2F;0 = 0&lt;&#x2F;a&gt;. Explores why it makes sense to redefine mathemathics under some circumstances, and why it is possible to do so.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jeremykun.com&#x2F;2018&#x2F;04&#x2F;13&#x2F;for-mathematicians-does-not-mean-equality&#x2F;&quot;&gt;For mathematicians, = does not mean equality&lt;&#x2F;a&gt;. What other definitions does the equal sign have?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lesswrong.com&#x2F;posts&#x2F;2MD3NMLBPCqPfnfre&#x2F;cached-thoughts&quot;&gt;Cached Thoughts&lt;&#x2F;a&gt;. How is it possible that our brains work at all?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;tonsky.me&#x2F;blog&#x2F;disenchantment&#x2F;&quot;&gt;Software disenchantment&lt;&#x2F;a&gt;. Faster hardware and slower software is a trend.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blackhole12.com&#x2F;blog&#x2F;software-engineering-is-bad-but-it-s-not-that-bad&#x2F;&quot;&gt;Software Engineering Is Bad, But That&#x27;s Not Why&lt;&#x2F;a&gt;. This post has some good counterpoints to Software disenchantment.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;journal.stuffwithstuff.com&#x2F;2015&#x2F;02&#x2F;01&#x2F;what-color-is-your-function&#x2F;&quot;&gt;What Color is Your Function?&lt;&#x2F;a&gt;. Spoiler: can we approach asynchronous IO better?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackernoon.com&#x2F;im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5&quot;&gt;I&#x27;m harvesting credit card numbers and passwords from your site&lt;&#x2F;a&gt;. A word of warning when mindlessly adding dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;message&#x2F;everything-is-broken-81e5f33a24e1&quot;&gt;Everything Is Broken&lt;&#x2F;a&gt;. Some of the (probable) truths about our world.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;johnsalvatier.org&#x2F;blog&#x2F;2017&#x2F;reality-has-a-surprising-amount-of-detail&quot;&gt;Reality has a surprising amount of detail&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;funny&quot;&gt;Funny&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;thedailywtf.com&#x2F;articles&#x2F;We-Use-BobX&quot;&gt;We Use BobX&lt;&#x2F;a&gt;. BobX.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;thedailywtf.com&#x2F;articles&#x2F;the-inner-json-effect&quot;&gt;The Inner JSON Effect&lt;&#x2F;a&gt;. For some reason, custom languages are in.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thedailywtf.com&#x2F;articles&#x2F;exponential-backup&quot;&gt;Exponential Backup&lt;&#x2F;a&gt;. Far better than git.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thedailywtf.com&#x2F;articles&#x2F;ITAPPMONROBOT&quot;&gt;ITAPPMONROBOT&lt;&#x2F;a&gt;. Solving software problems with hardware.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thedailywtf.com&#x2F;articles&#x2F;a-tapestry-of-threads&quot;&gt;A Tapestry of Threads&lt;&#x2F;a&gt;. More threads must mean faster code, right?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;commitlog&#x2F;a-brief-totally-accurate-history-of-programming-languages-cd93ec806124&quot;&gt;A Brief Totally Accurate History Of Programming Languages&lt;&#x2F;a&gt;. Don&#x27;t take offense for it!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;graphics&quot;&gt;Graphics&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;shaunlebron.github.io&#x2F;visualizing-projections&#x2F;&quot;&gt;Visualizing Projections&lt;&#x2F;a&gt;. Small post about different projection methods.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.iquilezles.org&#x2F;www&#x2F;index.htm&quot;&gt;Inigo Quilez :: fractals, computer graphics, mathematics, shaders, demoscene and more&lt;&#x2F;a&gt; A &lt;em&gt;lot&lt;&#x2F;em&gt; of useful and quality articles regarding computer graphics.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;history&quot;&gt;History&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twobithistory.org&#x2F;2018&#x2F;08&#x2F;18&#x2F;ada-lovelace-note-g.html&quot;&gt;What Did Ada Lovelace&#x27;s Program Actually Do?&lt;&#x2F;a&gt;. And other characters that took part in the beginning&#x27;s of programming.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrisdown.name&#x2F;2018&#x2F;01&#x2F;02&#x2F;in-defence-of-swap.html&quot;&gt;In defence of swap: common misconceptions&lt;&#x2F;a&gt;. Swap is still an useful concept.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.pacifict.com&#x2F;Story&#x2F;&quot;&gt;The Graphing Calculator Story&lt;&#x2F;a&gt;. A great classic Apple tale.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twobithistory.org&#x2F;2018&#x2F;10&#x2F;14&#x2F;lisp.html&quot;&gt;How Lisp Became God&#x27;s Own Programming Language&lt;&#x2F;a&gt;. Lisp as a foundational programming language.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;motivational&quot;&gt;Motivational&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2002&#x2F;01&#x2F;06&#x2F;fire-and-motion&#x2F;&quot;&gt;Fire And Motion&lt;&#x2F;a&gt;. What does actually take to get things done?&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;realmensch.org&#x2F;2017&#x2F;08&#x2F;25&#x2F;the-parable-of-the-two-programmers&#x2F;&quot;&gt;The Parable of the Two Programmers&lt;&#x2F;a&gt;. This tale is about two different types of programmer and their respective endings in a company, illustrating how the one you wouldn&#x27;t expect to actually ends in a better situation.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;byorgey.wordpress.com&#x2F;2018&#x2F;05&#x2F;06&#x2F;conversations-with-a-six-year-old-on-functional-programming&#x2F;&quot;&gt;Conversations with a six-year-old on functional programming&lt;&#x2F;a&gt;. Little kids today can be really interested in technological topics.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bulletproofmusician.com&#x2F;how-many-hours-a-day-should-you-practice&#x2F;&quot;&gt;How Many Hours a Day Should You Practice?&lt;&#x2F;a&gt;. While the article is about music, it applies to any other areas.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;nathanmarz.com&#x2F;blog&#x2F;suffering-oriented-programming.html&quot;&gt;Suffering-oriented programming&lt;&#x2F;a&gt;. A possibly new approach on how you could tackle your new projects.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2000&#x2F;04&#x2F;06&#x2F;things-you-should-never-do-part-i&#x2F;&quot;&gt;Things You Should Never Do, Part I&lt;&#x2F;a&gt;. There is no need to rewrite your code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;optimization&quot;&gt;Optimization&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.llvm.org&#x2F;2011&#x2F;05&#x2F;what-every-c-programmer-should-know.html&quot;&gt;What Every C Programmer Should Know About Undefined Behavior #1&#x2F;3&lt;&#x2F;a&gt;. Explains what undefined behaviour is and why it makes sense.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;ridiculousfish.com&#x2F;blog&#x2F;posts&#x2F;labor-of-division-episode-i.html&quot;&gt;Labor of Division (Episode I)&lt;&#x2F;a&gt;. Some tricks to divide without division.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.moertel.com&#x2F;posts&#x2F;2013-12-14-great-old-timey-game-programming-hack.html&quot;&gt;A Great Old-Timey Game-Programming Hack&lt;&#x2F;a&gt;. Abusing instructions to make games playable even on the slowest hardware.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20191213224640&#x2F;https:&#x2F;&#x2F;people.eecs.berkeley.edu&#x2F;%7Esangjin&#x2F;2012&#x2F;12&#x2F;21&#x2F;epoll-vs-kqueue.html&quot;&gt;Scalable Event Multiplexing: epoll vs kqueue&lt;&#x2F;a&gt;. How good OS primitives can really help performance and scability.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adamdrake.com&#x2F;command-line-tools-can-be-235x-faster-than-your-hadoop-cluster.html&quot;&gt;Command-line Tools can be 235x Faster than your Hadoop Cluster&lt;&#x2F;a&gt;. Or how to use the right tool for the right job.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nullprogram.com&#x2F;blog&#x2F;2018&#x2F;05&#x2F;27&#x2F;&quot;&gt;When FFI Function Calls Beat Native C&lt;&#x2F;a&gt;. How lua beat C at it and the explanation behind it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;igoro.com&#x2F;archive&#x2F;gallery-of-processor-cache-effects&#x2F;&quot;&gt;Gallery of Processor Cache Effects&lt;&#x2F;a&gt;. Knowing a few things about the cache can make a big difference.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Graphs</title>
		<published>2017-06-02T00:00:00+00:00</published>
		<updated>2017-06-02T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/graphs/" type="text/html"/>
		<id>https://lonami.dev/blog/graphs/</id>
		<content type="html">&lt;p&gt;&lt;noscript&gt;There are a few things which won&#x27;t render unless you enable JavaScript. No tracking, I promise!&lt;&#x2F;noscript&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;¿No hablas inglés? &lt;a href=&quot;&#x2F;golb&#x2F;graphs-es&quot;&gt;Lee la versión en español&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Let&#x27;s imagine we have 5 bus stations, which we&#x27;ll denote by ((s_i)):&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
      &#x27; s_1 &#x27; s_2 &#x27; s_3 &#x27; s_4 &#x27; s_5 \\
s_1   &#x27;     &#x27;  V  &#x27;     &#x27;     &#x27;     \\
s_2   &#x27;  V  &#x27;     &#x27;     &#x27;     &#x27;  V  \\
s_3   &#x27;     &#x27;     &#x27;     &#x27;  V  &#x27;     \\
s_4   &#x27;     &#x27;  V  &#x27;  V  &#x27;     &#x27;     \\
s_5   &#x27;  V  &#x27;     &#x27;     &#x27;  V  &#x27;
&lt;&#x2F;div&gt;
&lt;p&gt;This is known as a &lt;em&gt;&amp;quot;table of direct interconnections&amp;quot;&lt;&#x2F;em&gt;. The ((V)) represent connected paths. For instance, on the first row starting at ((s_1)), reaching the ((V)), allows us to turn up to get to ((s_2)).&lt;&#x2F;p&gt;
&lt;p&gt;We can see the above table represented in a more graphical way:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;graphs&#x2F;example1.svg&quot; alt=&quot;Table 1 as a Graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This type of graph is called, well, a graph, and it&#x27;s a directed graph (or digraph), since the direction on which the arrows go does matter. It&#x27;s made up of vertices, joined together by edges (also known as lines or directed &lt;strong&gt;arcs&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;One can walk from a node to another through different &lt;strong&gt;paths&lt;&#x2F;strong&gt;. For example, ((s_4 $rightarrow s_2 $rightarrow s_5)) is an indirect path of &lt;strong&gt;order&lt;&#x2F;strong&gt; two, because we must use two edges to go from ((s_4)) to ((s_5)).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s now represent its &lt;strong&gt;adjacency&lt;&#x2F;strong&gt; matrix called A which represents the same table, but uses 1 instead V to represent a connection:&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
0 &#x27; 1 &#x27; 0 &#x27; 0 &#x27; 0 \\
1 &#x27; 0 &#x27; 0 &#x27; 0 &#x27; 1 \\
0 &#x27; 0 &#x27; 0 &#x27; 1 &#x27; 0 \\
0 &#x27; 1 &#x27; 1 &#x27; 0 &#x27; 0 \\
1 &#x27; 0 &#x27; 0 &#x27; 1 &#x27; 0
&lt;&#x2F;div&gt;
&lt;p&gt;This way we can see how the ((a_{2,1})) element represents the connection ((s_2 $rightarrow s_1)), and the ((a_{5,1})) element the ((s_5 $rightarrow s_1)) connection, etc.&lt;&#x2F;p&gt;
&lt;p&gt;In general, ((a_{i,j})) represents a connection from ((s_i $rightarrow s_j))as long as ((a_{i,j}$geq 1)).&lt;&#x2F;p&gt;
&lt;p&gt;Working with matrices allows us to have a computable representation of any graph, which is very useful.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Graphs have a lot of interesting properties besides being representable by a computer. What would happen if, for instance, we calculated ((A^2))? We obtain the following matrix:&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
1 &#x27; 0 &#x27; 0 &#x27; 0 &#x27; 1 \\
1 &#x27; 1 &#x27; 0 &#x27; 1 &#x27; 0 \\
0 &#x27; 1 &#x27; 1 &#x27; 0 &#x27; 0 \\
1 &#x27; 0 &#x27; 0 &#x27; 1 &#x27; 1 \\
0 &#x27; 2 &#x27; 1 &#x27; 0 &#x27; 0
&lt;&#x2F;div&gt;
&lt;p&gt;We can interpret this as the paths of order &lt;strong&gt;two&lt;&#x2F;strong&gt;. But what does the element ((a_{5,2}=2)) represent? It indicates the amount of possible ways to go from  ((s_5 $rightarrow s_i $rightarrow s_2)).&lt;&#x2F;p&gt;
&lt;p&gt;One can manually multiply the involved row and column to determine which element is the one we need to pass through, this way we have the row (([1 0 0 1 0])) and the column (([1 0 0 1 0])) (on vertical). The elements ((s_i·$geq 1)) are ((s_1)) and ((s_4)). This is, we can go from ((s_5)) to ((s_2)) via ((s_5 $rightarrow s_1 $rightarrow s_2)) or via ((s_5 $rightarrow s_4 $rightarrow s_2)):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;lonami.dev&#x2F;blog&#x2F;graphs&#x2F;example2.svg&quot; alt=&quot;Previous table as a graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s important to note that graphs to not consider self-connections, this is, ((s_i $rightarrow s_i)) is not allowed; neither we work with multigraphs here (those which allow multiple connections, for instance, an arbitrary number ((n)) of times).&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
1 &#x27; 1 &#x27;  0  &#x27; 1 &#x27; 0 \\
1 &#x27; 2 &#x27; #1# &#x27; 0 &#x27; 1 \\
1 &#x27; 0 &#x27;  0  &#x27; 1 &#x27; 1 \\
1 &#x27; 2 &#x27;  1  &#x27; 1 &#x27; 0 \\
2 &#x27; 0 &#x27;  0  &#x27; 1 &#x27; 2
&lt;&#x2F;div&gt;
&lt;p&gt;We can see how the first ((1)) just appeared on the element ((a_{2,3})), which means that the shortest path to it is at least of order three.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A graph is said to be &lt;strong&gt;strongly connected&lt;&#x2F;strong&gt; as long as there is a way to reach all its elements.&lt;&#x2F;p&gt;
&lt;p&gt;We can see all the available paths until now by simply adding up all the direct and indirect ways to reach a node, so for now, we can add ((A + A^2 + A^3)) in such a way that:&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
2 &#x27; 2 &#x27; 0 &#x27; 1 &#x27; 1 \\
3 &#x27; 3 &#x27; 1 &#x27; 1 &#x27; 3 \\
1 &#x27; 1 &#x27; 1 &#x27; 2 &#x27; 1 \\
2 &#x27; 3 &#x27; 2 &#x27; 2 &#x27; 1 \\
3 &#x27; 2 &#x27; 1 &#x27; 2 &#x27; 2
&lt;&#x2F;div&gt;
&lt;p&gt;There isn&#x27;t a connection between ((s_1)) and ((s_3)) yet. If we were to calculate ((A^4)):&lt;&#x2F;p&gt;
&lt;div class=&quot;matrix&quot;&gt;
1 &#x27; 2 &#x27; 1 &#x27;   &#x27;   \\
  &#x27;   &#x27;   &#x27;   &#x27;   \\
  &#x27;   &#x27;   &#x27;   &#x27;   \\
  &#x27;   &#x27;   &#x27;   &#x27;   \\
  &#x27;   &#x27;   &#x27;   &#x27;
&lt;&#x2F;div&gt;
&lt;p&gt;We don&#x27;t need to calculate anymore. We now know that the graph is strongly connected!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Congratulations! You&#x27;ve completed this tiny introduction to graphs. Now you can play around with them and design your own connections.&lt;&#x2F;p&gt;
&lt;p&gt;Hold the left mouse button on the above area and drag it down to create a new node, or drag a node to this area to delete it.&lt;&#x2F;p&gt;
&lt;p&gt;To create new connections, hold the right mouse button on the node you want to start with, and drag it to the node you want it to be connected to.&lt;&#x2F;p&gt;
&lt;p&gt;To delete the connections coming from a specific node, middle click it.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;tr&gt;&lt;td style=&quot;width:100%;&quot;&gt;
  &lt;button onclick=&quot;resetConnections()&quot;&gt;Reset connections&lt;&#x2F;button&gt;
  &lt;button onclick=&quot;clearNodes()&quot;&gt;Clear all the nodes&lt;&#x2F;button&gt;
  &lt;br &#x2F;&gt;
  &lt;br &#x2F;&gt;
  &lt;label for=&quot;matrixOrder&quot;&gt;Show matrix of order:&lt;&#x2F;label&gt;
  &lt;input id=&quot;matrixOrder&quot; type=&quot;number&quot; min=&quot;1&quot; max=&quot;5&quot;
                          value=&quot;1&quot; oninput=&quot;updateOrder()&quot;&gt;
  &lt;br &#x2F;&gt;
  &lt;label for=&quot;matrixAccum&quot;&gt;Show accumulated matrix&lt;&#x2F;label&gt;
  &lt;input id=&quot;matrixAccum&quot; type=&quot;checkbox&quot; onchange=&quot;updateOrder()&quot;&gt;
  &lt;br &#x2F;&gt;
  &lt;br &#x2F;&gt;
  &lt;div&gt;
    &lt;table id=&quot;matrixTable&quot;&gt;&lt;&#x2F;table&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;td&gt;&lt;td&gt;
  &lt;canvas id=&quot;canvas&quot; width=&quot;400&quot; height=&quot;400&quot; oncontextmenu=&quot;return false;&quot;&gt;
  Looks like your browser won&#x27;t let you see this fancy example :(
  &lt;&#x2F;canvas&gt;
  &lt;br &#x2F;&gt;
&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;
&lt;script src=&quot;tinyparser.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src=&quot;enhancements.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src=&quot;graphs.js&quot;&gt;&lt;&#x2F;script&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Installing NixOS</title>
		<published>2017-05-13T00:00:00+00:00</published>
		<updated>2019-02-16T00:00:00+00:00</updated>
		<link href="https://lonami.dev/blog/installing-nixos/" type="text/html"/>
		<id>https://lonami.dev/blog/installing-nixos/</id>
		<content type="html">&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Please see &lt;a href=&quot;&#x2F;blog&#x2F;installing-nixos-2&quot;&gt;my followup post with NixOS&lt;&#x2F;a&gt; for a far better experience with it&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Today I decided to install &lt;a href=&quot;http:&#x2F;&#x2F;nixos.org&#x2F;&quot;&gt;NixOS&lt;&#x2F;a&gt; as a recommendation, a purely functional Linux distribution, since &lt;a href=&quot;https:&#x2F;&#x2F;xubuntu.org&#x2F;&quot;&gt;Xubuntu&lt;&#x2F;a&gt; kept crashing. Here&#x27;s my journey, and how I managed to install it from a terminal for the first time in my life. Steps aren&#x27;t hard, but they may not seem obvious at first.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grab the Live CD, burn it on a USB stick and boot. I recommend using &lt;a href=&quot;https:&#x2F;&#x2F;etcher.io&#x2F;&quot;&gt;Etcher&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Type &lt;code&gt;systemctl start display-manager&lt;&#x2F;code&gt; and wait.&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Open both the manual and the &lt;code&gt;konsole&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Connect to the network using the GUI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Create the disk partitions by using &lt;code&gt;fdisk&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can list them with &lt;code&gt;fdisk -l&lt;&#x2F;code&gt;, modify a certain drive with &lt;code&gt;fdisk &#x2F;dev&#x2F;sdX&lt;&#x2F;code&gt; (for instance, &lt;code&gt;&#x2F;dev&#x2F;sda&lt;&#x2F;code&gt;) and follow the instructions.&lt;&#x2F;p&gt;
&lt;p&gt;To create the file system, use &lt;code&gt;mkfs.ext4 -L &amp;lt;label&amp;gt; &#x2F;dev&#x2F;sdXY&lt;&#x2F;code&gt; and swap with &lt;code&gt;mkswap -L &amp;lt;label&amp;gt; &#x2F;dev&#x2F;sdXY&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The EFI partition should be done with &lt;code&gt;mkfs.vfat&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Mount the target to &lt;code&gt;&#x2F;mnt&lt;&#x2F;code&gt; e.g. if the label was &lt;code&gt;nixos&lt;&#x2F;code&gt;, &lt;code&gt;mount &#x2F;dev&#x2F;disk&#x2F;by-label&#x2F;nixos &#x2F;mnt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkdir &#x2F;mnt&#x2F;boot&lt;&#x2F;code&gt; and then mount your EFI partition to it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Generate a configuration template with &lt;code&gt;nixos-generate-config --root &#x2F;mnt&lt;&#x2F;code&gt;, and modify it with &lt;code&gt;nano &#x2F;etc&#x2F;nixos&#x2F;configuration.nix&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;While modifying the configuration, make sure to add &lt;code&gt;boot.loader.grub.device = &amp;quot;&#x2F;dev&#x2F;sda&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;More useful configuration things are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Uncomment the whole &lt;code&gt;i18n&lt;&#x2F;code&gt; block.&lt;&#x2F;li&gt;
&lt;li&gt;Add some essential packages like &lt;code&gt;environment.systemPackages = with pkgs; [wget git firefox pulseaudio networkmanagerapplet];&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;If you want to use XFCE, add &lt;code&gt;services.xserver.desktopManager.xfce.enable = true;&lt;&#x2F;code&gt;, otherwise, you don&#x27;t need &lt;code&gt;networkmanagerapplet&lt;&#x2F;code&gt; either. Make sure to add &lt;code&gt;networking.networkmanager.enable = true;&lt;&#x2F;code&gt; too.&lt;&#x2F;li&gt;
&lt;li&gt;Define some user for yourself (modify &lt;code&gt;guest&lt;&#x2F;code&gt; name) and use a UID greater than 1000. Also, add yourself to &lt;code&gt;extraGroups = [&amp;quot;wheel&amp;quot; &amp;quot;networkmanager&amp;quot;];&lt;&#x2F;code&gt; (the first to be able to &lt;code&gt;sudo&lt;&#x2F;code&gt;, the second to use network related things).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;nixos-install&lt;&#x2F;code&gt;. If you ever modify that file again, to add more packages for instance (this is how they&#x27;re installed), run &lt;code&gt;nixos-rebuild switch&lt;&#x2F;code&gt; (or use &lt;code&gt;test&lt;&#x2F;code&gt; to test but don&#x27;t boot to it, or &lt;code&gt;boot&lt;&#x2F;code&gt; not to switch but to use on next boot.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reboot&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Login as &lt;code&gt;root&lt;&#x2F;code&gt;, and set a password for your user with &lt;code&gt;passwd &amp;lt;user&amp;gt;&lt;&#x2F;code&gt;. Done!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I enjoyed the process of installing it, and it&#x27;s really cool that it has versioning and is so clean to keep track of which packages you install. But not being able to run arbitrary binaries by default is something very limitting in my opinion, though they&#x27;ve done a good job.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m now back to Xubuntu, with a fresh install.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;update-1&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;It is not true that &amp;quot;they don&#x27;t allow running arbitrary binaries by default&amp;quot;, as pointed out in their &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;nixpkgs&#x2F;manual&#x2F;#sec-fhs-environments&quot;&gt;manual, buildFHSUserEnv&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;buildFHSUserEnv&lt;&#x2F;code&gt; provides a way to build and run FHS-compatible lightweight sandboxes. It creates an isolated root with bound &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;, so its footprint in terms of disk space needed is quite small. This allows one to run software which is hard or unfeasible to patch for NixOS -- 3rd-party source trees with FHS assumptions, games distributed as tarballs, software with integrity checking and&#x2F;or external self-updated binaries. It uses Linux namespaces feature to create temporary lightweight environments which are destroyed after all child processes exit, without root user rights requirement.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bb010g&quot;&gt;@bb010g&lt;&#x2F;a&gt; for pointing this out.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;&#x2F;h2&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;The keyboard mapping is a bit strange. On my Spanish keyboard, the keys were as follows:&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Keyboard&lt;&#x2F;th&gt;&lt;th&gt;Maps to&lt;&#x2F;th&gt;&lt;th&gt;Shift&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&#x27;&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;_&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;´&lt;&#x2F;td&gt;&lt;td&gt;&#x27;&lt;&#x2F;td&gt;&lt;td&gt;&amp;quot;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;`&lt;&#x2F;td&gt;&lt;td&gt;[&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;+&lt;&#x2F;td&gt;&lt;td&gt;]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;¡&lt;&#x2F;td&gt;&lt;td&gt;=&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;&#x2F;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ñ&lt;&#x2F;td&gt;&lt;td&gt;;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
	</entry>
</feed>
